// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsCacheSettingsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsCacheSettingsApiEvents Events { get; }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="applicationCachePatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<ApplicationCachePatchRequest> applicationCachePatchRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="applicationCachePatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<ApplicationCachePatchRequest> applicationCachePatchRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/ca
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCachePutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCachePutRequest> applicationCachePutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/ca
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCachePutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCachePutRequest> applicationCachePutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/cache_settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/cache_settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCacheCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCacheCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationCacheGetOneResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationCachePatchResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationCachePutResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationCacheGetResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationCacheCreateResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsCacheSettingsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsGet(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdCacheSettingsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsPost(EdgeApplicationsCacheSettingsApi.EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdCacheSettingsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsCacheSettingsApi : IEdgeApplicationsCacheSettingsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsCacheSettingsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsCacheSettingsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsCacheSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsCacheSettingsApi(ILogger<EdgeApplicationsCacheSettingsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsCacheSettingsApiEvents edgeApplicationsCacheSettingsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsCacheSettingsApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsCacheSettingsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref long edgeApplicationId, ref long cacheSettingsId, ref Option<string> accept, ref Option<string> contentType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(Option<string> accept, Option<string> contentType)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteAsync(edgeApplicationId, cacheSettingsId, accept, contentType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(accept, contentType);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(ref edgeApplicationId, ref cacheSettingsId, ref accept, ref contentType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcache_settings_id%7D", Uri.EscapeDataString(cacheSettingsId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteDefaultImplementation(apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", uriBuilderLocalVar.Path, edgeApplicationId, cacheSettingsId, accept, contentType);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref long edgeApplicationId, ref long cacheSettingsId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(Option<string> accept)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, cacheSettingsId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetAsync(edgeApplicationId, cacheSettingsId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(accept);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(ref edgeApplicationId, ref cacheSettingsId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcache_settings_id%7D", Uri.EscapeDataString(cacheSettingsId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", uriBuilderLocalVar.Path, edgeApplicationId, cacheSettingsId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationCacheGetOneResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationCacheGetOneResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationCacheGetOneResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref long edgeApplicationId, ref long cacheSettingsId, ref Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="applicationCachePatchRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (applicationCachePatchRequest.IsSet && applicationCachePatchRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationCachePatchRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="applicationCachePatchRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="applicationCachePatchRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="applicationCachePatchRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="applicationCachePatchRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<ApplicationCachePatchRequest> applicationCachePatchRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="applicationCachePatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<ApplicationCachePatchRequest> applicationCachePatchRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchAsync(edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/:cache_settings_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="applicationCachePatchRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<ApplicationCachePatchRequest> applicationCachePatchRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(accept, applicationCachePatchRequest);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(ref edgeApplicationId, ref cacheSettingsId, ref accept, applicationCachePatchRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcache_settings_id%7D", Uri.EscapeDataString(cacheSettingsId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (applicationCachePatchRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationCachePatchRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationCachePatchRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchDefaultImplementation(apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", uriBuilderLocalVar.Path, edgeApplicationId, cacheSettingsId, accept, applicationCachePatchRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationCachePatchResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationCachePatchResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationCachePatchResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref long edgeApplicationId, ref long cacheSettingsId, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCachePutRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(Option<string> accept, Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationCachePutRequest.IsSet && applicationCachePutRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCachePutRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCachePutRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCachePutRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCachePutRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long cacheSettingsId, Option<string> accept, Option<string> contentType, Option<ApplicationCachePutRequest> applicationCachePutRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/ca 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCachePutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutOrDefaultAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCachePutRequest> applicationCachePutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutAsync(edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings/ca 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="cacheSettingsId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCachePutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutAsync(long edgeApplicationId, long cacheSettingsId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCachePutRequest> applicationCachePutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(accept, contentType, applicationCachePutRequest);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(ref edgeApplicationId, ref cacheSettingsId, ref accept, ref contentType, applicationCachePutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bcache_settings_id%7D", Uri.EscapeDataString(cacheSettingsId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationCachePutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationCachePutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationCachePutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutDefaultImplementation(apiResponseLocalVar, edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings/{cache_settings_id}", uriBuilderLocalVar.Path, edgeApplicationId, cacheSettingsId, accept, contentType, applicationCachePutRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsCacheSettingsIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationCachePutResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationCachePutResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationCachePutResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref long edgeApplicationId, ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsGet(Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/cache_settings 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsGetAsync(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/cache_settings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsGet(filter, orderBy, sort, accept);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsGet(ref edgeApplicationId, ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings", uriBuilderLocalVar.Path, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationCacheGetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationCacheGetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationCacheGetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref long edgeApplicationId, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCacheCreateRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsPost(Option<string> accept, Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationCacheCreateRequest.IsSet && applicationCacheCreateRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationCacheCreateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCacheCreateRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsPostDefaultImplementation(IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, accept, contentType, applicationCacheCreateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCacheCreateRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCacheCreateRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, accept, contentType, applicationCacheCreateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCacheCreateRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCacheCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse?> EdgeApplicationsEdgeApplicationIdCacheSettingsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdCacheSettingsPostAsync(edgeApplicationId, accept, contentType, applicationCacheCreateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/cache_settings 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCacheCreateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse> EdgeApplicationsEdgeApplicationIdCacheSettingsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCacheCreateRequest> applicationCacheCreateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdCacheSettingsPost(accept, contentType, applicationCacheCreateRequest);

                FormatEdgeApplicationsEdgeApplicationIdCacheSettingsPost(ref edgeApplicationId, ref accept, ref contentType, applicationCacheCreateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/cache_settings";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationCacheCreateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationCacheCreateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationCacheCreateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse>();

                        EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/cache_settings", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdCacheSettingsPostDefaultImplementation(apiResponseLocalVar, edgeApplicationId, accept, contentType, applicationCacheCreateRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdCacheSettingsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPostDefaultImplementation(e, "/edge_applications/{edge_application_id}/cache_settings", uriBuilderLocalVar.Path, edgeApplicationId, accept, contentType, applicationCacheCreateRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdCacheSettingsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdCacheSettingsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationCacheCreateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationCacheCreateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationCacheCreateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
