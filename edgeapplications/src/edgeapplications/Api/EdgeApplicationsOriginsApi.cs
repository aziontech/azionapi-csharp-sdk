// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsOriginsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsOriginsApiEvents Events { get; }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse> EdgeApplicationsEdgeApplicationIdOriginsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_key}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_key}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/origins/:origin_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<PatchOriginsRequest> patchOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/origins/:origin_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<PatchOriginsRequest> patchOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<UpdateOriginsRequest> updateOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<UpdateOriginsRequest> updateOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse> EdgeApplicationsEdgeApplicationIdOriginsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateOriginsRequest> createOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateOriginsRequest> createOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.OriginsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.OriginsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.OriginsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.OriginsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.OriginsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsOriginsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsGet(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdOriginsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdOriginsPost;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsPost(EdgeApplicationsOriginsApi.EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdOriginsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsPost(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsOriginsApi : IEdgeApplicationsOriginsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsOriginsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsOriginsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsOriginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsOriginsApi(ILogger<EdgeApplicationsOriginsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsOriginsApiEvents edgeApplicationsOriginsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsOriginsApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsOriginsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsGet(ref long edgeApplicationId, ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsGet(Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsGetAsync(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse> EdgeApplicationsEdgeApplicationIdOriginsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsGet(filter, orderBy, sort, accept);

                FormatEdgeApplicationsEdgeApplicationIdOriginsGet(ref edgeApplicationId, ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins", uriBuilderLocalVar.Path, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.OriginsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.OriginsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.OriginsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref long edgeApplicationId, ref string originKey, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(string originKey, Option<string> accept)
        {
            if (originKey == null)
                throw new ArgumentNullException(nameof(originKey));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, originKey, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, originKey, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteAsync(edgeApplicationId, originKey, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(originKey, accept);

                FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(ref edgeApplicationId, ref originKey, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins/{origin_key}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borigin_key%7D", Uri.EscapeDataString(originKey.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins/{origin_key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteDefaultImplementation(apiResponseLocalVar, edgeApplicationId, originKey, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins/{origin_key}", uriBuilderLocalVar.Path, edgeApplicationId, originKey, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref long edgeApplicationId, ref string originKey, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(string originKey, Option<string> accept)
        {
            if (originKey == null)
                throw new ArgumentNullException(nameof(originKey));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, originKey, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, originKey, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_key} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetAsync(edgeApplicationId, originKey, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_key} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept">The id of the Origin that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetAsync(long edgeApplicationId, string originKey, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(originKey, accept);

                FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(ref edgeApplicationId, ref originKey, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins/{origin_key}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borigin_key%7D", Uri.EscapeDataString(originKey.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins/{origin_key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, originKey, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins/{origin_key}", uriBuilderLocalVar.Path, edgeApplicationId, originKey, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.OriginsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.OriginsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.OriginsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref long edgeApplicationId, ref string originKey, ref Option<string> accept, ref Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchOriginsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(string originKey, Option<string> accept, Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest)
        {
            if (originKey == null)
                throw new ArgumentNullException(nameof(originKey));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (patchOriginsRequest.IsSet && patchOriginsRequest.Value == null)
                throw new ArgumentNullException(nameof(patchOriginsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchOriginsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, originKey, accept, contentType, patchOriginsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchOriginsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchOriginsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, originKey, accept, contentType, patchOriginsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchOriginsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<PatchOriginsRequest> patchOriginsRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/origins/:origin_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<PatchOriginsRequest> patchOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchAsync(edgeApplicationId, originKey, accept, contentType, patchOriginsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/origins/:origin_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<PatchOriginsRequest> patchOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(originKey, accept, contentType, patchOriginsRequest);

                FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(ref edgeApplicationId, ref originKey, ref accept, ref contentType, patchOriginsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins/{origin_key}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borigin_key%7D", Uri.EscapeDataString(originKey.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (patchOriginsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchOriginsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchOriginsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins/{origin_key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchDefaultImplementation(apiResponseLocalVar, edgeApplicationId, originKey, accept, contentType, patchOriginsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins/{origin_key}", uriBuilderLocalVar.Path, edgeApplicationId, originKey, accept, contentType, patchOriginsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.OriginsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.OriginsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.OriginsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref long edgeApplicationId, ref string originKey, ref Option<string> accept, ref Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateOriginsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(string originKey, Option<string> accept, Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest)
        {
            if (originKey == null)
                throw new ArgumentNullException(nameof(originKey));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (updateOriginsRequest.IsSet && updateOriginsRequest.Value == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateOriginsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, originKey, accept, contentType, updateOriginsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateOriginsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse apiResponseLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateOriginsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, originKey, accept, contentType, updateOriginsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateOriginsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string originKey, Option<string> accept, Option<string> contentType, Option<UpdateOriginsRequest> updateOriginsRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutOrDefaultAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<UpdateOriginsRequest> updateOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutAsync(edgeApplicationId, originKey, accept, contentType, updateOriginsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins/{origin_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="originKey"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse> EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutAsync(long edgeApplicationId, string originKey, Option<string> accept = default, Option<string> contentType = default, Option<UpdateOriginsRequest> updateOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(originKey, accept, contentType, updateOriginsRequest);

                FormatEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(ref edgeApplicationId, ref originKey, ref accept, ref contentType, updateOriginsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins/{origin_key}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borigin_key%7D", Uri.EscapeDataString(originKey.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (updateOriginsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateOriginsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateOriginsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins/{origin_key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutDefaultImplementation(apiResponseLocalVar, edgeApplicationId, originKey, accept, contentType, updateOriginsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins/{origin_key}", uriBuilderLocalVar.Path, edgeApplicationId, originKey, accept, contentType, updateOriginsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsOriginKeyPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.OriginsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.OriginsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.OriginsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdOriginsPost(ref long edgeApplicationId, ref Option<string> accept, ref Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createOriginsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdOriginsPost(Option<string> accept, Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (createOriginsRequest.IsSet && createOriginsRequest.Value == null)
                throw new ArgumentNullException(nameof(createOriginsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createOriginsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdOriginsPostDefaultImplementation(IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdOriginsPost(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, accept, contentType, createOriginsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createOriginsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdOriginsPost(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createOriginsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdOriginsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdOriginsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, accept, contentType, createOriginsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createOriginsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdOriginsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateOriginsRequest> createOriginsRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse?> EdgeApplicationsEdgeApplicationIdOriginsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateOriginsRequest> createOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdOriginsPostAsync(edgeApplicationId, accept, contentType, createOriginsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/origins 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createOriginsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse> EdgeApplicationsEdgeApplicationIdOriginsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateOriginsRequest> createOriginsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdOriginsPost(accept, contentType, createOriginsRequest);

                FormatEdgeApplicationsEdgeApplicationIdOriginsPost(ref edgeApplicationId, ref accept, ref contentType, createOriginsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/origins";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (createOriginsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createOriginsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createOriginsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse>();

                        EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/origins", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdOriginsPostDefaultImplementation(apiResponseLocalVar, edgeApplicationId, accept, contentType, createOriginsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdOriginsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdOriginsPostDefaultImplementation(e, "/edge_applications/{edge_application_id}/origins", uriBuilderLocalVar.Path, edgeApplicationId, accept, contentType, createOriginsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdOriginsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdOriginsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdOriginsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.OriginsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.OriginsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.OriginsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
