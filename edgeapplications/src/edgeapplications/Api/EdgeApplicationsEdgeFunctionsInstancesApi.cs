// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsEdgeFunctionsInstancesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsEdgeFunctionsInstancesApiEvents Events { get; }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept">The id of the edge function instance you plan to query.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetAsync(long edgeApplicationId, long functionsInstancesId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept">The id of the edge function instance you plan to query.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetOrDefaultAsync(long edgeApplicationId, long functionsInstancesId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// edge_application/:edge_application_id:/functions_instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCreateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// edge_application/:edge_application_id:/functions_instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCreateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationInstancesGetOneResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationInstanceResults?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationInstanceResults?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationInstancesGetResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationInstanceResults?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsEdgeFunctionsInstancesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(EdgeApplicationsEdgeFunctionsInstancesApi.EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsEdgeFunctionsInstancesApi : IEdgeApplicationsEdgeFunctionsInstancesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsEdgeFunctionsInstancesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsEdgeFunctionsInstancesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsEdgeFunctionsInstancesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsEdgeFunctionsInstancesApi(ILogger<EdgeApplicationsEdgeFunctionsInstancesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsEdgeFunctionsInstancesApiEvents edgeApplicationsEdgeFunctionsInstancesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsEdgeFunctionsInstancesApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsEdgeFunctionsInstancesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref string edgeApplicationId, ref string functionsInstancesId, ref Option<string> accept, ref Option<string> contentType);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType)
        {
            if (edgeApplicationId == null)
                throw new ArgumentNullException(nameof(edgeApplicationId));

            if (functionsInstancesId == null)
                throw new ArgumentNullException(nameof(functionsInstancesId));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteAsync(edgeApplicationId, functionsInstancesId, accept, contentType, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(edgeApplicationId, functionsInstancesId, accept, contentType);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(ref edgeApplicationId, ref functionsInstancesId, ref accept, ref contentType);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfunctions_instances_id%7D", Uri.EscapeDataString(functionsInstancesId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteDefaultImplementation(apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", uriBuilderLocalVar.Path, edgeApplicationId, functionsInstancesId, accept, contentType);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref long edgeApplicationId, ref long functionsInstancesId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(Option<string> accept)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long functionsInstancesId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long functionsInstancesId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long functionsInstancesId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, functionsInstancesId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long functionsInstancesId, Option<string> accept);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept">The id of the edge function instance you plan to query.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetOrDefaultAsync(long edgeApplicationId, long functionsInstancesId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetAsync(edgeApplicationId, functionsInstancesId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept">The id of the edge function instance you plan to query.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetAsync(long edgeApplicationId, long functionsInstancesId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(accept);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(ref edgeApplicationId, ref functionsInstancesId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfunctions_instances_id%7D", Uri.EscapeDataString(functionsInstancesId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", uriBuilderLocalVar.Path, edgeApplicationId, functionsInstancesId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationInstancesGetOneResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationInstancesGetOneResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationInstancesGetOneResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref string edgeApplicationId, ref string functionsInstancesId, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateInstanceRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest)
        {
            if (edgeApplicationId == null)
                throw new ArgumentNullException(nameof(edgeApplicationId));

            if (functionsInstancesId == null)
                throw new ArgumentNullException(nameof(functionsInstancesId));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationUpdateInstanceRequest.IsSet && applicationUpdateInstanceRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationUpdateInstanceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateInstanceRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateInstanceRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateInstanceRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateInstanceRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchAsync(edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateInstanceRequest> applicationUpdateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(ref edgeApplicationId, ref functionsInstancesId, ref accept, ref contentType, applicationUpdateInstanceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfunctions_instances_id%7D", Uri.EscapeDataString(functionsInstancesId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationUpdateInstanceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationUpdateInstanceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationUpdateInstanceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchDefaultImplementation(apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", uriBuilderLocalVar.Path, edgeApplicationId, functionsInstancesId, accept, contentType, applicationUpdateInstanceRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationInstanceResults? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationInstanceResults>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationInstanceResults? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref string edgeApplicationId, ref string functionsInstancesId, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutInstanceRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest)
        {
            if (edgeApplicationId == null)
                throw new ArgumentNullException(nameof(edgeApplicationId));

            if (functionsInstancesId == null)
                throw new ArgumentNullException(nameof(functionsInstancesId));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationPutInstanceRequest.IsSet && applicationPutInstanceRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationPutInstanceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutInstanceRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutInstanceRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse apiResponseLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutInstanceRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="functionsInstancesId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutInstanceRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string edgeApplicationId, string functionsInstancesId, Option<string> accept, Option<string> contentType, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutOrDefaultAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutAsync(edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances/:functions_instances_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to overwrite </param>
        /// <param name="functionsInstancesId">The id of the edge function instance you plan to overwrite.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutAsync(string edgeApplicationId, string functionsInstancesId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutInstanceRequest> applicationPutInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(ref edgeApplicationId, ref functionsInstancesId, ref accept, ref contentType, applicationPutInstanceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfunctions_instances_id%7D", Uri.EscapeDataString(functionsInstancesId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationPutInstanceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationPutInstanceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationPutInstanceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutDefaultImplementation(apiResponseLocalVar, edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances/{functions_instances_id}", uriBuilderLocalVar.Path, edgeApplicationId, functionsInstancesId, accept, contentType, applicationPutInstanceRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesFunctionsInstancesIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationInstanceResults? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationInstanceResults>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationInstanceResults? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref long edgeApplicationId, ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetAsync(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/functions_instances 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(filter, orderBy, sort, accept);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(ref edgeApplicationId, ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances", uriBuilderLocalVar.Path, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationInstancesGetResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationInstancesGetResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationInstancesGetResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref long edgeApplicationId, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCreateInstanceRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(Option<string> accept, Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationCreateInstanceRequest.IsSet && applicationCreateInstanceRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationCreateInstanceRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCreateInstanceRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostDefaultImplementation(IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, accept, contentType, applicationCreateInstanceRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCreateInstanceRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCreateInstanceRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, accept, contentType, applicationCreateInstanceRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationCreateInstanceRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest);

        /// <summary>
        /// edge_application/:edge_application_id:/functions_instances 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCreateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse?> EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostAsync(edgeApplicationId, accept, contentType, applicationCreateInstanceRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// edge_application/:edge_application_id:/functions_instances 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationCreateInstanceRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse> EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationCreateInstanceRequest> applicationCreateInstanceRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(accept, contentType, applicationCreateInstanceRequest);

                FormatEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(ref edgeApplicationId, ref accept, ref contentType, applicationCreateInstanceRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/functions_instances";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationCreateInstanceRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationCreateInstanceRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationCreateInstanceRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse>();

                        EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/functions_instances", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostDefaultImplementation(apiResponseLocalVar, edgeApplicationId, accept, contentType, applicationCreateInstanceRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostDefaultImplementation(e, "/edge_applications/{edge_application_id}/functions_instances", uriBuilderLocalVar.Path, edgeApplicationId, accept, contentType, applicationCreateInstanceRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdFunctionsInstancesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdFunctionsInstancesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationInstanceResults? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationInstanceResults>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationInstanceResults? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
