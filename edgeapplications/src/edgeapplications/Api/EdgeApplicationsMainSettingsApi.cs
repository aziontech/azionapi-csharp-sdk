// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsMainSettingsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsMainSettingsApiEvents Events { get; }

        /// <summary>
        /// /edge_applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsGetApiResponse> EdgeApplicationsGetAsync(Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsGetApiResponse?> EdgeApplicationsGetOrDefaultAsync(Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the edge application that you plan to delete.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsIdDeleteApiResponse> EdgeApplicationsIdDeleteAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The id of the edge application that you plan to delete.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsIdDeleteApiResponse?> EdgeApplicationsIdDeleteOrDefaultAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsIdGetApiResponse> EdgeApplicationsIdGetAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsIdGetApiResponse?> EdgeApplicationsIdGetOrDefaultAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsIdPatchApiResponse> EdgeApplicationsIdPatchAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateRequest> applicationUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsIdPatchApiResponse?> EdgeApplicationsIdPatchOrDefaultAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateRequest> applicationUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the edge application to be overwritten. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsIdPutApiResponse> EdgeApplicationsIdPutAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutRequest> applicationPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id">The Id of the edge application to be overwritten. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsIdPutApiResponse?> EdgeApplicationsIdPutOrDefaultAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutRequest> applicationPutRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsPostApiResponse> EdgeApplicationsPostAsync(Option<string> accept = default, Option<string> contentType = default, Option<CreateApplicationRequest> createApplicationRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsPostApiResponse?> EdgeApplicationsPostOrDefaultAsync(Option<string> accept = default, Option<string> contentType = default, Option<CreateApplicationRequest> createApplicationRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.GetApplicationsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsIdDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsIdDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsIdGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsIdGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.GetApplicationResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsIdPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsIdPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationUpdateResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsIdPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsIdPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.ApplicationPutResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 405 MethodNotAllowed
        /// </summary>
        /// <returns></returns>
        bool IsMethodNotAllowed { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.CreateApplicationResult?>, ICreated<edgeapplications.Model.CreateApplicationResult?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 415 UnsupportedMediaType
        /// </summary>
        /// <returns></returns>
        bool IsUnsupportedMediaType { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsMainSettingsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsGet;

        internal void ExecuteOnEdgeApplicationsGet(EdgeApplicationsMainSettingsApi.EdgeApplicationsGetApiResponse apiResponse)
        {
            OnEdgeApplicationsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsGet(Exception exception)
        {
            OnErrorEdgeApplicationsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsIdDelete;

        internal void ExecuteOnEdgeApplicationsIdDelete(EdgeApplicationsMainSettingsApi.EdgeApplicationsIdDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsIdDelete(Exception exception)
        {
            OnErrorEdgeApplicationsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsIdGet;

        internal void ExecuteOnEdgeApplicationsIdGet(EdgeApplicationsMainSettingsApi.EdgeApplicationsIdGetApiResponse apiResponse)
        {
            OnEdgeApplicationsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsIdGet(Exception exception)
        {
            OnErrorEdgeApplicationsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsIdPatch;

        internal void ExecuteOnEdgeApplicationsIdPatch(EdgeApplicationsMainSettingsApi.EdgeApplicationsIdPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsIdPatch(Exception exception)
        {
            OnErrorEdgeApplicationsIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsIdPut;

        internal void ExecuteOnEdgeApplicationsIdPut(EdgeApplicationsMainSettingsApi.EdgeApplicationsIdPutApiResponse apiResponse)
        {
            OnEdgeApplicationsIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsIdPut(Exception exception)
        {
            OnErrorEdgeApplicationsIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsPost;

        internal void ExecuteOnEdgeApplicationsPost(EdgeApplicationsMainSettingsApi.EdgeApplicationsPostApiResponse apiResponse)
        {
            OnEdgeApplicationsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsPost(Exception exception)
        {
            OnErrorEdgeApplicationsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsMainSettingsApi : IEdgeApplicationsMainSettingsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsMainSettingsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsMainSettingsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsMainSettingsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsMainSettingsApi(ILogger<EdgeApplicationsMainSettingsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsMainSettingsApiEvents edgeApplicationsMainSettingsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsMainSettingsApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsMainSettingsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsGet(ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsGet(Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsGetDefaultImplementation(IEdgeApplicationsGetApiResponse apiResponseLocalVar, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsGet(ref suppressDefaultLog, apiResponseLocalVar, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsGet(ref bool suppressDefaultLog, IEdgeApplicationsGetApiResponse apiResponseLocalVar, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications 
        /// </summary>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsGetApiResponse?> EdgeApplicationsGetOrDefaultAsync(Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsGetAsync(page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsGetApiResponse> EdgeApplicationsGetAsync(Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsGet(filter, orderBy, sort, accept);

                FormatEdgeApplicationsGet(ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsGetApiResponse>();

                        EdgeApplicationsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsGetDefaultImplementation(apiResponseLocalVar, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsGetDefaultImplementation(e, "/edge_applications", uriBuilderLocalVar.Path, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsGetApiResponse(ILogger<EdgeApplicationsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.GetApplicationsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.GetApplicationsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.GetApplicationsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsIdDelete(ref string id, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsIdDelete(string id, Option<string> accept)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsIdDeleteDefaultImplementation(IEdgeApplicationsIdDeleteApiResponse apiResponseLocalVar, string id, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsIdDelete(ref bool suppressDefaultLog, IEdgeApplicationsIdDeleteApiResponse apiResponseLocalVar, string id, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept);

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <param name="id">The id of the edge application that you plan to delete.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdDeleteApiResponse?> EdgeApplicationsIdDeleteOrDefaultAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsIdDeleteAsync(id, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the edge application that you plan to delete.</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdDeleteApiResponse> EdgeApplicationsIdDeleteAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsIdDelete(id, accept);

                FormatEdgeApplicationsIdDelete(ref id, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsIdDeleteApiResponse>();

                        EdgeApplicationsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsIdDeleteDefaultImplementation(apiResponseLocalVar, id, accept);

                        Events.ExecuteOnEdgeApplicationsIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsIdDeleteDefaultImplementation(e, "/edge_applications/{id}", uriBuilderLocalVar.Path, id, accept);
                Events.ExecuteOnErrorEdgeApplicationsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsIdDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsIdDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsIdDeleteApiResponse(ILogger<EdgeApplicationsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsIdGet(ref string id, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsIdGet(string id, Option<string> accept)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsIdGetDefaultImplementation(IEdgeApplicationsIdGetApiResponse apiResponseLocalVar, string id, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsIdGet(ref bool suppressDefaultLog, IEdgeApplicationsIdGetApiResponse apiResponseLocalVar, string id, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept);

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdGetApiResponse?> EdgeApplicationsIdGetOrDefaultAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsIdGetAsync(id, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdGetApiResponse> EdgeApplicationsIdGetAsync(string id, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsIdGet(id, accept);

                FormatEdgeApplicationsIdGet(ref id, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsIdGetApiResponse>();

                        EdgeApplicationsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsIdGetDefaultImplementation(apiResponseLocalVar, id, accept);

                        Events.ExecuteOnEdgeApplicationsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsIdGetDefaultImplementation(e, "/edge_applications/{id}", uriBuilderLocalVar.Path, id, accept);
                Events.ExecuteOnErrorEdgeApplicationsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsIdGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsIdGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsIdGetApiResponse(ILogger<EdgeApplicationsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.GetApplicationResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.GetApplicationResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.GetApplicationResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsIdPatch(ref string id, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsIdPatch(string id, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationUpdateRequest.IsSet && applicationUpdateRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationUpdateRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateRequest"></param>
        private void AfterEdgeApplicationsIdPatchDefaultImplementation(IEdgeApplicationsIdPatchApiResponse apiResponseLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsIdPatch(ref suppressDefaultLog, apiResponseLocalVar, id, accept, contentType, applicationUpdateRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateRequest"></param>
        partial void AfterEdgeApplicationsIdPatch(ref bool suppressDefaultLog, IEdgeApplicationsIdPatchApiResponse apiResponseLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateRequest"></param>
        private void OnErrorEdgeApplicationsIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, accept, contentType, applicationUpdateRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationUpdateRequest"></param>
        partial void OnErrorEdgeApplicationsIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationUpdateRequest> applicationUpdateRequest);

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdPatchApiResponse?> EdgeApplicationsIdPatchOrDefaultAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateRequest> applicationUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsIdPatchAsync(id, accept, contentType, applicationUpdateRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationUpdateRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdPatchApiResponse> EdgeApplicationsIdPatchAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationUpdateRequest> applicationUpdateRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsIdPatch(id, accept, contentType, applicationUpdateRequest);

                FormatEdgeApplicationsIdPatch(ref id, ref accept, ref contentType, applicationUpdateRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationUpdateRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationUpdateRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationUpdateRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsIdPatchApiResponse>();

                        EdgeApplicationsIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsIdPatchDefaultImplementation(apiResponseLocalVar, id, accept, contentType, applicationUpdateRequest);

                        Events.ExecuteOnEdgeApplicationsIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsIdPatchDefaultImplementation(e, "/edge_applications/{id}", uriBuilderLocalVar.Path, id, accept, contentType, applicationUpdateRequest);
                Events.ExecuteOnErrorEdgeApplicationsIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsIdPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsIdPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsIdPatchApiResponse(ILogger<EdgeApplicationsIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationUpdateResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationUpdateResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationUpdateResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsIdPut(ref string id, ref Option<string> accept, ref Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsIdPut(string id, Option<string> accept, Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest)
        {
            if (id == null)
                throw new ArgumentNullException(nameof(id));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (applicationPutRequest.IsSet && applicationPutRequest.Value == null)
                throw new ArgumentNullException(nameof(applicationPutRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutRequest"></param>
        private void AfterEdgeApplicationsIdPutDefaultImplementation(IEdgeApplicationsIdPutApiResponse apiResponseLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsIdPut(ref suppressDefaultLog, apiResponseLocalVar, id, accept, contentType, applicationPutRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutRequest"></param>
        partial void AfterEdgeApplicationsIdPut(ref bool suppressDefaultLog, IEdgeApplicationsIdPutApiResponse apiResponseLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutRequest"></param>
        private void OnErrorEdgeApplicationsIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, accept, contentType, applicationPutRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="applicationPutRequest"></param>
        partial void OnErrorEdgeApplicationsIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string id, Option<string> accept, Option<string> contentType, Option<ApplicationPutRequest> applicationPutRequest);

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <param name="id">The Id of the edge application to be overwritten. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdPutApiResponse?> EdgeApplicationsIdPutOrDefaultAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutRequest> applicationPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsIdPutAsync(id, accept, contentType, applicationPutRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The Id of the edge application to be overwritten. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="applicationPutRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsIdPutApiResponse> EdgeApplicationsIdPutAsync(string id, Option<string> accept = default, Option<string> contentType = default, Option<ApplicationPutRequest> applicationPutRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsIdPut(id, accept, contentType, applicationPutRequest);

                FormatEdgeApplicationsIdPut(ref id, ref accept, ref contentType, applicationPutRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (applicationPutRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (applicationPutRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(applicationPutRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsIdPutApiResponse>();

                        EdgeApplicationsIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsIdPutDefaultImplementation(apiResponseLocalVar, id, accept, contentType, applicationPutRequest);

                        Events.ExecuteOnEdgeApplicationsIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsIdPutDefaultImplementation(e, "/edge_applications/{id}", uriBuilderLocalVar.Path, id, accept, contentType, applicationPutRequest);
                Events.ExecuteOnErrorEdgeApplicationsIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsIdPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsIdPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsIdPutApiResponse(ILogger<EdgeApplicationsIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.ApplicationPutResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.ApplicationPutResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.ApplicationPutResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 405 MethodNotAllowed
            /// </summary>
            /// <returns></returns>
            public bool IsMethodNotAllowed => 405 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsPost(ref Option<string> accept, ref Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createApplicationRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsPost(Option<string> accept, Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (createApplicationRequest.IsSet && createApplicationRequest.Value == null)
                throw new ArgumentNullException(nameof(createApplicationRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createApplicationRequest"></param>
        private void AfterEdgeApplicationsPostDefaultImplementation(IEdgeApplicationsPostApiResponse apiResponseLocalVar, Option<string> accept, Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsPost(ref suppressDefaultLog, apiResponseLocalVar, accept, contentType, createApplicationRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createApplicationRequest"></param>
        partial void AfterEdgeApplicationsPost(ref bool suppressDefaultLog, IEdgeApplicationsPostApiResponse apiResponseLocalVar, Option<string> accept, Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createApplicationRequest"></param>
        private void OnErrorEdgeApplicationsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> accept, Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, accept, contentType, createApplicationRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createApplicationRequest"></param>
        partial void OnErrorEdgeApplicationsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> accept, Option<string> contentType, Option<CreateApplicationRequest> createApplicationRequest);

        /// <summary>
        /// /edge_applications 
        /// </summary>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsPostApiResponse?> EdgeApplicationsPostOrDefaultAsync(Option<string> accept = default, Option<string> contentType = default, Option<CreateApplicationRequest> createApplicationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsPostAsync(accept, contentType, createApplicationRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createApplicationRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsPostApiResponse> EdgeApplicationsPostAsync(Option<string> accept = default, Option<string> contentType = default, Option<CreateApplicationRequest> createApplicationRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsPost(accept, contentType, createApplicationRequest);

                FormatEdgeApplicationsPost(ref accept, ref contentType, createApplicationRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications";

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (createApplicationRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createApplicationRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createApplicationRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsPostApiResponse>();

                        EdgeApplicationsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsPostDefaultImplementation(apiResponseLocalVar, accept, contentType, createApplicationRequest);

                        Events.ExecuteOnEdgeApplicationsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsPostDefaultImplementation(e, "/edge_applications", uriBuilderLocalVar.Path, accept, contentType, createApplicationRequest);
                Events.ExecuteOnErrorEdgeApplicationsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsPostApiResponse(ILogger<EdgeApplicationsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.CreateApplicationResult? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.CreateApplicationResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.CreateApplicationResult? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.CreateApplicationResult? Created()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsCreated
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.CreateApplicationResult>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 201 Created and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryCreated([NotNullWhen(true)]out edgeapplications.Model.CreateApplicationResult? result)
            {
                result = null;

                try
                {
                    result = Created();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)201);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 415 UnsupportedMediaType
            /// </summary>
            /// <returns></returns>
            public bool IsUnsupportedMediaType => 415 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
