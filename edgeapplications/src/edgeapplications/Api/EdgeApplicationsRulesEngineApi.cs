// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsRulesEngineApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsRulesEngineApiEvents Events { get; }

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetAsync(long edgeApplicationId, string phase, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetOrDefaultAsync(long edgeApplicationId, string phase, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- - | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostAsync(long edgeApplicationId, string phase, Option<string> accept = default, Option<string> contentType = default, Option<CreateRulesEngineRequest> createRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- - | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostOrDefaultAsync(long edgeApplicationId, string phase, Option<string> accept = default, Option<string> contentType = default, Option<CreateRulesEngineRequest> createRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to delete. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId">The id of the edge application you plan to delete. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you want to get. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId">The id of the edge application you want to get. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<PatchRulesEngineRequest> patchRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<PatchRulesEngineRequest> patchRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateRulesEngineRequest> updateRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id:
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateRulesEngineRequest> updateRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.RulesEngineResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.RulesEngineIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.RulesEngineIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.RulesEngineIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.RulesEngineIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsRulesEngineApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(EdgeApplicationsRulesEngineApi.EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsRulesEngineApi : IEdgeApplicationsRulesEngineApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsRulesEngineApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsRulesEngineApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsRulesEngineApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsRulesEngineApi(ILogger<EdgeApplicationsRulesEngineApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsRulesEngineApiEvents edgeApplicationsRulesEngineApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsRulesEngineApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsRulesEngineApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref long edgeApplicationId, ref string phase, ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(string phase, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetOrDefaultAsync(long edgeApplicationId, string phase, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetAsync(edgeApplicationId, phase, page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetAsync(long edgeApplicationId, string phase, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(phase, filter, orderBy, sort, accept);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(ref edgeApplicationId, ref phase, ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", uriBuilderLocalVar.Path, edgeApplicationId, phase, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.RulesEngineResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.RulesEngineResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.RulesEngineResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref long edgeApplicationId, ref string phase, ref Option<string> accept, ref Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createRulesEngineRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(string phase, Option<string> accept, Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (createRulesEngineRequest.IsSet && createRulesEngineRequest.Value == null)
                throw new ArgumentNullException(nameof(createRulesEngineRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createRulesEngineRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, Option<string> accept, Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, accept, contentType, createRulesEngineRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createRulesEngineRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, Option<string> accept, Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createRulesEngineRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, Option<string> accept, Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, accept, contentType, createRulesEngineRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createRulesEngineRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, Option<string> accept, Option<string> contentType, Option<CreateRulesEngineRequest> createRulesEngineRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- - | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostOrDefaultAsync(long edgeApplicationId, string phase, Option<string> accept = default, Option<string> contentType = default, Option<CreateRulesEngineRequest> createRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostAsync(edgeApplicationId, phase, accept, contentType, createRulesEngineRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules Check below the list of behaviors that can be applied:  | Name                                | Behavior               | | - -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- | - -- -- -- -- -- -- -- -- -- -- - | | Add Request Cookie                  | add_request_cookie     | | Add Request Header                  | add_request_header     | | Add Response Cookie                 | set_cookie             | | Add Response Header                 | add_response_header    | | Bypass Cache                        | bypass_cache_phase     | | Capture Match Groups                | capture_match_groups   | | Deliver                             | deliver                | | Deny (403 Forbidden)                | deny                   | | Enable Gzip                         | enable_gzip            | | Filter Request Cookie               | filter_request_cookie  | | Filter Request Header               | filter_request_header  | | Filter Response Cookie              | filter_response_cookie | | Filter Response Header              | filter_response_header | | Finish Request Phase                | finish_request_phase   | | Forward Cookies                     | forward_cookies        | | Optimize Images                     | optimize_images        | | Redirect HTTP to HTTPS              | redirect_http_to_https | | Redirect To (301 Moved Permanently) | redirect_to_301        | | Redirect To (302 Found)             | redirect_to_302        | | Rewrite Request                     | rewrite_request        | | Run Function                        | run_function           | | Set Cache Policy                    | set_cache_policy       | | Set Origin                          | set_origin             |
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostAsync(long edgeApplicationId, string phase, Option<string> accept = default, Option<string> contentType = default, Option<CreateRulesEngineRequest> createRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(phase, accept, contentType, createRulesEngineRequest);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(ref edgeApplicationId, ref phase, ref accept, ref contentType, createRulesEngineRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (createRulesEngineRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createRulesEngineRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createRulesEngineRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, accept, contentType, createRulesEngineRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules", uriBuilderLocalVar.Path, edgeApplicationId, phase, accept, contentType, createRulesEngineRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.RulesEngineIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.RulesEngineIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.RulesEngineIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref long edgeApplicationId, ref string phase, ref long ruleId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(string phase, Option<string> accept)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, ruleId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <param name="edgeApplicationId">The id of the edge application you plan to delete. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteAsync(edgeApplicationId, phase, ruleId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you plan to delete. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(phase, accept);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(ref edgeApplicationId, ref phase, ref ruleId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brule_id%7D", Uri.EscapeDataString(ruleId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", uriBuilderLocalVar.Path, edgeApplicationId, phase, ruleId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref long edgeApplicationId, ref string phase, ref long ruleId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(string phase, Option<string> accept)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, ruleId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <param name="edgeApplicationId">The id of the edge application you want to get. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetAsync(edgeApplicationId, phase, ruleId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/rules_engine/{phase}/rules 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId">The id of the edge application you want to get. </param>
        /// <param name="phase"></param>
        /// <param name="ruleId">The id of the rule you plan to delete. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(phase, accept);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(ref edgeApplicationId, ref phase, ref ruleId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brule_id%7D", Uri.EscapeDataString(ruleId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", uriBuilderLocalVar.Path, edgeApplicationId, phase, ruleId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.RulesEngineIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.RulesEngineIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.RulesEngineIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref long edgeApplicationId, ref string phase, ref long ruleId, ref Option<string> accept, ref Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchRulesEngineRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(string phase, Option<string> accept, Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (patchRulesEngineRequest.IsSet && patchRulesEngineRequest.Value == null)
                throw new ArgumentNullException(nameof(patchRulesEngineRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchRulesEngineRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, patchRulesEngineRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchRulesEngineRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchRulesEngineRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, patchRulesEngineRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchRulesEngineRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<PatchRulesEngineRequest> patchRulesEngineRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<PatchRulesEngineRequest> patchRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchAsync(edgeApplicationId, phase, ruleId, accept, contentType, patchRulesEngineRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<PatchRulesEngineRequest> patchRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(phase, accept, contentType, patchRulesEngineRequest);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(ref edgeApplicationId, ref phase, ref ruleId, ref accept, ref contentType, patchRulesEngineRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brule_id%7D", Uri.EscapeDataString(ruleId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (patchRulesEngineRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchRulesEngineRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchRulesEngineRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, patchRulesEngineRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", uriBuilderLocalVar.Path, edgeApplicationId, phase, ruleId, accept, contentType, patchRulesEngineRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.RulesEngineIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.RulesEngineIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.RulesEngineIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref long edgeApplicationId, ref string phase, ref long ruleId, ref Option<string> accept, ref Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="phase"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateRulesEngineRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(string phase, Option<string> accept, Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest)
        {
            if (phase == null)
                throw new ArgumentNullException(nameof(phase));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (updateRulesEngineRequest.IsSet && updateRulesEngineRequest.Value == null)
                throw new ArgumentNullException(nameof(updateRulesEngineRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateRulesEngineRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutDefaultImplementation(IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, updateRulesEngineRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateRulesEngineRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateRulesEngineRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, updateRulesEngineRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateRulesEngineRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, string phase, long ruleId, Option<string> accept, Option<string> contentType, Option<UpdateRulesEngineRequest> updateRulesEngineRequest);

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id: 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutOrDefaultAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateRulesEngineRequest> updateRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutAsync(edgeApplicationId, phase, ruleId, accept, contentType, updateRulesEngineRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/:edge_application_id:/rules_engine/:phase:/rules/:rule_id: 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="phase"></param>
        /// <param name="ruleId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateRulesEngineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse> EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutAsync(long edgeApplicationId, string phase, long ruleId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateRulesEngineRequest> updateRulesEngineRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(phase, accept, contentType, updateRulesEngineRequest);

                FormatEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(ref edgeApplicationId, ref phase, ref ruleId, ref accept, ref contentType, updateRulesEngineRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bphase%7D", Uri.EscapeDataString(phase.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brule_id%7D", Uri.EscapeDataString(ruleId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (updateRulesEngineRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateRulesEngineRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateRulesEngineRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse>();

                        EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutDefaultImplementation(apiResponseLocalVar, edgeApplicationId, phase, ruleId, accept, contentType, updateRulesEngineRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutDefaultImplementation(e, "/edge_applications/{edge_application_id}/rules_engine/{phase}/rules/{rule_id}", uriBuilderLocalVar.Path, edgeApplicationId, phase, ruleId, accept, contentType, updateRulesEngineRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdRulesEnginePhaseRulesRuleIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.RulesEngineIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.RulesEngineIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.RulesEngineIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
