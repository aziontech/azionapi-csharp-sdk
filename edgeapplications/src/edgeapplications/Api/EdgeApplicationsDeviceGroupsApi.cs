// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using edgeapplications.Client;
using edgeapplications.Model;
using System.Diagnostics.CodeAnalysis;

namespace edgeapplications.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IEdgeApplicationsDeviceGroupsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        EdgeApplicationsDeviceGroupsApiEvents Events { get; }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id}
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>?&gt;</returns>
        Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse : edgeapplications.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 204 NoContent
        /// </summary>
        /// <returns></returns>
        bool IsNoContent { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.DeviceGroupsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.DeviceGroupsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.DeviceGroupsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.DeviceGroupsResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>
    /// </summary>
    public interface IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse : edgeapplications.Client.IApiResponse, IOk<edgeapplications.Model.DeviceGroupsIdResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 415 UnsupportedMediaType
        /// </summary>
        /// <returns></returns>
        bool IsUnsupportedMediaType { get; }

        /// <summary>
        /// Returns true if the response is 422 UnprocessableContent
        /// </summary>
        /// <returns></returns>
        bool IsUnprocessableContent { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class EdgeApplicationsDeviceGroupsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnEdgeApplicationsEdgeApplicationIdDeviceGroupsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost;

        internal void ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(EdgeApplicationsDeviceGroupsApi.EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse apiResponse)
        {
            OnEdgeApplicationsEdgeApplicationIdDeviceGroupsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(Exception exception)
        {
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class EdgeApplicationsDeviceGroupsApi : IEdgeApplicationsDeviceGroupsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<EdgeApplicationsDeviceGroupsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public EdgeApplicationsDeviceGroupsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeApplicationsDeviceGroupsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeApplicationsDeviceGroupsApi(ILogger<EdgeApplicationsDeviceGroupsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, EdgeApplicationsDeviceGroupsApiEvents edgeApplicationsDeviceGroupsApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<EdgeApplicationsDeviceGroupsApi>();
            HttpClient = httpClient;
            Events = edgeApplicationsDeviceGroupsApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref long edgeApplicationId, ref long deviceGroupId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(Option<string> accept)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, deviceGroupId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteAsync(edgeApplicationId, deviceGroupId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to delete. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(accept);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(ref edgeApplicationId, ref deviceGroupId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups/{device_group_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdevice_group_id%7D", Uri.EscapeDataString(deviceGroupId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteDefaultImplementation(apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", uriBuilderLocalVar.Path, edgeApplicationId, deviceGroupId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 204 NoContent
            /// </summary>
            /// <returns></returns>
            public bool IsNoContent => 204 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref long edgeApplicationId, ref long deviceGroupId, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(Option<string> accept)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, deviceGroupId, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetAsync(edgeApplicationId, deviceGroupId, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept">The id of the Device Groups that you plan to query. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(accept);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(ref edgeApplicationId, ref deviceGroupId, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups/{device_group_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdevice_group_id%7D", Uri.EscapeDataString(deviceGroupId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", uriBuilderLocalVar.Path, edgeApplicationId, deviceGroupId, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.DeviceGroupsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.DeviceGroupsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.DeviceGroupsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref long edgeApplicationId, ref long deviceGroupId, ref Option<string> accept, ref Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchDeviceGroupsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(Option<string> accept, Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (patchDeviceGroupsRequest.IsSet && patchDeviceGroupsRequest.Value == null)
                throw new ArgumentNullException(nameof(patchDeviceGroupsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchDeviceGroupsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, patchDeviceGroupsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchDeviceGroupsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchDeviceGroupsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, patchDeviceGroupsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="patchDeviceGroupsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchAsync(edgeApplicationId, deviceGroupId, accept, contentType, patchDeviceGroupsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="patchDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<PatchDeviceGroupsRequest> patchDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(accept, contentType, patchDeviceGroupsRequest);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(ref edgeApplicationId, ref deviceGroupId, ref accept, ref contentType, patchDeviceGroupsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups/{device_group_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdevice_group_id%7D", Uri.EscapeDataString(deviceGroupId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (patchDeviceGroupsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (patchDeviceGroupsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(patchDeviceGroupsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Patch;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchDefaultImplementation(apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, patchDeviceGroupsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", uriBuilderLocalVar.Path, edgeApplicationId, deviceGroupId, accept, contentType, patchDeviceGroupsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPatchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.DeviceGroupsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.DeviceGroupsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.DeviceGroupsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref long edgeApplicationId, ref long deviceGroupId, ref Option<string> accept, ref Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateDeviceGroupsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(Option<string> accept, Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (updateDeviceGroupsRequest.IsSet && updateDeviceGroupsRequest.Value == null)
                throw new ArgumentNullException(nameof(updateDeviceGroupsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateDeviceGroupsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, updateDeviceGroupsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateDeviceGroupsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse apiResponseLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateDeviceGroupsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, updateDeviceGroupsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="updateDeviceGroupsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, long deviceGroupId, Option<string> accept, Option<string> contentType, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutOrDefaultAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutAsync(edgeApplicationId, deviceGroupId, accept, contentType, updateDeviceGroupsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups/{device_group_id} 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="deviceGroupId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="updateDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutAsync(long edgeApplicationId, long deviceGroupId, Option<string> accept = default, Option<string> contentType = default, Option<UpdateDeviceGroupsRequest> updateDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(accept, contentType, updateDeviceGroupsRequest);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(ref edgeApplicationId, ref deviceGroupId, ref accept, ref contentType, updateDeviceGroupsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups/{device_group_id}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdevice_group_id%7D", Uri.EscapeDataString(deviceGroupId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (updateDeviceGroupsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (updateDeviceGroupsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(updateDeviceGroupsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutDefaultImplementation(apiResponseLocalVar, edgeApplicationId, deviceGroupId, accept, contentType, updateDeviceGroupsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups/{device_group_id}", uriBuilderLocalVar.Path, edgeApplicationId, deviceGroupId, accept, contentType, updateDeviceGroupsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsDeviceGroupIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.DeviceGroupsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.DeviceGroupsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.DeviceGroupsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref long edgeApplicationId, ref Option<long> page, ref Option<long> pageSize, ref Option<string> filter, ref Option<string> orderBy, ref Option<string> sort, ref Option<string> accept);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            if (filter.IsSet && filter.Value == null)
                throw new ArgumentNullException(nameof(filter));

            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (sort.IsSet && sort.Value == null)
                throw new ArgumentNullException(nameof(sort));

            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsGetDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse apiResponseLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="filter"></param>
        /// <param name="orderBy"></param>
        /// <param name="sort"></param>
        /// <param name="accept"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<long> page, Option<long> pageSize, Option<string> filter, Option<string> orderBy, Option<string> sort, Option<string> accept);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsGetOrDefaultAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsGetAsync(edgeApplicationId, page, pageSize, filter, orderBy, sort, accept, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsGetAsync(long edgeApplicationId, Option<long> page = default, Option<long> pageSize = default, Option<string> filter = default, Option<string> orderBy = default, Option<string> sort = default, Option<string> accept = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(filter, orderBy, sort, accept);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(ref edgeApplicationId, ref page, ref pageSize, ref filter, ref orderBy, ref sort, ref accept);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (page.IsSet)
                        parseQueryStringLocalVar["page"] = ClientUtils.ParameterToString(page.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["page_size"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (filter.IsSet)
                        parseQueryStringLocalVar["filter"] = ClientUtils.ParameterToString(filter.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["order_by"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (sort.IsSet)
                        parseQueryStringLocalVar["sort"] = ClientUtils.ParameterToString(sort.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsGetDefaultImplementation(apiResponseLocalVar, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGetDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups", uriBuilderLocalVar.Path, edgeApplicationId, page, pageSize, filter, orderBy, sort, accept);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.DeviceGroupsResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.DeviceGroupsResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.DeviceGroupsResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref long edgeApplicationId, ref Option<string> accept, ref Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        /// <returns></returns>
        private void ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(Option<string> accept, Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest)
        {
            if (accept.IsSet && accept.Value == null)
                throw new ArgumentNullException(nameof(accept));

            if (contentType.IsSet && contentType.Value == null)
                throw new ArgumentNullException(nameof(contentType));

            if (createDeviceGroupsRequest.IsSet && createDeviceGroupsRequest.Value == null)
                throw new ArgumentNullException(nameof(createDeviceGroupsRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        private void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsPostDefaultImplementation(IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest)
        {
            bool suppressDefaultLog = false;
            AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref suppressDefaultLog, apiResponseLocalVar, edgeApplicationId, accept, contentType, createDeviceGroupsRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        partial void AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref bool suppressDefaultLog, IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse apiResponseLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        private void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, edgeApplicationId, accept, contentType, createDeviceGroupsRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"></param>
        /// <param name="contentType"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        partial void OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, long edgeApplicationId, Option<string> accept, Option<string> contentType, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest);

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups 
        /// </summary>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse?> EdgeApplicationsEdgeApplicationIdDeviceGroupsPostOrDefaultAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await EdgeApplicationsEdgeApplicationIdDeviceGroupsPostAsync(edgeApplicationId, accept, contentType, createDeviceGroupsRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// /edge_applications/{edge_application_id}/device_groups 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="edgeApplicationId"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType">The type of coding used in the Body (application/json). &lt;br&gt;  Example: Content-Type: application/json (optional)</param>
        /// <param name="createDeviceGroupsRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>&gt;</returns>
        public async Task<IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse> EdgeApplicationsEdgeApplicationIdDeviceGroupsPostAsync(long edgeApplicationId, Option<string> accept = default, Option<string> contentType = default, Option<CreateDeviceGroupsRequest> createDeviceGroupsRequest = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(accept, contentType, createDeviceGroupsRequest);

                FormatEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(ref edgeApplicationId, ref accept, ref contentType, createDeviceGroupsRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/edge_applications/{edge_application_id}/device_groups";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bedge_application_id%7D", Uri.EscapeDataString(edgeApplicationId.ToString()));

                    if (accept.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Accept", ClientUtils.ParameterToString(accept.Value));

                    if (contentType.IsSet)
                        httpRequestMessageLocalVar.Headers.Add("Content-Type", ClientUtils.ParameterToString(contentType.Value));

                    if (createDeviceGroupsRequest.IsSet)
                        httpRequestMessageLocalVar.Content = (createDeviceGroupsRequest.Value as object) is System.IO.Stream stream
                            ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                            : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(createDeviceGroupsRequest.Value, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    ApiKeyToken apiKeyTokenLocalVar1 = (ApiKeyToken) await ApiKeyProvider.GetAsync("Authorization", cancellationToken).ConfigureAwait(false);
                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar1);
                    apiKeyTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar);

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] contentTypes = new string[] {
                        "application/json; version=3"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json; version=3"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse>();

                        EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/edge_applications/{edge_application_id}/device_groups", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterEdgeApplicationsEdgeApplicationIdDeviceGroupsPostDefaultImplementation(apiResponseLocalVar, edgeApplicationId, accept, contentType, createDeviceGroupsRequest);

                        Events.ExecuteOnEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPostDefaultImplementation(e, "/edge_applications/{edge_application_id}/device_groups", uriBuilderLocalVar.Path, edgeApplicationId, accept, contentType, createDeviceGroupsRequest);
                Events.ExecuteOnErrorEdgeApplicationsEdgeApplicationIdDeviceGroupsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>
        /// </summary>
        public partial class EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse : edgeapplications.Client.ApiResponse, IEdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse(ILogger<EdgeApplicationsEdgeApplicationIdDeviceGroupsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public edgeapplications.Model.DeviceGroupsIdResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<edgeapplications.Model.DeviceGroupsIdResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out edgeapplications.Model.DeviceGroupsIdResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 415 UnsupportedMediaType
            /// </summary>
            /// <returns></returns>
            public bool IsUnsupportedMediaType => 415 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 422 UnprocessableContent
            /// </summary>
            /// <returns></returns>
            public bool IsUnprocessableContent => 422 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
