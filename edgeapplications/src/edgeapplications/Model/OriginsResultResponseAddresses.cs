// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// OriginsResultResponseAddresses
    /// </summary>
    public partial class OriginsResultResponseAddresses : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginsResultResponseAddresses" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="weight">weight</param>
        /// <param name="serverRole">serverRole</param>
        /// <param name="isActive">isActive</param>
        [JsonConstructor]
        public OriginsResultResponseAddresses(string address, long weight, string serverRole, bool isActive)
        {
            Address = address;
            Weight = weight;
            ServerRole = serverRole;
            IsActive = isActive;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public long Weight { get; set; }

        /// <summary>
        /// Gets or Sets ServerRole
        /// </summary>
        [JsonPropertyName("server_role")]
        public string ServerRole { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool IsActive { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginsResultResponseAddresses {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ServerRole: ").Append(ServerRole).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Weight (long) maximum
            if (this.Weight > (long)100)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value less than or equal to 100.", new [] { "Weight" });
            }

            // Weight (long) minimum
            if (this.Weight < (long)1)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value greater than or equal to 1.", new [] { "Weight" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OriginsResultResponseAddresses" />
    /// </summary>
    public class OriginsResultResponseAddressesJsonConverter : JsonConverter<OriginsResultResponseAddresses>
    {
        /// <summary>
        /// Deserializes json to <see cref="OriginsResultResponseAddresses" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OriginsResultResponseAddresses Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<long?> weight = default;
            Option<string?> serverRole = default;
            Option<bool?> isActive = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "weight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weight = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "server_role":
                            serverRole = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class OriginsResultResponseAddresses.", nameof(address));

            if (!weight.IsSet)
                throw new ArgumentException("Property is required for class OriginsResultResponseAddresses.", nameof(weight));

            if (!serverRole.IsSet)
                throw new ArgumentException("Property is required for class OriginsResultResponseAddresses.", nameof(serverRole));

            if (!isActive.IsSet)
                throw new ArgumentException("Property is required for class OriginsResultResponseAddresses.", nameof(isActive));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class OriginsResultResponseAddresses.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class OriginsResultResponseAddresses.");

            if (serverRole.IsSet && serverRole.Value == null)
                throw new ArgumentNullException(nameof(serverRole), "Property is not nullable for class OriginsResultResponseAddresses.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class OriginsResultResponseAddresses.");

            return new OriginsResultResponseAddresses(address.Value!, weight.Value!.Value!, serverRole.Value!, isActive.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OriginsResultResponseAddresses" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originsResultResponseAddresses"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OriginsResultResponseAddresses originsResultResponseAddresses, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, originsResultResponseAddresses, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OriginsResultResponseAddresses" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originsResultResponseAddresses"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OriginsResultResponseAddresses originsResultResponseAddresses, JsonSerializerOptions jsonSerializerOptions)
        {
            if (originsResultResponseAddresses.Address == null)
                throw new ArgumentNullException(nameof(originsResultResponseAddresses.Address), "Property is required for class OriginsResultResponseAddresses.");

            if (originsResultResponseAddresses.ServerRole == null)
                throw new ArgumentNullException(nameof(originsResultResponseAddresses.ServerRole), "Property is required for class OriginsResultResponseAddresses.");

            writer.WriteString("address", originsResultResponseAddresses.Address);

            writer.WriteNumber("weight", originsResultResponseAddresses.Weight);

            writer.WriteString("server_role", originsResultResponseAddresses.ServerRole);

            writer.WriteBoolean("is_active", originsResultResponseAddresses.IsActive);
        }
    }
}
