/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgeapplications.Client.OpenAPIDateConverter;

namespace edgeapplications.Model
{
    /// <summary>
    /// ApplicationCacheCreateRequest
    /// </summary>
    [DataContract(Name = "ApplicationCacheCreateRequest")]
    public partial class ApplicationCacheCreateRequest : IEquatable<ApplicationCacheCreateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCacheCreateRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApplicationCacheCreateRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCacheCreateRequest" /> class.
        /// </summary>
        /// <param name="name">name (required).</param>
        /// <param name="browserCacheSettings">browserCacheSettings.</param>
        /// <param name="browserCacheSettingsMaximumTtl">browserCacheSettingsMaximumTtl.</param>
        /// <param name="cdnCacheSettings">cdnCacheSettings.</param>
        /// <param name="cdnCacheSettingsMaximumTtl">cdnCacheSettingsMaximumTtl.</param>
        /// <param name="cacheByQueryString">cacheByQueryString.</param>
        /// <param name="queryStringFields">queryStringFields.</param>
        /// <param name="enableQueryStringSort">enableQueryStringSort.</param>
        /// <param name="cacheByCookies">cacheByCookies.</param>
        /// <param name="cookieNames">cookieNames.</param>
        /// <param name="adaptiveDeliveryAction">adaptiveDeliveryAction.</param>
        /// <param name="deviceGroup">deviceGroup.</param>
        /// <param name="enableCachingForPost">enableCachingForPost.</param>
        /// <param name="l2CachingEnabled">l2CachingEnabled.</param>
        /// <param name="isSliceConfigurationEnabled">isSliceConfigurationEnabled.</param>
        /// <param name="isSliceEdgeCachingEnabled">isSliceEdgeCachingEnabled.</param>
        /// <param name="isSliceL2CachingEnabled">isSliceL2CachingEnabled.</param>
        /// <param name="sliceConfigurationRange">sliceConfigurationRange.</param>
        /// <param name="enableCachingForOptions">enableCachingForOptions.</param>
        /// <param name="enableStaleCache">enableStaleCache.</param>
        /// <param name="l2Region">l2Region.</param>
        public ApplicationCacheCreateRequest(string name = default(string), string browserCacheSettings = default(string), long browserCacheSettingsMaximumTtl = default(long), string cdnCacheSettings = default(string), long cdnCacheSettingsMaximumTtl = default(long), string cacheByQueryString = default(string), List<string> queryStringFields = default(List<string>), bool enableQueryStringSort = default(bool), string cacheByCookies = default(string), List<string> cookieNames = default(List<string>), string adaptiveDeliveryAction = default(string), List<int> deviceGroup = default(List<int>), bool enableCachingForPost = default(bool), bool l2CachingEnabled = default(bool), bool isSliceConfigurationEnabled = default(bool), bool isSliceEdgeCachingEnabled = default(bool), bool isSliceL2CachingEnabled = default(bool), long sliceConfigurationRange = default(long), bool enableCachingForOptions = default(bool), bool enableStaleCache = default(bool), string l2Region = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ApplicationCacheCreateRequest and cannot be null");
            }
            this.Name = name;
            this.BrowserCacheSettings = browserCacheSettings;
            this.BrowserCacheSettingsMaximumTtl = browserCacheSettingsMaximumTtl;
            this.CdnCacheSettings = cdnCacheSettings;
            this.CdnCacheSettingsMaximumTtl = cdnCacheSettingsMaximumTtl;
            this.CacheByQueryString = cacheByQueryString;
            this.QueryStringFields = queryStringFields;
            this.EnableQueryStringSort = enableQueryStringSort;
            this.CacheByCookies = cacheByCookies;
            this.CookieNames = cookieNames;
            this.AdaptiveDeliveryAction = adaptiveDeliveryAction;
            this.DeviceGroup = deviceGroup;
            this.EnableCachingForPost = enableCachingForPost;
            this.L2CachingEnabled = l2CachingEnabled;
            this.IsSliceConfigurationEnabled = isSliceConfigurationEnabled;
            this.IsSliceEdgeCachingEnabled = isSliceEdgeCachingEnabled;
            this.IsSliceL2CachingEnabled = isSliceL2CachingEnabled;
            this.SliceConfigurationRange = sliceConfigurationRange;
            this.EnableCachingForOptions = enableCachingForOptions;
            this.EnableStaleCache = enableStaleCache;
            this.L2Region = l2Region;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettings
        /// </summary>
        [DataMember(Name = "browser_cache_settings", EmitDefaultValue = false)]
        public string BrowserCacheSettings { get; set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettingsMaximumTtl
        /// </summary>
        [DataMember(Name = "browser_cache_settings_maximum_ttl", EmitDefaultValue = false)]
        public long BrowserCacheSettingsMaximumTtl { get; set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettings
        /// </summary>
        [DataMember(Name = "cdn_cache_settings", EmitDefaultValue = false)]
        public string CdnCacheSettings { get; set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettingsMaximumTtl
        /// </summary>
        [DataMember(Name = "cdn_cache_settings_maximum_ttl", EmitDefaultValue = false)]
        public long CdnCacheSettingsMaximumTtl { get; set; }

        /// <summary>
        /// Gets or Sets CacheByQueryString
        /// </summary>
        [DataMember(Name = "cache_by_query_string", EmitDefaultValue = false)]
        public string CacheByQueryString { get; set; }

        /// <summary>
        /// Gets or Sets QueryStringFields
        /// </summary>
        [DataMember(Name = "query_string_fields", EmitDefaultValue = false)]
        public List<string> QueryStringFields { get; set; }

        /// <summary>
        /// Gets or Sets EnableQueryStringSort
        /// </summary>
        [DataMember(Name = "enable_query_string_sort", EmitDefaultValue = true)]
        public bool EnableQueryStringSort { get; set; }

        /// <summary>
        /// Gets or Sets CacheByCookies
        /// </summary>
        [DataMember(Name = "cache_by_cookies", EmitDefaultValue = false)]
        public string CacheByCookies { get; set; }

        /// <summary>
        /// Gets or Sets CookieNames
        /// </summary>
        [DataMember(Name = "cookie_names", EmitDefaultValue = false)]
        public List<string> CookieNames { get; set; }

        /// <summary>
        /// Gets or Sets AdaptiveDeliveryAction
        /// </summary>
        [DataMember(Name = "adaptive_delivery_action", EmitDefaultValue = false)]
        public string AdaptiveDeliveryAction { get; set; }

        /// <summary>
        /// Gets or Sets DeviceGroup
        /// </summary>
        [DataMember(Name = "device_group", EmitDefaultValue = false)]
        public List<int> DeviceGroup { get; set; }

        /// <summary>
        /// Gets or Sets EnableCachingForPost
        /// </summary>
        [DataMember(Name = "enable_caching_for_post", EmitDefaultValue = true)]
        public bool EnableCachingForPost { get; set; }

        /// <summary>
        /// Gets or Sets L2CachingEnabled
        /// </summary>
        [DataMember(Name = "l2_caching_enabled", EmitDefaultValue = true)]
        public bool L2CachingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSliceConfigurationEnabled
        /// </summary>
        [DataMember(Name = "is_slice_configuration_enabled", EmitDefaultValue = true)]
        public bool IsSliceConfigurationEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSliceEdgeCachingEnabled
        /// </summary>
        [DataMember(Name = "is_slice_edge_caching_enabled", EmitDefaultValue = true)]
        public bool IsSliceEdgeCachingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsSliceL2CachingEnabled
        /// </summary>
        [DataMember(Name = "is_slice_l2_caching_enabled", EmitDefaultValue = true)]
        public bool IsSliceL2CachingEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SliceConfigurationRange
        /// </summary>
        [DataMember(Name = "slice_configuration_range", EmitDefaultValue = false)]
        public long SliceConfigurationRange { get; set; }

        /// <summary>
        /// Gets or Sets EnableCachingForOptions
        /// </summary>
        [DataMember(Name = "enable_caching_for_options", EmitDefaultValue = true)]
        public bool EnableCachingForOptions { get; set; }

        /// <summary>
        /// Gets or Sets EnableStaleCache
        /// </summary>
        [DataMember(Name = "enable_stale_cache", EmitDefaultValue = true)]
        public bool EnableStaleCache { get; set; }

        /// <summary>
        /// Gets or Sets L2Region
        /// </summary>
        [DataMember(Name = "l2_region", EmitDefaultValue = false)]
        public string L2Region { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationCacheCreateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BrowserCacheSettings: ").Append(BrowserCacheSettings).Append("\n");
            sb.Append("  BrowserCacheSettingsMaximumTtl: ").Append(BrowserCacheSettingsMaximumTtl).Append("\n");
            sb.Append("  CdnCacheSettings: ").Append(CdnCacheSettings).Append("\n");
            sb.Append("  CdnCacheSettingsMaximumTtl: ").Append(CdnCacheSettingsMaximumTtl).Append("\n");
            sb.Append("  CacheByQueryString: ").Append(CacheByQueryString).Append("\n");
            sb.Append("  QueryStringFields: ").Append(QueryStringFields).Append("\n");
            sb.Append("  EnableQueryStringSort: ").Append(EnableQueryStringSort).Append("\n");
            sb.Append("  CacheByCookies: ").Append(CacheByCookies).Append("\n");
            sb.Append("  CookieNames: ").Append(CookieNames).Append("\n");
            sb.Append("  AdaptiveDeliveryAction: ").Append(AdaptiveDeliveryAction).Append("\n");
            sb.Append("  DeviceGroup: ").Append(DeviceGroup).Append("\n");
            sb.Append("  EnableCachingForPost: ").Append(EnableCachingForPost).Append("\n");
            sb.Append("  L2CachingEnabled: ").Append(L2CachingEnabled).Append("\n");
            sb.Append("  IsSliceConfigurationEnabled: ").Append(IsSliceConfigurationEnabled).Append("\n");
            sb.Append("  IsSliceEdgeCachingEnabled: ").Append(IsSliceEdgeCachingEnabled).Append("\n");
            sb.Append("  IsSliceL2CachingEnabled: ").Append(IsSliceL2CachingEnabled).Append("\n");
            sb.Append("  SliceConfigurationRange: ").Append(SliceConfigurationRange).Append("\n");
            sb.Append("  EnableCachingForOptions: ").Append(EnableCachingForOptions).Append("\n");
            sb.Append("  EnableStaleCache: ").Append(EnableStaleCache).Append("\n");
            sb.Append("  L2Region: ").Append(L2Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationCacheCreateRequest);
        }

        /// <summary>
        /// Returns true if ApplicationCacheCreateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationCacheCreateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationCacheCreateRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.BrowserCacheSettings == input.BrowserCacheSettings ||
                    (this.BrowserCacheSettings != null &&
                    this.BrowserCacheSettings.Equals(input.BrowserCacheSettings))
                ) && 
                (
                    this.BrowserCacheSettingsMaximumTtl == input.BrowserCacheSettingsMaximumTtl ||
                    this.BrowserCacheSettingsMaximumTtl.Equals(input.BrowserCacheSettingsMaximumTtl)
                ) && 
                (
                    this.CdnCacheSettings == input.CdnCacheSettings ||
                    (this.CdnCacheSettings != null &&
                    this.CdnCacheSettings.Equals(input.CdnCacheSettings))
                ) && 
                (
                    this.CdnCacheSettingsMaximumTtl == input.CdnCacheSettingsMaximumTtl ||
                    this.CdnCacheSettingsMaximumTtl.Equals(input.CdnCacheSettingsMaximumTtl)
                ) && 
                (
                    this.CacheByQueryString == input.CacheByQueryString ||
                    (this.CacheByQueryString != null &&
                    this.CacheByQueryString.Equals(input.CacheByQueryString))
                ) && 
                (
                    this.QueryStringFields == input.QueryStringFields ||
                    this.QueryStringFields != null &&
                    input.QueryStringFields != null &&
                    this.QueryStringFields.SequenceEqual(input.QueryStringFields)
                ) && 
                (
                    this.EnableQueryStringSort == input.EnableQueryStringSort ||
                    this.EnableQueryStringSort.Equals(input.EnableQueryStringSort)
                ) && 
                (
                    this.CacheByCookies == input.CacheByCookies ||
                    (this.CacheByCookies != null &&
                    this.CacheByCookies.Equals(input.CacheByCookies))
                ) && 
                (
                    this.CookieNames == input.CookieNames ||
                    this.CookieNames != null &&
                    input.CookieNames != null &&
                    this.CookieNames.SequenceEqual(input.CookieNames)
                ) && 
                (
                    this.AdaptiveDeliveryAction == input.AdaptiveDeliveryAction ||
                    (this.AdaptiveDeliveryAction != null &&
                    this.AdaptiveDeliveryAction.Equals(input.AdaptiveDeliveryAction))
                ) && 
                (
                    this.DeviceGroup == input.DeviceGroup ||
                    this.DeviceGroup != null &&
                    input.DeviceGroup != null &&
                    this.DeviceGroup.SequenceEqual(input.DeviceGroup)
                ) && 
                (
                    this.EnableCachingForPost == input.EnableCachingForPost ||
                    this.EnableCachingForPost.Equals(input.EnableCachingForPost)
                ) && 
                (
                    this.L2CachingEnabled == input.L2CachingEnabled ||
                    this.L2CachingEnabled.Equals(input.L2CachingEnabled)
                ) && 
                (
                    this.IsSliceConfigurationEnabled == input.IsSliceConfigurationEnabled ||
                    this.IsSliceConfigurationEnabled.Equals(input.IsSliceConfigurationEnabled)
                ) && 
                (
                    this.IsSliceEdgeCachingEnabled == input.IsSliceEdgeCachingEnabled ||
                    this.IsSliceEdgeCachingEnabled.Equals(input.IsSliceEdgeCachingEnabled)
                ) && 
                (
                    this.IsSliceL2CachingEnabled == input.IsSliceL2CachingEnabled ||
                    this.IsSliceL2CachingEnabled.Equals(input.IsSliceL2CachingEnabled)
                ) && 
                (
                    this.SliceConfigurationRange == input.SliceConfigurationRange ||
                    this.SliceConfigurationRange.Equals(input.SliceConfigurationRange)
                ) && 
                (
                    this.EnableCachingForOptions == input.EnableCachingForOptions ||
                    this.EnableCachingForOptions.Equals(input.EnableCachingForOptions)
                ) && 
                (
                    this.EnableStaleCache == input.EnableStaleCache ||
                    this.EnableStaleCache.Equals(input.EnableStaleCache)
                ) && 
                (
                    this.L2Region == input.L2Region ||
                    (this.L2Region != null &&
                    this.L2Region.Equals(input.L2Region))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.BrowserCacheSettings != null)
                {
                    hashCode = (hashCode * 59) + this.BrowserCacheSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BrowserCacheSettingsMaximumTtl.GetHashCode();
                if (this.CdnCacheSettings != null)
                {
                    hashCode = (hashCode * 59) + this.CdnCacheSettings.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CdnCacheSettingsMaximumTtl.GetHashCode();
                if (this.CacheByQueryString != null)
                {
                    hashCode = (hashCode * 59) + this.CacheByQueryString.GetHashCode();
                }
                if (this.QueryStringFields != null)
                {
                    hashCode = (hashCode * 59) + this.QueryStringFields.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableQueryStringSort.GetHashCode();
                if (this.CacheByCookies != null)
                {
                    hashCode = (hashCode * 59) + this.CacheByCookies.GetHashCode();
                }
                if (this.CookieNames != null)
                {
                    hashCode = (hashCode * 59) + this.CookieNames.GetHashCode();
                }
                if (this.AdaptiveDeliveryAction != null)
                {
                    hashCode = (hashCode * 59) + this.AdaptiveDeliveryAction.GetHashCode();
                }
                if (this.DeviceGroup != null)
                {
                    hashCode = (hashCode * 59) + this.DeviceGroup.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.EnableCachingForPost.GetHashCode();
                hashCode = (hashCode * 59) + this.L2CachingEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSliceConfigurationEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSliceEdgeCachingEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.IsSliceL2CachingEnabled.GetHashCode();
                hashCode = (hashCode * 59) + this.SliceConfigurationRange.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableCachingForOptions.GetHashCode();
                hashCode = (hashCode * 59) + this.EnableStaleCache.GetHashCode();
                if (this.L2Region != null)
                {
                    hashCode = (hashCode * 59) + this.L2Region.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
