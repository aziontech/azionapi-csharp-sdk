// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// ApplicationLinks
    /// </summary>
    public partial class ApplicationLinks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationLinks" /> class.
        /// </summary>
        /// <param name="previous">previous</param>
        /// <param name="next">next</param>
        [JsonConstructor]
        public ApplicationLinks(string? previous = default, string? next = default)
        {
            Previous = previous;
            Next = next;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Previous
        /// </summary>
        [JsonPropertyName("previous")]
        public string? Previous { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [JsonPropertyName("next")]
        public string? Next { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationLinks {\n");
            sb.Append("  Previous: ").Append(Previous).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApplicationLinks" />
    /// </summary>
    public class ApplicationLinksJsonConverter : JsonConverter<ApplicationLinks>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApplicationLinks" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApplicationLinks Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> previous = default;
            Option<string?> next = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "previous":
                            previous = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "next":
                            next = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!previous.IsSet)
                throw new ArgumentException("Property is required for class ApplicationLinks.", nameof(previous));

            if (!next.IsSet)
                throw new ArgumentException("Property is required for class ApplicationLinks.", nameof(next));

            return new ApplicationLinks(previous.Value!, next.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ApplicationLinks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationLinks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApplicationLinks applicationLinks, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, applicationLinks, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApplicationLinks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationLinks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApplicationLinks applicationLinks, JsonSerializerOptions jsonSerializerOptions)
        {
            if (applicationLinks.Previous != null)
                writer.WriteString("previous", applicationLinks.Previous);
            else
                writer.WriteNull("previous");

            if (applicationLinks.Next != null)
                writer.WriteString("next", applicationLinks.Next);
            else
                writer.WriteNull("next");
        }
    }
}
