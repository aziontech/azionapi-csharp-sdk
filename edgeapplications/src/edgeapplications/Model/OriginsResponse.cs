// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// OriginsResponse
    /// </summary>
    public partial class OriginsResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginsResponse" /> class.
        /// </summary>
        /// <param name="count">count</param>
        /// <param name="totalPages">totalPages</param>
        /// <param name="schemaVersion">schemaVersion</param>
        /// <param name="links">links</param>
        /// <param name="results">results</param>
        [JsonConstructor]
        public OriginsResponse(long count, long totalPages, long schemaVersion, OriginsResponseLinks links, List<OriginsResultResponse> results)
        {
            Count = count;
            TotalPages = totalPages;
            SchemaVersion = schemaVersion;
            Links = links;
            Results = results;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [JsonPropertyName("count")]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [JsonPropertyName("total_pages")]
        public long TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [JsonPropertyName("schema_version")]
        public long SchemaVersion { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("links")]
        public OriginsResponseLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [JsonPropertyName("results")]
        public List<OriginsResultResponse> Results { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginsResponse {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="OriginsResponse" />
    /// </summary>
    public class OriginsResponseJsonConverter : JsonConverter<OriginsResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="OriginsResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override OriginsResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> count = default;
            Option<long?> totalPages = default;
            Option<long?> schemaVersion = default;
            Option<OriginsResponseLinks?> links = default;
            Option<List<OriginsResultResponse>?> results = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "count":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                count = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "total_pages":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalPages = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "schema_version":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                schemaVersion = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<OriginsResponseLinks?>(JsonSerializer.Deserialize<OriginsResponseLinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "results":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                results = new Option<List<OriginsResultResponse>?>(JsonSerializer.Deserialize<List<OriginsResultResponse>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!count.IsSet)
                throw new ArgumentException("Property is required for class OriginsResponse.", nameof(count));

            if (!totalPages.IsSet)
                throw new ArgumentException("Property is required for class OriginsResponse.", nameof(totalPages));

            if (!schemaVersion.IsSet)
                throw new ArgumentException("Property is required for class OriginsResponse.", nameof(schemaVersion));

            if (!links.IsSet)
                throw new ArgumentException("Property is required for class OriginsResponse.", nameof(links));

            if (!results.IsSet)
                throw new ArgumentException("Property is required for class OriginsResponse.", nameof(results));

            if (count.IsSet && count.Value == null)
                throw new ArgumentNullException(nameof(count), "Property is not nullable for class OriginsResponse.");

            if (totalPages.IsSet && totalPages.Value == null)
                throw new ArgumentNullException(nameof(totalPages), "Property is not nullable for class OriginsResponse.");

            if (schemaVersion.IsSet && schemaVersion.Value == null)
                throw new ArgumentNullException(nameof(schemaVersion), "Property is not nullable for class OriginsResponse.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class OriginsResponse.");

            if (results.IsSet && results.Value == null)
                throw new ArgumentNullException(nameof(results), "Property is not nullable for class OriginsResponse.");

            return new OriginsResponse(count.Value!.Value!, totalPages.Value!.Value!, schemaVersion.Value!.Value!, links.Value!, results.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="OriginsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, OriginsResponse originsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, originsResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="OriginsResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="originsResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, OriginsResponse originsResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (originsResponse.Links == null)
                throw new ArgumentNullException(nameof(originsResponse.Links), "Property is required for class OriginsResponse.");

            if (originsResponse.Results == null)
                throw new ArgumentNullException(nameof(originsResponse.Results), "Property is required for class OriginsResponse.");

            writer.WriteNumber("count", originsResponse.Count);

            writer.WriteNumber("total_pages", originsResponse.TotalPages);

            writer.WriteNumber("schema_version", originsResponse.SchemaVersion);

            writer.WritePropertyName("links");
            JsonSerializer.Serialize(writer, originsResponse.Links, jsonSerializerOptions);
            writer.WritePropertyName("results");
            JsonSerializer.Serialize(writer, originsResponse.Results, jsonSerializerOptions);
        }
    }
}
