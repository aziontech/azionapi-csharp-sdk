// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// CreateDeviceGroupsRequest
    /// </summary>
    public partial class CreateDeviceGroupsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateDeviceGroupsRequest" /> class.
        /// </summary>
        /// <param name="userAgent">userAgent</param>
        /// <param name="addresses">addresses</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public CreateDeviceGroupsRequest(string userAgent, string addresses, Option<string?> name = default)
        {
            UserAgent = userAgent;
            Addresses = addresses;
            NameOption = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [JsonPropertyName("user_agent")]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [JsonPropertyName("addresses")]
        public string Addresses { get; set; }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateDeviceGroupsRequest {\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateDeviceGroupsRequest" />
    /// </summary>
    public class CreateDeviceGroupsRequestJsonConverter : JsonConverter<CreateDeviceGroupsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateDeviceGroupsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateDeviceGroupsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userAgent = default;
            Option<string?> addresses = default;
            Option<string?> name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "user_agent":
                            userAgent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addresses":
                            addresses = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userAgent.IsSet)
                throw new ArgumentException("Property is required for class CreateDeviceGroupsRequest.", nameof(userAgent));

            if (!addresses.IsSet)
                throw new ArgumentException("Property is required for class CreateDeviceGroupsRequest.", nameof(addresses));

            if (userAgent.IsSet && userAgent.Value == null)
                throw new ArgumentNullException(nameof(userAgent), "Property is not nullable for class CreateDeviceGroupsRequest.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class CreateDeviceGroupsRequest.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class CreateDeviceGroupsRequest.");

            return new CreateDeviceGroupsRequest(userAgent.Value!, addresses.Value!, name);
        }

        /// <summary>
        /// Serializes a <see cref="CreateDeviceGroupsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateDeviceGroupsRequest createDeviceGroupsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createDeviceGroupsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateDeviceGroupsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createDeviceGroupsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateDeviceGroupsRequest createDeviceGroupsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createDeviceGroupsRequest.UserAgent == null)
                throw new ArgumentNullException(nameof(createDeviceGroupsRequest.UserAgent), "Property is required for class CreateDeviceGroupsRequest.");

            if (createDeviceGroupsRequest.Addresses == null)
                throw new ArgumentNullException(nameof(createDeviceGroupsRequest.Addresses), "Property is required for class CreateDeviceGroupsRequest.");

            if (createDeviceGroupsRequest.NameOption.IsSet && createDeviceGroupsRequest.Name == null)
                throw new ArgumentNullException(nameof(createDeviceGroupsRequest.Name), "Property is required for class CreateDeviceGroupsRequest.");

            writer.WriteString("user_agent", createDeviceGroupsRequest.UserAgent);

            writer.WriteString("addresses", createDeviceGroupsRequest.Addresses);

            if (createDeviceGroupsRequest.NameOption.IsSet)
                writer.WriteString("name", createDeviceGroupsRequest.Name);
        }
    }
}
