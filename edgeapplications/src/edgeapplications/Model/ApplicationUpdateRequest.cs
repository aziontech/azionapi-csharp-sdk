// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// ApplicationUpdateRequest
    /// </summary>
    public partial class ApplicationUpdateRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationUpdateRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="deliveryProtocol">deliveryProtocol</param>
        /// <param name="httpPort">httpPort</param>
        /// <param name="httpsPort">httpsPort</param>
        /// <param name="minimumTlsVersion">minimumTlsVersion</param>
        /// <param name="active">active</param>
        /// <param name="debugRules">debugRules</param>
        /// <param name="applicationAcceleration">applicationAcceleration</param>
        /// <param name="deviceDetection">deviceDetection</param>
        /// <param name="edgeFirewall">edgeFirewall</param>
        /// <param name="edgeFunctions">edgeFunctions</param>
        /// <param name="imageOptimization">imageOptimization</param>
        /// <param name="l2Caching">l2Caching</param>
        /// <param name="loadBalancer">loadBalancer</param>
        /// <param name="rawLogs">rawLogs</param>
        /// <param name="webApplicationFirewall">webApplicationFirewall</param>
        /// <param name="websocket">websocket</param>
        [JsonConstructor]
        public ApplicationUpdateRequest(Option<string?> name = default, Option<string?> deliveryProtocol = default, Option<Object?> httpPort = default, Option<Object?> httpsPort = default, Option<string?> minimumTlsVersion = default, Option<bool?> active = default, Option<bool?> debugRules = default, Option<bool?> applicationAcceleration = default, Option<bool?> deviceDetection = default, Option<bool?> edgeFirewall = default, Option<bool?> edgeFunctions = default, Option<bool?> imageOptimization = default, Option<bool?> l2Caching = default, Option<bool?> loadBalancer = default, Option<bool?> rawLogs = default, Option<bool?> webApplicationFirewall = default, Option<bool?> websocket = default)
        {
            NameOption = name;
            DeliveryProtocolOption = deliveryProtocol;
            HttpPortOption = httpPort;
            HttpsPortOption = httpsPort;
            MinimumTlsVersionOption = minimumTlsVersion;
            ActiveOption = active;
            DebugRulesOption = debugRules;
            ApplicationAccelerationOption = applicationAcceleration;
            DeviceDetectionOption = deviceDetection;
            EdgeFirewallOption = edgeFirewall;
            EdgeFunctionsOption = edgeFunctions;
            ImageOptimizationOption = imageOptimization;
            L2CachingOption = l2Caching;
            LoadBalancerOption = loadBalancer;
            RawLogsOption = rawLogs;
            WebApplicationFirewallOption = webApplicationFirewall;
            WebsocketOption = websocket;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeliveryProtocol
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeliveryProtocolOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeliveryProtocol
        /// </summary>
        [JsonPropertyName("delivery_protocol")]
        public string? DeliveryProtocol { get { return this.DeliveryProtocolOption; } set { this.DeliveryProtocolOption = new(value); } }

        /// <summary>
        /// Used to track the state of HttpPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HttpPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets HttpPort
        /// </summary>
        [JsonPropertyName("http_port")]
        public Object? HttpPort { get { return this.HttpPortOption; } set { this.HttpPortOption = new(value); } }

        /// <summary>
        /// Used to track the state of HttpsPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HttpsPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets HttpsPort
        /// </summary>
        [JsonPropertyName("https_port")]
        public Object? HttpsPort { get { return this.HttpsPortOption; } set { this.HttpsPortOption = new(value); } }

        /// <summary>
        /// Used to track the state of MinimumTlsVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MinimumTlsVersionOption { get; private set; }

        /// <summary>
        /// Gets or Sets MinimumTlsVersion
        /// </summary>
        [JsonPropertyName("minimum_tls_version")]
        public string? MinimumTlsVersion { get { return this.MinimumTlsVersionOption; } set { this.MinimumTlsVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of DebugRules
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DebugRulesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DebugRules
        /// </summary>
        [JsonPropertyName("debug_rules")]
        public bool? DebugRules { get { return this.DebugRulesOption; } set { this.DebugRulesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ApplicationAcceleration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ApplicationAccelerationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ApplicationAcceleration
        /// </summary>
        [JsonPropertyName("application_acceleration")]
        public bool? ApplicationAcceleration { get { return this.ApplicationAccelerationOption; } set { this.ApplicationAccelerationOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceDetection
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> DeviceDetectionOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceDetection
        /// </summary>
        [JsonPropertyName("device_detection")]
        public bool? DeviceDetection { get { return this.DeviceDetectionOption; } set { this.DeviceDetectionOption = new(value); } }

        /// <summary>
        /// Used to track the state of EdgeFirewall
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EdgeFirewallOption { get; private set; }

        /// <summary>
        /// Gets or Sets EdgeFirewall
        /// </summary>
        [JsonPropertyName("edge_firewall")]
        public bool? EdgeFirewall { get { return this.EdgeFirewallOption; } set { this.EdgeFirewallOption = new(value); } }

        /// <summary>
        /// Used to track the state of EdgeFunctions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EdgeFunctionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EdgeFunctions
        /// </summary>
        [JsonPropertyName("edge_functions")]
        public bool? EdgeFunctions { get { return this.EdgeFunctionsOption; } set { this.EdgeFunctionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ImageOptimization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ImageOptimizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets ImageOptimization
        /// </summary>
        [JsonPropertyName("image_optimization")]
        public bool? ImageOptimization { get { return this.ImageOptimizationOption; } set { this.ImageOptimizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of L2Caching
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> L2CachingOption { get; private set; }

        /// <summary>
        /// Gets or Sets L2Caching
        /// </summary>
        [JsonPropertyName("l2_caching")]
        public bool? L2Caching { get { return this.L2CachingOption; } set { this.L2CachingOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoadBalancer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LoadBalancerOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadBalancer
        /// </summary>
        [JsonPropertyName("load_balancer")]
        public bool? LoadBalancer { get { return this.LoadBalancerOption; } set { this.LoadBalancerOption = new(value); } }

        /// <summary>
        /// Used to track the state of RawLogs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> RawLogsOption { get; private set; }

        /// <summary>
        /// Gets or Sets RawLogs
        /// </summary>
        [JsonPropertyName("raw_logs")]
        public bool? RawLogs { get { return this.RawLogsOption; } set { this.RawLogsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WebApplicationFirewall
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WebApplicationFirewallOption { get; private set; }

        /// <summary>
        /// Gets or Sets WebApplicationFirewall
        /// </summary>
        [JsonPropertyName("web_application_firewall")]
        public bool? WebApplicationFirewall { get { return this.WebApplicationFirewallOption; } set { this.WebApplicationFirewallOption = new(value); } }

        /// <summary>
        /// Used to track the state of Websocket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WebsocketOption { get; private set; }

        /// <summary>
        /// Gets or Sets Websocket
        /// </summary>
        [JsonPropertyName("websocket")]
        public bool? Websocket { get { return this.WebsocketOption; } set { this.WebsocketOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationUpdateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DeliveryProtocol: ").Append(DeliveryProtocol).Append("\n");
            sb.Append("  HttpPort: ").Append(HttpPort).Append("\n");
            sb.Append("  HttpsPort: ").Append(HttpsPort).Append("\n");
            sb.Append("  MinimumTlsVersion: ").Append(MinimumTlsVersion).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  DebugRules: ").Append(DebugRules).Append("\n");
            sb.Append("  ApplicationAcceleration: ").Append(ApplicationAcceleration).Append("\n");
            sb.Append("  DeviceDetection: ").Append(DeviceDetection).Append("\n");
            sb.Append("  EdgeFirewall: ").Append(EdgeFirewall).Append("\n");
            sb.Append("  EdgeFunctions: ").Append(EdgeFunctions).Append("\n");
            sb.Append("  ImageOptimization: ").Append(ImageOptimization).Append("\n");
            sb.Append("  L2Caching: ").Append(L2Caching).Append("\n");
            sb.Append("  LoadBalancer: ").Append(LoadBalancer).Append("\n");
            sb.Append("  RawLogs: ").Append(RawLogs).Append("\n");
            sb.Append("  WebApplicationFirewall: ").Append(WebApplicationFirewall).Append("\n");
            sb.Append("  Websocket: ").Append(Websocket).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApplicationUpdateRequest" />
    /// </summary>
    public class ApplicationUpdateRequestJsonConverter : JsonConverter<ApplicationUpdateRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApplicationUpdateRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApplicationUpdateRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> deliveryProtocol = default;
            Option<Object?> httpPort = default;
            Option<Object?> httpsPort = default;
            Option<string?> minimumTlsVersion = default;
            Option<bool?> active = default;
            Option<bool?> debugRules = default;
            Option<bool?> applicationAcceleration = default;
            Option<bool?> deviceDetection = default;
            Option<bool?> edgeFirewall = default;
            Option<bool?> edgeFunctions = default;
            Option<bool?> imageOptimization = default;
            Option<bool?> l2Caching = default;
            Option<bool?> loadBalancer = default;
            Option<bool?> rawLogs = default;
            Option<bool?> webApplicationFirewall = default;
            Option<bool?> websocket = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "delivery_protocol":
                            deliveryProtocol = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "http_port":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                httpPort = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "https_port":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                httpsPort = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "minimum_tls_version":
                            minimumTlsVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "debug_rules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debugRules = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "application_acceleration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                applicationAcceleration = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "device_detection":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deviceDetection = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "edge_firewall":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                edgeFirewall = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "edge_functions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                edgeFunctions = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "image_optimization":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                imageOptimization = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "l2_caching":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                l2Caching = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "load_balancer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadBalancer = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "raw_logs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rawLogs = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "web_application_firewall":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                webApplicationFirewall = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "websocket":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                websocket = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ApplicationUpdateRequest.");

            if (deliveryProtocol.IsSet && deliveryProtocol.Value == null)
                throw new ArgumentNullException(nameof(deliveryProtocol), "Property is not nullable for class ApplicationUpdateRequest.");

            if (minimumTlsVersion.IsSet && minimumTlsVersion.Value == null)
                throw new ArgumentNullException(nameof(minimumTlsVersion), "Property is not nullable for class ApplicationUpdateRequest.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class ApplicationUpdateRequest.");

            if (debugRules.IsSet && debugRules.Value == null)
                throw new ArgumentNullException(nameof(debugRules), "Property is not nullable for class ApplicationUpdateRequest.");

            if (applicationAcceleration.IsSet && applicationAcceleration.Value == null)
                throw new ArgumentNullException(nameof(applicationAcceleration), "Property is not nullable for class ApplicationUpdateRequest.");

            if (deviceDetection.IsSet && deviceDetection.Value == null)
                throw new ArgumentNullException(nameof(deviceDetection), "Property is not nullable for class ApplicationUpdateRequest.");

            if (edgeFirewall.IsSet && edgeFirewall.Value == null)
                throw new ArgumentNullException(nameof(edgeFirewall), "Property is not nullable for class ApplicationUpdateRequest.");

            if (edgeFunctions.IsSet && edgeFunctions.Value == null)
                throw new ArgumentNullException(nameof(edgeFunctions), "Property is not nullable for class ApplicationUpdateRequest.");

            if (imageOptimization.IsSet && imageOptimization.Value == null)
                throw new ArgumentNullException(nameof(imageOptimization), "Property is not nullable for class ApplicationUpdateRequest.");

            if (l2Caching.IsSet && l2Caching.Value == null)
                throw new ArgumentNullException(nameof(l2Caching), "Property is not nullable for class ApplicationUpdateRequest.");

            if (loadBalancer.IsSet && loadBalancer.Value == null)
                throw new ArgumentNullException(nameof(loadBalancer), "Property is not nullable for class ApplicationUpdateRequest.");

            if (rawLogs.IsSet && rawLogs.Value == null)
                throw new ArgumentNullException(nameof(rawLogs), "Property is not nullable for class ApplicationUpdateRequest.");

            if (webApplicationFirewall.IsSet && webApplicationFirewall.Value == null)
                throw new ArgumentNullException(nameof(webApplicationFirewall), "Property is not nullable for class ApplicationUpdateRequest.");

            if (websocket.IsSet && websocket.Value == null)
                throw new ArgumentNullException(nameof(websocket), "Property is not nullable for class ApplicationUpdateRequest.");

            return new ApplicationUpdateRequest(name, deliveryProtocol, httpPort, httpsPort, minimumTlsVersion, active, debugRules, applicationAcceleration, deviceDetection, edgeFirewall, edgeFunctions, imageOptimization, l2Caching, loadBalancer, rawLogs, webApplicationFirewall, websocket);
        }

        /// <summary>
        /// Serializes a <see cref="ApplicationUpdateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationUpdateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApplicationUpdateRequest applicationUpdateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, applicationUpdateRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApplicationUpdateRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationUpdateRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApplicationUpdateRequest applicationUpdateRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (applicationUpdateRequest.NameOption.IsSet && applicationUpdateRequest.Name == null)
                throw new ArgumentNullException(nameof(applicationUpdateRequest.Name), "Property is required for class ApplicationUpdateRequest.");

            if (applicationUpdateRequest.DeliveryProtocolOption.IsSet && applicationUpdateRequest.DeliveryProtocol == null)
                throw new ArgumentNullException(nameof(applicationUpdateRequest.DeliveryProtocol), "Property is required for class ApplicationUpdateRequest.");

            if (applicationUpdateRequest.MinimumTlsVersionOption.IsSet && applicationUpdateRequest.MinimumTlsVersion == null)
                throw new ArgumentNullException(nameof(applicationUpdateRequest.MinimumTlsVersion), "Property is required for class ApplicationUpdateRequest.");

            if (applicationUpdateRequest.NameOption.IsSet)
                writer.WriteString("name", applicationUpdateRequest.Name);

            if (applicationUpdateRequest.DeliveryProtocolOption.IsSet)
                writer.WriteString("delivery_protocol", applicationUpdateRequest.DeliveryProtocol);

            if (applicationUpdateRequest.HttpPortOption.IsSet)
                if (applicationUpdateRequest.HttpPortOption.Value != null)
                {
                    writer.WritePropertyName("http_port");
                    JsonSerializer.Serialize(writer, applicationUpdateRequest.HttpPort, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("http_port");
            if (applicationUpdateRequest.HttpsPortOption.IsSet)
                if (applicationUpdateRequest.HttpsPortOption.Value != null)
                {
                    writer.WritePropertyName("https_port");
                    JsonSerializer.Serialize(writer, applicationUpdateRequest.HttpsPort, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("https_port");
            if (applicationUpdateRequest.MinimumTlsVersionOption.IsSet)
                writer.WriteString("minimum_tls_version", applicationUpdateRequest.MinimumTlsVersion);

            if (applicationUpdateRequest.ActiveOption.IsSet)
                writer.WriteBoolean("active", applicationUpdateRequest.ActiveOption.Value!.Value);

            if (applicationUpdateRequest.DebugRulesOption.IsSet)
                writer.WriteBoolean("debug_rules", applicationUpdateRequest.DebugRulesOption.Value!.Value);

            if (applicationUpdateRequest.ApplicationAccelerationOption.IsSet)
                writer.WriteBoolean("application_acceleration", applicationUpdateRequest.ApplicationAccelerationOption.Value!.Value);

            if (applicationUpdateRequest.DeviceDetectionOption.IsSet)
                writer.WriteBoolean("device_detection", applicationUpdateRequest.DeviceDetectionOption.Value!.Value);

            if (applicationUpdateRequest.EdgeFirewallOption.IsSet)
                writer.WriteBoolean("edge_firewall", applicationUpdateRequest.EdgeFirewallOption.Value!.Value);

            if (applicationUpdateRequest.EdgeFunctionsOption.IsSet)
                writer.WriteBoolean("edge_functions", applicationUpdateRequest.EdgeFunctionsOption.Value!.Value);

            if (applicationUpdateRequest.ImageOptimizationOption.IsSet)
                writer.WriteBoolean("image_optimization", applicationUpdateRequest.ImageOptimizationOption.Value!.Value);

            if (applicationUpdateRequest.L2CachingOption.IsSet)
                writer.WriteBoolean("l2_caching", applicationUpdateRequest.L2CachingOption.Value!.Value);

            if (applicationUpdateRequest.LoadBalancerOption.IsSet)
                writer.WriteBoolean("load_balancer", applicationUpdateRequest.LoadBalancerOption.Value!.Value);

            if (applicationUpdateRequest.RawLogsOption.IsSet)
                writer.WriteBoolean("raw_logs", applicationUpdateRequest.RawLogsOption.Value!.Value);

            if (applicationUpdateRequest.WebApplicationFirewallOption.IsSet)
                writer.WriteBoolean("web_application_firewall", applicationUpdateRequest.WebApplicationFirewallOption.Value!.Value);

            if (applicationUpdateRequest.WebsocketOption.IsSet)
                writer.WriteBoolean("websocket", applicationUpdateRequest.WebsocketOption.Value!.Value);
        }
    }
}
