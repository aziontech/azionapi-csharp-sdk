// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// RulesEngineCriteria
    /// </summary>
    public partial class RulesEngineCriteria : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulesEngineCriteria" /> class.
        /// </summary>
        /// <param name="conditional">conditional</param>
        /// <param name="variable">variable</param>
        /// <param name="operator">operator</param>
        /// <param name="inputValue">inputValue</param>
        [JsonConstructor]
        public RulesEngineCriteria(string conditional, string variable, string @operator, Option<string?> inputValue = default)
        {
            Conditional = conditional;
            Variable = variable;
            Operator = @operator;
            InputValueOption = inputValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Conditional
        /// </summary>
        [JsonPropertyName("conditional")]
        public string Conditional { get; set; }

        /// <summary>
        /// Gets or Sets Variable
        /// </summary>
        [JsonPropertyName("variable")]
        public string Variable { get; set; }

        /// <summary>
        /// Gets or Sets Operator
        /// </summary>
        [JsonPropertyName("operator")]
        public string Operator { get; set; }

        /// <summary>
        /// Used to track the state of InputValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> InputValueOption { get; private set; }

        /// <summary>
        /// Gets or Sets InputValue
        /// </summary>
        [JsonPropertyName("input_value")]
        public string? InputValue { get { return this.InputValueOption; } set { this.InputValueOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulesEngineCriteria {\n");
            sb.Append("  Conditional: ").Append(Conditional).Append("\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  InputValue: ").Append(InputValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RulesEngineCriteria" />
    /// </summary>
    public class RulesEngineCriteriaJsonConverter : JsonConverter<RulesEngineCriteria>
    {
        /// <summary>
        /// Deserializes json to <see cref="RulesEngineCriteria" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RulesEngineCriteria Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> conditional = default;
            Option<string?> variable = default;
            Option<string?> varOperator = default;
            Option<string?> inputValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "conditional":
                            conditional = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "variable":
                            variable = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "operator":
                            varOperator = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "input_value":
                            inputValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!conditional.IsSet)
                throw new ArgumentException("Property is required for class RulesEngineCriteria.", nameof(conditional));

            if (!variable.IsSet)
                throw new ArgumentException("Property is required for class RulesEngineCriteria.", nameof(variable));

            if (!varOperator.IsSet)
                throw new ArgumentException("Property is required for class RulesEngineCriteria.", nameof(varOperator));

            if (conditional.IsSet && conditional.Value == null)
                throw new ArgumentNullException(nameof(conditional), "Property is not nullable for class RulesEngineCriteria.");

            if (variable.IsSet && variable.Value == null)
                throw new ArgumentNullException(nameof(variable), "Property is not nullable for class RulesEngineCriteria.");

            if (varOperator.IsSet && varOperator.Value == null)
                throw new ArgumentNullException(nameof(varOperator), "Property is not nullable for class RulesEngineCriteria.");

            if (inputValue.IsSet && inputValue.Value == null)
                throw new ArgumentNullException(nameof(inputValue), "Property is not nullable for class RulesEngineCriteria.");

            return new RulesEngineCriteria(conditional.Value!, variable.Value!, varOperator.Value!, inputValue);
        }

        /// <summary>
        /// Serializes a <see cref="RulesEngineCriteria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesEngineCriteria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RulesEngineCriteria rulesEngineCriteria, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rulesEngineCriteria, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RulesEngineCriteria" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesEngineCriteria"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RulesEngineCriteria rulesEngineCriteria, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rulesEngineCriteria.Conditional == null)
                throw new ArgumentNullException(nameof(rulesEngineCriteria.Conditional), "Property is required for class RulesEngineCriteria.");

            if (rulesEngineCriteria.Variable == null)
                throw new ArgumentNullException(nameof(rulesEngineCriteria.Variable), "Property is required for class RulesEngineCriteria.");

            if (rulesEngineCriteria.Operator == null)
                throw new ArgumentNullException(nameof(rulesEngineCriteria.Operator), "Property is required for class RulesEngineCriteria.");

            if (rulesEngineCriteria.InputValueOption.IsSet && rulesEngineCriteria.InputValue == null)
                throw new ArgumentNullException(nameof(rulesEngineCriteria.InputValue), "Property is required for class RulesEngineCriteria.");

            writer.WriteString("conditional", rulesEngineCriteria.Conditional);

            writer.WriteString("variable", rulesEngineCriteria.Variable);

            writer.WriteString("operator", rulesEngineCriteria.Operator);

            if (rulesEngineCriteria.InputValueOption.IsSet)
                writer.WriteString("input_value", rulesEngineCriteria.InputValue);
        }
    }
}
