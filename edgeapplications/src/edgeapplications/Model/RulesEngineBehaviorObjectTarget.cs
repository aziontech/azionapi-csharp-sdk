// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// RulesEngineBehaviorObjectTarget
    /// </summary>
    public partial class RulesEngineBehaviorObjectTarget : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulesEngineBehaviorObjectTarget" /> class.
        /// </summary>
        /// <param name="capturedArray">capturedArray</param>
        /// <param name="subject">subject</param>
        /// <param name="regex">regex</param>
        [JsonConstructor]
        public RulesEngineBehaviorObjectTarget(Option<string?> capturedArray = default, Option<string?> subject = default, Option<string?> regex = default)
        {
            CapturedArrayOption = capturedArray;
            SubjectOption = subject;
            RegexOption = regex;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CapturedArray
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CapturedArrayOption { get; private set; }

        /// <summary>
        /// Gets or Sets CapturedArray
        /// </summary>
        [JsonPropertyName("captured_array")]
        public string? CapturedArray { get { return this.CapturedArrayOption; } set { this.CapturedArrayOption = new(value); } }

        /// <summary>
        /// Used to track the state of Subject
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubjectOption { get; private set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [JsonPropertyName("subject")]
        public string? Subject { get { return this.SubjectOption; } set { this.SubjectOption = new(value); } }

        /// <summary>
        /// Used to track the state of Regex
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegexOption { get; private set; }

        /// <summary>
        /// Gets or Sets Regex
        /// </summary>
        [JsonPropertyName("regex")]
        public string? Regex { get { return this.RegexOption; } set { this.RegexOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulesEngineBehaviorObjectTarget {\n");
            sb.Append("  CapturedArray: ").Append(CapturedArray).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="RulesEngineBehaviorObjectTarget" />
    /// </summary>
    public class RulesEngineBehaviorObjectTargetJsonConverter : JsonConverter<RulesEngineBehaviorObjectTarget>
    {
        /// <summary>
        /// Deserializes json to <see cref="RulesEngineBehaviorObjectTarget" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override RulesEngineBehaviorObjectTarget Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> capturedArray = default;
            Option<string?> subject = default;
            Option<string?> regex = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "captured_array":
                            capturedArray = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "subject":
                            subject = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "regex":
                            regex = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (capturedArray.IsSet && capturedArray.Value == null)
                throw new ArgumentNullException(nameof(capturedArray), "Property is not nullable for class RulesEngineBehaviorObjectTarget.");

            if (subject.IsSet && subject.Value == null)
                throw new ArgumentNullException(nameof(subject), "Property is not nullable for class RulesEngineBehaviorObjectTarget.");

            if (regex.IsSet && regex.Value == null)
                throw new ArgumentNullException(nameof(regex), "Property is not nullable for class RulesEngineBehaviorObjectTarget.");

            return new RulesEngineBehaviorObjectTarget(capturedArray, subject, regex);
        }

        /// <summary>
        /// Serializes a <see cref="RulesEngineBehaviorObjectTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesEngineBehaviorObjectTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, RulesEngineBehaviorObjectTarget rulesEngineBehaviorObjectTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, rulesEngineBehaviorObjectTarget, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="RulesEngineBehaviorObjectTarget" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="rulesEngineBehaviorObjectTarget"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, RulesEngineBehaviorObjectTarget rulesEngineBehaviorObjectTarget, JsonSerializerOptions jsonSerializerOptions)
        {
            if (rulesEngineBehaviorObjectTarget.CapturedArrayOption.IsSet && rulesEngineBehaviorObjectTarget.CapturedArray == null)
                throw new ArgumentNullException(nameof(rulesEngineBehaviorObjectTarget.CapturedArray), "Property is required for class RulesEngineBehaviorObjectTarget.");

            if (rulesEngineBehaviorObjectTarget.SubjectOption.IsSet && rulesEngineBehaviorObjectTarget.Subject == null)
                throw new ArgumentNullException(nameof(rulesEngineBehaviorObjectTarget.Subject), "Property is required for class RulesEngineBehaviorObjectTarget.");

            if (rulesEngineBehaviorObjectTarget.RegexOption.IsSet && rulesEngineBehaviorObjectTarget.Regex == null)
                throw new ArgumentNullException(nameof(rulesEngineBehaviorObjectTarget.Regex), "Property is required for class RulesEngineBehaviorObjectTarget.");

            if (rulesEngineBehaviorObjectTarget.CapturedArrayOption.IsSet)
                writer.WriteString("captured_array", rulesEngineBehaviorObjectTarget.CapturedArray);

            if (rulesEngineBehaviorObjectTarget.SubjectOption.IsSet)
                writer.WriteString("subject", rulesEngineBehaviorObjectTarget.Subject);

            if (rulesEngineBehaviorObjectTarget.RegexOption.IsSet)
                writer.WriteString("regex", rulesEngineBehaviorObjectTarget.Regex);
        }
    }
}
