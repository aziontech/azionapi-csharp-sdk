/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgeapplications.Client.OpenAPIDateConverter;

namespace edgeapplications.Model
{
    /// <summary>
    /// RulesEngineBehaviorTargetOneOf
    /// </summary>
    [DataContract(Name = "RulesEngineBehavior_target_oneOf")]
    public partial class RulesEngineBehaviorTargetOneOf : IEquatable<RulesEngineBehaviorTargetOneOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RulesEngineBehaviorTargetOneOf" /> class.
        /// </summary>
        /// <param name="capturedArray">capturedArray.</param>
        /// <param name="subject">subject.</param>
        /// <param name="regex">regex.</param>
        public RulesEngineBehaviorTargetOneOf(string capturedArray = default(string), string subject = default(string), string regex = default(string))
        {
            this.CapturedArray = capturedArray;
            this.Subject = subject;
            this.Regex = regex;
        }

        /// <summary>
        /// Gets or Sets CapturedArray
        /// </summary>
        [DataMember(Name = "captured_array", EmitDefaultValue = false)]
        public string CapturedArray { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [DataMember(Name = "subject", EmitDefaultValue = false)]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets Regex
        /// </summary>
        [DataMember(Name = "regex", EmitDefaultValue = false)]
        public string Regex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RulesEngineBehaviorTargetOneOf {\n");
            sb.Append("  CapturedArray: ").Append(CapturedArray).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Regex: ").Append(Regex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RulesEngineBehaviorTargetOneOf);
        }

        /// <summary>
        /// Returns true if RulesEngineBehaviorTargetOneOf instances are equal
        /// </summary>
        /// <param name="input">Instance of RulesEngineBehaviorTargetOneOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RulesEngineBehaviorTargetOneOf input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CapturedArray == input.CapturedArray ||
                    (this.CapturedArray != null &&
                    this.CapturedArray.Equals(input.CapturedArray))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Regex == input.Regex ||
                    (this.Regex != null &&
                    this.Regex.Equals(input.Regex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CapturedArray != null)
                {
                    hashCode = (hashCode * 59) + this.CapturedArray.GetHashCode();
                }
                if (this.Subject != null)
                {
                    hashCode = (hashCode * 59) + this.Subject.GetHashCode();
                }
                if (this.Regex != null)
                {
                    hashCode = (hashCode * 59) + this.Regex.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
