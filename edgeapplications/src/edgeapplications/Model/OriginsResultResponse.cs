/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgeapplications.Client.OpenAPIDateConverter;

namespace edgeapplications.Model
{
    /// <summary>
    /// OriginsResultResponse
    /// </summary>
    [DataContract(Name = "OriginsResultResponse")]
    public partial class OriginsResultResponse : IEquatable<OriginsResultResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginsResultResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OriginsResultResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OriginsResultResponse" /> class.
        /// </summary>
        /// <param name="originId">originId.</param>
        /// <param name="originKey">originKey.</param>
        /// <param name="name">name (required).</param>
        /// <param name="originType">originType.</param>
        /// <param name="addresses">addresses.</param>
        /// <param name="originProtocolPolicy">originProtocolPolicy.</param>
        /// <param name="isOriginRedirectionEnabled">isOriginRedirectionEnabled.</param>
        /// <param name="hostHeader">hostHeader.</param>
        /// <param name="method">method.</param>
        /// <param name="originPath">originPath.</param>
        /// <param name="connectionTimeout">connectionTimeout.</param>
        /// <param name="timeoutBetweenBytes">timeoutBetweenBytes.</param>
        /// <param name="hmacAuthentication">hmacAuthentication.</param>
        /// <param name="hmacRegionName">hmacRegionName.</param>
        /// <param name="hmacAccessKey">hmacAccessKey.</param>
        /// <param name="hmacSecretKey">hmacSecretKey.</param>
        /// <param name="bucket">bucket.</param>
        /// <param name="prefix">prefix.</param>
        public OriginsResultResponse(long originId = default(long), string originKey = default(string), string name = default(string), string originType = default(string), List<OriginsResultResponseAddresses> addresses = default(List<OriginsResultResponseAddresses>), string originProtocolPolicy = default(string), bool isOriginRedirectionEnabled = default(bool), string hostHeader = default(string), string method = default(string), string originPath = default(string), long connectionTimeout = default(long), long timeoutBetweenBytes = default(long), bool hmacAuthentication = default(bool), string hmacRegionName = default(string), string hmacAccessKey = default(string), string hmacSecretKey = default(string), string bucket = default(string), string prefix = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for OriginsResultResponse and cannot be null");
            }
            this.Name = name;
            this.OriginId = originId;
            this.OriginKey = originKey;
            this.OriginType = originType;
            this.Addresses = addresses;
            this.OriginProtocolPolicy = originProtocolPolicy;
            this.IsOriginRedirectionEnabled = isOriginRedirectionEnabled;
            this.HostHeader = hostHeader;
            this.Method = method;
            this.OriginPath = originPath;
            this.ConnectionTimeout = connectionTimeout;
            this.TimeoutBetweenBytes = timeoutBetweenBytes;
            this.HmacAuthentication = hmacAuthentication;
            this.HmacRegionName = hmacRegionName;
            this.HmacAccessKey = hmacAccessKey;
            this.HmacSecretKey = hmacSecretKey;
            this.Bucket = bucket;
            this.Prefix = prefix;
        }

        /// <summary>
        /// Gets or Sets OriginId
        /// </summary>
        [DataMember(Name = "origin_id", EmitDefaultValue = false)]
        public long OriginId { get; set; }

        /// <summary>
        /// Gets or Sets OriginKey
        /// </summary>
        [DataMember(Name = "origin_key", EmitDefaultValue = false)]
        public string OriginKey { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OriginType
        /// </summary>
        [DataMember(Name = "origin_type", EmitDefaultValue = false)]
        public string OriginType { get; set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name = "addresses", EmitDefaultValue = false)]
        public List<OriginsResultResponseAddresses> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets OriginProtocolPolicy
        /// </summary>
        [DataMember(Name = "origin_protocol_policy", EmitDefaultValue = false)]
        public string OriginProtocolPolicy { get; set; }

        /// <summary>
        /// Gets or Sets IsOriginRedirectionEnabled
        /// </summary>
        [DataMember(Name = "is_origin_redirection_enabled", EmitDefaultValue = true)]
        public bool IsOriginRedirectionEnabled { get; set; }

        /// <summary>
        /// Gets or Sets HostHeader
        /// </summary>
        [DataMember(Name = "host_header", EmitDefaultValue = false)]
        public string HostHeader { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name = "method", EmitDefaultValue = false)]
        public string Method { get; set; }

        /// <summary>
        /// Gets or Sets OriginPath
        /// </summary>
        [DataMember(Name = "origin_path", EmitDefaultValue = false)]
        public string OriginPath { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionTimeout
        /// </summary>
        [DataMember(Name = "connection_timeout", EmitDefaultValue = false)]
        public long ConnectionTimeout { get; set; }

        /// <summary>
        /// Gets or Sets TimeoutBetweenBytes
        /// </summary>
        [DataMember(Name = "timeout_between_bytes", EmitDefaultValue = false)]
        public long TimeoutBetweenBytes { get; set; }

        /// <summary>
        /// Gets or Sets HmacAuthentication
        /// </summary>
        [DataMember(Name = "hmac_authentication", EmitDefaultValue = true)]
        public bool HmacAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets HmacRegionName
        /// </summary>
        [DataMember(Name = "hmac_region_name", EmitDefaultValue = false)]
        public string HmacRegionName { get; set; }

        /// <summary>
        /// Gets or Sets HmacAccessKey
        /// </summary>
        [DataMember(Name = "hmac_access_key", EmitDefaultValue = false)]
        public string HmacAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets HmacSecretKey
        /// </summary>
        [DataMember(Name = "hmac_secret_key", EmitDefaultValue = false)]
        public string HmacSecretKey { get; set; }

        /// <summary>
        /// Gets or Sets Bucket
        /// </summary>
        [DataMember(Name = "bucket", EmitDefaultValue = false)]
        public string Bucket { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name = "prefix", EmitDefaultValue = false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OriginsResultResponse {\n");
            sb.Append("  OriginId: ").Append(OriginId).Append("\n");
            sb.Append("  OriginKey: ").Append(OriginKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginType: ").Append(OriginType).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  OriginProtocolPolicy: ").Append(OriginProtocolPolicy).Append("\n");
            sb.Append("  IsOriginRedirectionEnabled: ").Append(IsOriginRedirectionEnabled).Append("\n");
            sb.Append("  HostHeader: ").Append(HostHeader).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  OriginPath: ").Append(OriginPath).Append("\n");
            sb.Append("  ConnectionTimeout: ").Append(ConnectionTimeout).Append("\n");
            sb.Append("  TimeoutBetweenBytes: ").Append(TimeoutBetweenBytes).Append("\n");
            sb.Append("  HmacAuthentication: ").Append(HmacAuthentication).Append("\n");
            sb.Append("  HmacRegionName: ").Append(HmacRegionName).Append("\n");
            sb.Append("  HmacAccessKey: ").Append(HmacAccessKey).Append("\n");
            sb.Append("  HmacSecretKey: ").Append(HmacSecretKey).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OriginsResultResponse);
        }

        /// <summary>
        /// Returns true if OriginsResultResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of OriginsResultResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OriginsResultResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OriginId == input.OriginId ||
                    this.OriginId.Equals(input.OriginId)
                ) && 
                (
                    this.OriginKey == input.OriginKey ||
                    (this.OriginKey != null &&
                    this.OriginKey.Equals(input.OriginKey))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OriginType == input.OriginType ||
                    (this.OriginType != null &&
                    this.OriginType.Equals(input.OriginType))
                ) && 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.OriginProtocolPolicy == input.OriginProtocolPolicy ||
                    (this.OriginProtocolPolicy != null &&
                    this.OriginProtocolPolicy.Equals(input.OriginProtocolPolicy))
                ) && 
                (
                    this.IsOriginRedirectionEnabled == input.IsOriginRedirectionEnabled ||
                    this.IsOriginRedirectionEnabled.Equals(input.IsOriginRedirectionEnabled)
                ) && 
                (
                    this.HostHeader == input.HostHeader ||
                    (this.HostHeader != null &&
                    this.HostHeader.Equals(input.HostHeader))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.OriginPath == input.OriginPath ||
                    (this.OriginPath != null &&
                    this.OriginPath.Equals(input.OriginPath))
                ) && 
                (
                    this.ConnectionTimeout == input.ConnectionTimeout ||
                    this.ConnectionTimeout.Equals(input.ConnectionTimeout)
                ) && 
                (
                    this.TimeoutBetweenBytes == input.TimeoutBetweenBytes ||
                    this.TimeoutBetweenBytes.Equals(input.TimeoutBetweenBytes)
                ) && 
                (
                    this.HmacAuthentication == input.HmacAuthentication ||
                    this.HmacAuthentication.Equals(input.HmacAuthentication)
                ) && 
                (
                    this.HmacRegionName == input.HmacRegionName ||
                    (this.HmacRegionName != null &&
                    this.HmacRegionName.Equals(input.HmacRegionName))
                ) && 
                (
                    this.HmacAccessKey == input.HmacAccessKey ||
                    (this.HmacAccessKey != null &&
                    this.HmacAccessKey.Equals(input.HmacAccessKey))
                ) && 
                (
                    this.HmacSecretKey == input.HmacSecretKey ||
                    (this.HmacSecretKey != null &&
                    this.HmacSecretKey.Equals(input.HmacSecretKey))
                ) && 
                (
                    this.Bucket == input.Bucket ||
                    (this.Bucket != null &&
                    this.Bucket.Equals(input.Bucket))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OriginId.GetHashCode();
                if (this.OriginKey != null)
                {
                    hashCode = (hashCode * 59) + this.OriginKey.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OriginType != null)
                {
                    hashCode = (hashCode * 59) + this.OriginType.GetHashCode();
                }
                if (this.Addresses != null)
                {
                    hashCode = (hashCode * 59) + this.Addresses.GetHashCode();
                }
                if (this.OriginProtocolPolicy != null)
                {
                    hashCode = (hashCode * 59) + this.OriginProtocolPolicy.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsOriginRedirectionEnabled.GetHashCode();
                if (this.HostHeader != null)
                {
                    hashCode = (hashCode * 59) + this.HostHeader.GetHashCode();
                }
                if (this.Method != null)
                {
                    hashCode = (hashCode * 59) + this.Method.GetHashCode();
                }
                if (this.OriginPath != null)
                {
                    hashCode = (hashCode * 59) + this.OriginPath.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConnectionTimeout.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeoutBetweenBytes.GetHashCode();
                hashCode = (hashCode * 59) + this.HmacAuthentication.GetHashCode();
                if (this.HmacRegionName != null)
                {
                    hashCode = (hashCode * 59) + this.HmacRegionName.GetHashCode();
                }
                if (this.HmacAccessKey != null)
                {
                    hashCode = (hashCode * 59) + this.HmacAccessKey.GetHashCode();
                }
                if (this.HmacSecretKey != null)
                {
                    hashCode = (hashCode * 59) + this.HmacSecretKey.GetHashCode();
                }
                if (this.Bucket != null)
                {
                    hashCode = (hashCode * 59) + this.Bucket.GetHashCode();
                }
                if (this.Prefix != null)
                {
                    hashCode = (hashCode * 59) + this.Prefix.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
