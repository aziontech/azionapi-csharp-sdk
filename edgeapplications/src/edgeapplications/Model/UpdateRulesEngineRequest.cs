// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// UpdateRulesEngineRequest
    /// </summary>
    public partial class UpdateRulesEngineRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateRulesEngineRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="criteria">criteria</param>
        /// <param name="behaviors">behaviors</param>
        /// <param name="order">order</param>
        /// <param name="isActive">isActive</param>
        /// <param name="description">description</param>
        [JsonConstructor]
        public UpdateRulesEngineRequest(string name, List<List<RulesEngineCriteria>> criteria, List<RulesEngineBehaviorEntry> behaviors, Option<long?> order = default, Option<bool?> isActive = default, Option<string?> description = default)
        {
            Name = name;
            Criteria = criteria;
            Behaviors = behaviors;
            OrderOption = order;
            IsActiveOption = isActive;
            DescriptionOption = description;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Criteria
        /// </summary>
        [JsonPropertyName("criteria")]
        public List<List<RulesEngineCriteria>> Criteria { get; set; }

        /// <summary>
        /// Gets or Sets Behaviors
        /// </summary>
        [JsonPropertyName("behaviors")]
        public List<RulesEngineBehaviorEntry> Behaviors { get; set; }

        /// <summary>
        /// Used to track the state of Order
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> OrderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [JsonPropertyName("order")]
        public long? Order { get { return this.OrderOption; } set { this.OrderOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateRulesEngineRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Criteria: ").Append(Criteria).Append("\n");
            sb.Append("  Behaviors: ").Append(Behaviors).Append("\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Order (long) maximum
            if (this.OrderOption.IsSet && this.OrderOption.Value > (long)10000)
            {
                yield return new ValidationResult("Invalid value for Order, must be a value less than or equal to 10000.", new [] { "Order" });
            }

            // Order (long) minimum
            if (this.OrderOption.IsSet && this.OrderOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for Order, must be a value greater than or equal to 1.", new [] { "Order" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 1000.", new [] { "Description" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateRulesEngineRequest" />
    /// </summary>
    public class UpdateRulesEngineRequestJsonConverter : JsonConverter<UpdateRulesEngineRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateRulesEngineRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateRulesEngineRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<List<List<RulesEngineCriteria>>?> criteria = default;
            Option<List<RulesEngineBehaviorEntry>?> behaviors = default;
            Option<long?> order = default;
            Option<bool?> isActive = default;
            Option<string?> description = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "criteria":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                criteria = new Option<List<List<RulesEngineCriteria>>?>(JsonSerializer.Deserialize<List<List<RulesEngineCriteria>>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "behaviors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                behaviors = new Option<List<RulesEngineBehaviorEntry>?>(JsonSerializer.Deserialize<List<RulesEngineBehaviorEntry>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "order":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                order = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "is_active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UpdateRulesEngineRequest.", nameof(name));

            if (!criteria.IsSet)
                throw new ArgumentException("Property is required for class UpdateRulesEngineRequest.", nameof(criteria));

            if (!behaviors.IsSet)
                throw new ArgumentException("Property is required for class UpdateRulesEngineRequest.", nameof(behaviors));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateRulesEngineRequest.");

            if (criteria.IsSet && criteria.Value == null)
                throw new ArgumentNullException(nameof(criteria), "Property is not nullable for class UpdateRulesEngineRequest.");

            if (behaviors.IsSet && behaviors.Value == null)
                throw new ArgumentNullException(nameof(behaviors), "Property is not nullable for class UpdateRulesEngineRequest.");

            if (order.IsSet && order.Value == null)
                throw new ArgumentNullException(nameof(order), "Property is not nullable for class UpdateRulesEngineRequest.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class UpdateRulesEngineRequest.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class UpdateRulesEngineRequest.");

            return new UpdateRulesEngineRequest(name.Value!, criteria.Value!, behaviors.Value!, order, isActive, description);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateRulesEngineRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRulesEngineRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateRulesEngineRequest updateRulesEngineRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateRulesEngineRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateRulesEngineRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateRulesEngineRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateRulesEngineRequest updateRulesEngineRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateRulesEngineRequest.Name == null)
                throw new ArgumentNullException(nameof(updateRulesEngineRequest.Name), "Property is required for class UpdateRulesEngineRequest.");

            if (updateRulesEngineRequest.Criteria == null)
                throw new ArgumentNullException(nameof(updateRulesEngineRequest.Criteria), "Property is required for class UpdateRulesEngineRequest.");

            if (updateRulesEngineRequest.Behaviors == null)
                throw new ArgumentNullException(nameof(updateRulesEngineRequest.Behaviors), "Property is required for class UpdateRulesEngineRequest.");

            if (updateRulesEngineRequest.DescriptionOption.IsSet && updateRulesEngineRequest.Description == null)
                throw new ArgumentNullException(nameof(updateRulesEngineRequest.Description), "Property is required for class UpdateRulesEngineRequest.");

            writer.WriteString("name", updateRulesEngineRequest.Name);

            writer.WritePropertyName("criteria");
            JsonSerializer.Serialize(writer, updateRulesEngineRequest.Criteria, jsonSerializerOptions);
            writer.WritePropertyName("behaviors");
            JsonSerializer.Serialize(writer, updateRulesEngineRequest.Behaviors, jsonSerializerOptions);
            if (updateRulesEngineRequest.OrderOption.IsSet)
                writer.WriteNumber("order", updateRulesEngineRequest.OrderOption.Value!.Value);

            if (updateRulesEngineRequest.IsActiveOption.IsSet)
                writer.WriteBoolean("is_active", updateRulesEngineRequest.IsActiveOption.Value!.Value);

            if (updateRulesEngineRequest.DescriptionOption.IsSet)
                writer.WriteString("description", updateRulesEngineRequest.Description);
        }
    }
}
