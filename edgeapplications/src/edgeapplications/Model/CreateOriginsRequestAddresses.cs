// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// CreateOriginsRequestAddresses
    /// </summary>
    public partial class CreateOriginsRequestAddresses : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOriginsRequestAddresses" /> class.
        /// </summary>
        /// <param name="address">address</param>
        /// <param name="isActive">isActive</param>
        /// <param name="weight">weight</param>
        /// <param name="serverRole">serverRole</param>
        [JsonConstructor]
        public CreateOriginsRequestAddresses(string address, Option<bool?> isActive = default, Option<long?> weight = default, Option<string?> serverRole = default)
        {
            Address = address;
            IsActiveOption = isActive;
            WeightOption = weight;
            ServerRoleOption = serverRole;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [JsonPropertyName("address")]
        public string Address { get; set; }

        /// <summary>
        /// Used to track the state of IsActive
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [JsonPropertyName("is_active")]
        public bool? IsActive { get { return this.IsActiveOption; } set { this.IsActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> WeightOption { get; private set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [JsonPropertyName("weight")]
        public long? Weight { get { return this.WeightOption; } set { this.WeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ServerRole
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ServerRoleOption { get; private set; }

        /// <summary>
        /// Gets or Sets ServerRole
        /// </summary>
        [JsonPropertyName("server_role")]
        public string? ServerRole { get { return this.ServerRoleOption; } set { this.ServerRoleOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOriginsRequestAddresses {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ServerRole: ").Append(ServerRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Weight (long) maximum
            if (this.WeightOption.IsSet && this.WeightOption.Value > (long)100)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value less than or equal to 100.", new [] { "Weight" });
            }

            // Weight (long) minimum
            if (this.WeightOption.IsSet && this.WeightOption.Value < (long)1)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value greater than or equal to 1.", new [] { "Weight" });
            }

            // ServerRole (string) maxLength
            if (this.ServerRole != null && this.ServerRole.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ServerRole, length must be less than 10.", new [] { "ServerRole" });
            }

            // ServerRole (string) minLength
            if (this.ServerRole != null && this.ServerRole.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ServerRole, length must be greater than 1.", new [] { "ServerRole" });
            }

            if (this.ServerRoleOption.Value != null) {
                // ServerRole (string) pattern
                Regex regexServerRole = new Regex(@"^(primary|backup)$", RegexOptions.CultureInvariant);

                if (this.ServerRoleOption.Value != null &&!regexServerRole.Match(this.ServerRoleOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerRole, must match a pattern of " + regexServerRole, new [] { "ServerRole" });
                }
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateOriginsRequestAddresses" />
    /// </summary>
    public class CreateOriginsRequestAddressesJsonConverter : JsonConverter<CreateOriginsRequestAddresses>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateOriginsRequestAddresses" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateOriginsRequestAddresses Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> address = default;
            Option<bool?> isActive = default;
            Option<long?> weight = default;
            Option<string?> serverRole = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "address":
                            address = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isActive = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "weight":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weight = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "server_role":
                            serverRole = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!address.IsSet)
                throw new ArgumentException("Property is required for class CreateOriginsRequestAddresses.", nameof(address));

            if (address.IsSet && address.Value == null)
                throw new ArgumentNullException(nameof(address), "Property is not nullable for class CreateOriginsRequestAddresses.");

            if (isActive.IsSet && isActive.Value == null)
                throw new ArgumentNullException(nameof(isActive), "Property is not nullable for class CreateOriginsRequestAddresses.");

            if (weight.IsSet && weight.Value == null)
                throw new ArgumentNullException(nameof(weight), "Property is not nullable for class CreateOriginsRequestAddresses.");

            if (serverRole.IsSet && serverRole.Value == null)
                throw new ArgumentNullException(nameof(serverRole), "Property is not nullable for class CreateOriginsRequestAddresses.");

            return new CreateOriginsRequestAddresses(address.Value!, isActive, weight, serverRole);
        }

        /// <summary>
        /// Serializes a <see cref="CreateOriginsRequestAddresses" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOriginsRequestAddresses"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateOriginsRequestAddresses createOriginsRequestAddresses, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, createOriginsRequestAddresses, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateOriginsRequestAddresses" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createOriginsRequestAddresses"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CreateOriginsRequestAddresses createOriginsRequestAddresses, JsonSerializerOptions jsonSerializerOptions)
        {
            if (createOriginsRequestAddresses.Address == null)
                throw new ArgumentNullException(nameof(createOriginsRequestAddresses.Address), "Property is required for class CreateOriginsRequestAddresses.");

            if (createOriginsRequestAddresses.ServerRoleOption.IsSet && createOriginsRequestAddresses.ServerRole == null)
                throw new ArgumentNullException(nameof(createOriginsRequestAddresses.ServerRole), "Property is required for class CreateOriginsRequestAddresses.");

            writer.WriteString("address", createOriginsRequestAddresses.Address);

            if (createOriginsRequestAddresses.IsActiveOption.IsSet)
                writer.WriteBoolean("is_active", createOriginsRequestAddresses.IsActiveOption.Value!.Value);

            if (createOriginsRequestAddresses.WeightOption.IsSet)
                writer.WriteNumber("weight", createOriginsRequestAddresses.WeightOption.Value!.Value);

            if (createOriginsRequestAddresses.ServerRoleOption.IsSet)
                writer.WriteString("server_role", createOriginsRequestAddresses.ServerRole);
        }
    }
}
