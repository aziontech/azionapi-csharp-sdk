/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgeapplications.Client.OpenAPIDateConverter;

namespace edgeapplications.Model
{
    /// <summary>
    /// CreateOriginsRequestAddresses
    /// </summary>
    [DataContract(Name = "CreateOriginsRequest_addresses")]
    public partial class CreateOriginsRequestAddresses : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOriginsRequestAddresses" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOriginsRequestAddresses() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOriginsRequestAddresses" /> class.
        /// </summary>
        /// <param name="address">address (required).</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="weight">weight.</param>
        /// <param name="serverRole">serverRole.</param>
        public CreateOriginsRequestAddresses(string address = default(string), bool isActive = default(bool), long weight = default(long), string serverRole = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreateOriginsRequestAddresses and cannot be null");
            }
            this.Address = address;
            this.IsActive = isActive;
            this.Weight = weight;
            this.ServerRole = serverRole;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = false)]
        public long Weight { get; set; }

        /// <summary>
        /// Gets or Sets ServerRole
        /// </summary>
        [DataMember(Name = "server_role", EmitDefaultValue = false)]
        public string ServerRole { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOriginsRequestAddresses {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ServerRole: ").Append(ServerRole).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Weight (long) maximum
            if (this.Weight > (long)100)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value less than or equal to 100.", new [] { "Weight" });
            }

            // Weight (long) minimum
            if (this.Weight < (long)1)
            {
                yield return new ValidationResult("Invalid value for Weight, must be a value greater than or equal to 1.", new [] { "Weight" });
            }

            // ServerRole (string) maxLength
            if (this.ServerRole != null && this.ServerRole.Length > 10)
            {
                yield return new ValidationResult("Invalid value for ServerRole, length must be less than 10.", new [] { "ServerRole" });
            }

            // ServerRole (string) minLength
            if (this.ServerRole != null && this.ServerRole.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ServerRole, length must be greater than 1.", new [] { "ServerRole" });
            }

            if (this.ServerRole != null) {
                // ServerRole (string) pattern
                Regex regexServerRole = new Regex(@"^(primary|backup)$", RegexOptions.CultureInvariant);
                if (!regexServerRole.Match(this.ServerRole).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServerRole, must match a pattern of " + regexServerRole, new [] { "ServerRole" });
                }
            }

            yield break;
        }
    }

}
