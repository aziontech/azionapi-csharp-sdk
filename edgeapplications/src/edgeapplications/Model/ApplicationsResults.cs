// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// ApplicationsResults
    /// </summary>
    public partial class ApplicationsResults : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationsResults" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="debugRules">debugRules</param>
        /// <param name="lastEditor">lastEditor</param>
        /// <param name="lastModified">lastModified</param>
        /// <param name="active">active</param>
        /// <param name="origins">origins</param>
        [JsonConstructor]
        public ApplicationsResults(long id, string name, bool debugRules, string lastEditor, string lastModified, bool active, List<ApplicationOrigins> origins)
        {
            Id = id;
            Name = name;
            DebugRules = debugRules;
            LastEditor = lastEditor;
            LastModified = lastModified;
            Active = active;
            Origins = origins;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DebugRules
        /// </summary>
        [JsonPropertyName("debug_rules")]
        public bool DebugRules { get; set; }

        /// <summary>
        /// Gets or Sets LastEditor
        /// </summary>
        [JsonPropertyName("last_editor")]
        public string LastEditor { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        [JsonPropertyName("last_modified")]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Origins
        /// </summary>
        [JsonPropertyName("origins")]
        public List<ApplicationOrigins> Origins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationsResults {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DebugRules: ").Append(DebugRules).Append("\n");
            sb.Append("  LastEditor: ").Append(LastEditor).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApplicationsResults" />
    /// </summary>
    public class ApplicationsResultsJsonConverter : JsonConverter<ApplicationsResults>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApplicationsResults" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApplicationsResults Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<long?> id = default;
            Option<string?> name = default;
            Option<bool?> debugRules = default;
            Option<string?> lastEditor = default;
            Option<string?> lastModified = default;
            Option<bool?> active = default;
            Option<List<ApplicationOrigins>?> origins = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "debug_rules":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                debugRules = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "last_editor":
                            lastEditor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "last_modified":
                            lastModified = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "origins":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                origins = new Option<List<ApplicationOrigins>?>(JsonSerializer.Deserialize<List<ApplicationOrigins>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(name));

            if (!debugRules.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(debugRules));

            if (!lastEditor.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(lastEditor));

            if (!lastModified.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(lastModified));

            if (!active.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(active));

            if (!origins.IsSet)
                throw new ArgumentException("Property is required for class ApplicationsResults.", nameof(origins));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ApplicationsResults.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ApplicationsResults.");

            if (debugRules.IsSet && debugRules.Value == null)
                throw new ArgumentNullException(nameof(debugRules), "Property is not nullable for class ApplicationsResults.");

            if (lastEditor.IsSet && lastEditor.Value == null)
                throw new ArgumentNullException(nameof(lastEditor), "Property is not nullable for class ApplicationsResults.");

            if (lastModified.IsSet && lastModified.Value == null)
                throw new ArgumentNullException(nameof(lastModified), "Property is not nullable for class ApplicationsResults.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class ApplicationsResults.");

            if (origins.IsSet && origins.Value == null)
                throw new ArgumentNullException(nameof(origins), "Property is not nullable for class ApplicationsResults.");

            return new ApplicationsResults(id.Value!.Value!, name.Value!, debugRules.Value!.Value!, lastEditor.Value!, lastModified.Value!, active.Value!.Value!, origins.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ApplicationsResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationsResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApplicationsResults applicationsResults, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, applicationsResults, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApplicationsResults" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationsResults"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApplicationsResults applicationsResults, JsonSerializerOptions jsonSerializerOptions)
        {
            if (applicationsResults.Name == null)
                throw new ArgumentNullException(nameof(applicationsResults.Name), "Property is required for class ApplicationsResults.");

            if (applicationsResults.LastEditor == null)
                throw new ArgumentNullException(nameof(applicationsResults.LastEditor), "Property is required for class ApplicationsResults.");

            if (applicationsResults.LastModified == null)
                throw new ArgumentNullException(nameof(applicationsResults.LastModified), "Property is required for class ApplicationsResults.");

            if (applicationsResults.Origins == null)
                throw new ArgumentNullException(nameof(applicationsResults.Origins), "Property is required for class ApplicationsResults.");

            writer.WriteNumber("id", applicationsResults.Id);

            writer.WriteString("name", applicationsResults.Name);

            writer.WriteBoolean("debug_rules", applicationsResults.DebugRules);

            writer.WriteString("last_editor", applicationsResults.LastEditor);

            writer.WriteString("last_modified", applicationsResults.LastModified);

            writer.WriteBoolean("active", applicationsResults.Active);

            writer.WritePropertyName("origins");
            JsonSerializer.Serialize(writer, applicationsResults.Origins, jsonSerializerOptions);
        }
    }
}
