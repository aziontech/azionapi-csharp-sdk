// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// UpdateOriginsRequest
    /// </summary>
    public partial class UpdateOriginsRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateOriginsRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="originType">originType</param>
        /// <param name="addresses">addresses</param>
        /// <param name="originProtocolPolicy">originProtocolPolicy</param>
        /// <param name="hostHeader">hostHeader</param>
        /// <param name="originPath">originPath</param>
        /// <param name="hmacAuthentication">hmacAuthentication</param>
        /// <param name="hmacRegionName">hmacRegionName</param>
        /// <param name="hmacAccessKey">hmacAccessKey</param>
        /// <param name="hmacSecretKey">hmacSecretKey</param>
        /// <param name="bucket">bucket</param>
        /// <param name="prefix">prefix</param>
        [JsonConstructor]
        public UpdateOriginsRequest(string name, Option<string?> originType = default, Option<List<CreateOriginsRequestAddresses>?> addresses = default, Option<string?> originProtocolPolicy = default, Option<string?> hostHeader = default, Option<string?> originPath = default, Option<bool?> hmacAuthentication = default, Option<string?> hmacRegionName = default, Option<string?> hmacAccessKey = default, Option<string?> hmacSecretKey = default, Option<string?> bucket = default, Option<string?> prefix = default)
        {
            Name = name;
            OriginTypeOption = originType;
            AddressesOption = addresses;
            OriginProtocolPolicyOption = originProtocolPolicy;
            HostHeaderOption = hostHeader;
            OriginPathOption = originPath;
            HmacAuthenticationOption = hmacAuthentication;
            HmacRegionNameOption = hmacRegionName;
            HmacAccessKeyOption = hmacAccessKey;
            HmacSecretKeyOption = hmacSecretKey;
            BucketOption = bucket;
            PrefixOption = prefix;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of OriginType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginType
        /// </summary>
        [JsonPropertyName("origin_type")]
        public string? OriginType { get { return this.OriginTypeOption; } set { this.OriginTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Addresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CreateOriginsRequestAddresses>?> AddressesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [JsonPropertyName("addresses")]
        public List<CreateOriginsRequestAddresses>? Addresses { get { return this.AddressesOption; } set { this.AddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginProtocolPolicy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginProtocolPolicyOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginProtocolPolicy
        /// </summary>
        [JsonPropertyName("origin_protocol_policy")]
        public string? OriginProtocolPolicy { get { return this.OriginProtocolPolicyOption; } set { this.OriginProtocolPolicyOption = new(value); } }

        /// <summary>
        /// Used to track the state of HostHeader
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HostHeaderOption { get; private set; }

        /// <summary>
        /// Gets or Sets HostHeader
        /// </summary>
        [JsonPropertyName("host_header")]
        public string? HostHeader { get { return this.HostHeaderOption; } set { this.HostHeaderOption = new(value); } }

        /// <summary>
        /// Used to track the state of OriginPath
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginPathOption { get; private set; }

        /// <summary>
        /// Gets or Sets OriginPath
        /// </summary>
        [JsonPropertyName("origin_path")]
        public string? OriginPath { get { return this.OriginPathOption; } set { this.OriginPathOption = new(value); } }

        /// <summary>
        /// Used to track the state of HmacAuthentication
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HmacAuthenticationOption { get; private set; }

        /// <summary>
        /// Gets or Sets HmacAuthentication
        /// </summary>
        [JsonPropertyName("hmac_authentication")]
        public bool? HmacAuthentication { get { return this.HmacAuthenticationOption; } set { this.HmacAuthenticationOption = new(value); } }

        /// <summary>
        /// Used to track the state of HmacRegionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HmacRegionNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets HmacRegionName
        /// </summary>
        [JsonPropertyName("hmac_region_name")]
        public string? HmacRegionName { get { return this.HmacRegionNameOption; } set { this.HmacRegionNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of HmacAccessKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HmacAccessKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets HmacAccessKey
        /// </summary>
        [JsonPropertyName("hmac_access_key")]
        public string? HmacAccessKey { get { return this.HmacAccessKeyOption; } set { this.HmacAccessKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of HmacSecretKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HmacSecretKeyOption { get; private set; }

        /// <summary>
        /// Gets or Sets HmacSecretKey
        /// </summary>
        [JsonPropertyName("hmac_secret_key")]
        public string? HmacSecretKey { get { return this.HmacSecretKeyOption; } set { this.HmacSecretKeyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Bucket
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BucketOption { get; private set; }

        /// <summary>
        /// Gets or Sets Bucket
        /// </summary>
        [JsonPropertyName("bucket")]
        public string? Bucket { get { return this.BucketOption; } set { this.BucketOption = new(value); } }

        /// <summary>
        /// Used to track the state of Prefix
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PrefixOption { get; private set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [JsonPropertyName("prefix")]
        public string? Prefix { get { return this.PrefixOption; } set { this.PrefixOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateOriginsRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginType: ").Append(OriginType).Append("\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  OriginProtocolPolicy: ").Append(OriginProtocolPolicy).Append("\n");
            sb.Append("  HostHeader: ").Append(HostHeader).Append("\n");
            sb.Append("  OriginPath: ").Append(OriginPath).Append("\n");
            sb.Append("  HmacAuthentication: ").Append(HmacAuthentication).Append("\n");
            sb.Append("  HmacRegionName: ").Append(HmacRegionName).Append("\n");
            sb.Append("  HmacAccessKey: ").Append(HmacAccessKey).Append("\n");
            sb.Append("  HmacSecretKey: ").Append(HmacSecretKey).Append("\n");
            sb.Append("  Bucket: ").Append(Bucket).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="UpdateOriginsRequest" />
    /// </summary>
    public class UpdateOriginsRequestJsonConverter : JsonConverter<UpdateOriginsRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="UpdateOriginsRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override UpdateOriginsRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> originType = default;
            Option<List<CreateOriginsRequestAddresses>?> addresses = default;
            Option<string?> originProtocolPolicy = default;
            Option<string?> hostHeader = default;
            Option<string?> originPath = default;
            Option<bool?> hmacAuthentication = default;
            Option<string?> hmacRegionName = default;
            Option<string?> hmacAccessKey = default;
            Option<string?> hmacSecretKey = default;
            Option<string?> bucket = default;
            Option<string?> prefix = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "origin_type":
                            originType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "addresses":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                addresses = new Option<List<CreateOriginsRequestAddresses>?>(JsonSerializer.Deserialize<List<CreateOriginsRequestAddresses>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "origin_protocol_policy":
                            originProtocolPolicy = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "host_header":
                            hostHeader = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "origin_path":
                            originPath = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hmac_authentication":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hmacAuthentication = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "hmac_region_name":
                            hmacRegionName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hmac_access_key":
                            hmacAccessKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hmac_secret_key":
                            hmacSecretKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "bucket":
                            bucket = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "prefix":
                            prefix = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class UpdateOriginsRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class UpdateOriginsRequest.");

            if (originType.IsSet && originType.Value == null)
                throw new ArgumentNullException(nameof(originType), "Property is not nullable for class UpdateOriginsRequest.");

            if (addresses.IsSet && addresses.Value == null)
                throw new ArgumentNullException(nameof(addresses), "Property is not nullable for class UpdateOriginsRequest.");

            if (originProtocolPolicy.IsSet && originProtocolPolicy.Value == null)
                throw new ArgumentNullException(nameof(originProtocolPolicy), "Property is not nullable for class UpdateOriginsRequest.");

            if (hostHeader.IsSet && hostHeader.Value == null)
                throw new ArgumentNullException(nameof(hostHeader), "Property is not nullable for class UpdateOriginsRequest.");

            if (originPath.IsSet && originPath.Value == null)
                throw new ArgumentNullException(nameof(originPath), "Property is not nullable for class UpdateOriginsRequest.");

            if (hmacAuthentication.IsSet && hmacAuthentication.Value == null)
                throw new ArgumentNullException(nameof(hmacAuthentication), "Property is not nullable for class UpdateOriginsRequest.");

            if (hmacRegionName.IsSet && hmacRegionName.Value == null)
                throw new ArgumentNullException(nameof(hmacRegionName), "Property is not nullable for class UpdateOriginsRequest.");

            if (hmacAccessKey.IsSet && hmacAccessKey.Value == null)
                throw new ArgumentNullException(nameof(hmacAccessKey), "Property is not nullable for class UpdateOriginsRequest.");

            if (hmacSecretKey.IsSet && hmacSecretKey.Value == null)
                throw new ArgumentNullException(nameof(hmacSecretKey), "Property is not nullable for class UpdateOriginsRequest.");

            if (bucket.IsSet && bucket.Value == null)
                throw new ArgumentNullException(nameof(bucket), "Property is not nullable for class UpdateOriginsRequest.");

            if (prefix.IsSet && prefix.Value == null)
                throw new ArgumentNullException(nameof(prefix), "Property is not nullable for class UpdateOriginsRequest.");

            return new UpdateOriginsRequest(name.Value!, originType, addresses, originProtocolPolicy, hostHeader, originPath, hmacAuthentication, hmacRegionName, hmacAccessKey, hmacSecretKey, bucket, prefix);
        }

        /// <summary>
        /// Serializes a <see cref="UpdateOriginsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOriginsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, UpdateOriginsRequest updateOriginsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, updateOriginsRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="UpdateOriginsRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="updateOriginsRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, UpdateOriginsRequest updateOriginsRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (updateOriginsRequest.Name == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.Name), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.OriginTypeOption.IsSet && updateOriginsRequest.OriginType == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.OriginType), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.AddressesOption.IsSet && updateOriginsRequest.Addresses == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.Addresses), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.OriginProtocolPolicyOption.IsSet && updateOriginsRequest.OriginProtocolPolicy == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.OriginProtocolPolicy), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.HostHeaderOption.IsSet && updateOriginsRequest.HostHeader == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.HostHeader), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.OriginPathOption.IsSet && updateOriginsRequest.OriginPath == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.OriginPath), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.HmacRegionNameOption.IsSet && updateOriginsRequest.HmacRegionName == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.HmacRegionName), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.HmacAccessKeyOption.IsSet && updateOriginsRequest.HmacAccessKey == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.HmacAccessKey), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.HmacSecretKeyOption.IsSet && updateOriginsRequest.HmacSecretKey == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.HmacSecretKey), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.BucketOption.IsSet && updateOriginsRequest.Bucket == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.Bucket), "Property is required for class UpdateOriginsRequest.");

            if (updateOriginsRequest.PrefixOption.IsSet && updateOriginsRequest.Prefix == null)
                throw new ArgumentNullException(nameof(updateOriginsRequest.Prefix), "Property is required for class UpdateOriginsRequest.");

            writer.WriteString("name", updateOriginsRequest.Name);

            if (updateOriginsRequest.OriginTypeOption.IsSet)
                writer.WriteString("origin_type", updateOriginsRequest.OriginType);

            if (updateOriginsRequest.AddressesOption.IsSet)
            {
                writer.WritePropertyName("addresses");
                JsonSerializer.Serialize(writer, updateOriginsRequest.Addresses, jsonSerializerOptions);
            }
            if (updateOriginsRequest.OriginProtocolPolicyOption.IsSet)
                writer.WriteString("origin_protocol_policy", updateOriginsRequest.OriginProtocolPolicy);

            if (updateOriginsRequest.HostHeaderOption.IsSet)
                writer.WriteString("host_header", updateOriginsRequest.HostHeader);

            if (updateOriginsRequest.OriginPathOption.IsSet)
                writer.WriteString("origin_path", updateOriginsRequest.OriginPath);

            if (updateOriginsRequest.HmacAuthenticationOption.IsSet)
                writer.WriteBoolean("hmac_authentication", updateOriginsRequest.HmacAuthenticationOption.Value!.Value);

            if (updateOriginsRequest.HmacRegionNameOption.IsSet)
                writer.WriteString("hmac_region_name", updateOriginsRequest.HmacRegionName);

            if (updateOriginsRequest.HmacAccessKeyOption.IsSet)
                writer.WriteString("hmac_access_key", updateOriginsRequest.HmacAccessKey);

            if (updateOriginsRequest.HmacSecretKeyOption.IsSet)
                writer.WriteString("hmac_secret_key", updateOriginsRequest.HmacSecretKey);

            if (updateOriginsRequest.BucketOption.IsSet)
                writer.WriteString("bucket", updateOriginsRequest.Bucket);

            if (updateOriginsRequest.PrefixOption.IsSet)
                writer.WriteString("prefix", updateOriginsRequest.Prefix);
        }
    }
}
