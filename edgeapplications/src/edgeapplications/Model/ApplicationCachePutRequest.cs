// <auto-generated>
/*
 * Edge Application API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgeapplications.Client;

namespace edgeapplications.Model
{
    /// <summary>
    /// ApplicationCachePutRequest
    /// </summary>
    public partial class ApplicationCachePutRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationCachePutRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="browserCacheSettings">browserCacheSettings</param>
        /// <param name="browserCacheSettingsMaximumTtl">browserCacheSettingsMaximumTtl</param>
        /// <param name="cdnCacheSettings">cdnCacheSettings</param>
        /// <param name="cdnCacheSettingsMaximumTtl">cdnCacheSettingsMaximumTtl</param>
        /// <param name="cacheByQueryString">cacheByQueryString</param>
        /// <param name="queryStringFields">queryStringFields</param>
        /// <param name="enableQueryStringSort">enableQueryStringSort</param>
        /// <param name="cacheByCookies">cacheByCookies</param>
        /// <param name="cookieNames">cookieNames</param>
        /// <param name="adaptiveDeliveryAction">adaptiveDeliveryAction</param>
        /// <param name="deviceGroup">deviceGroup</param>
        /// <param name="enableCachingForPost">enableCachingForPost</param>
        /// <param name="l2CachingEnabled">l2CachingEnabled</param>
        /// <param name="isSliceConfigurationEnabled">isSliceConfigurationEnabled</param>
        /// <param name="isSliceEdgeCachingEnabled">isSliceEdgeCachingEnabled</param>
        /// <param name="isSliceL2CachingEnabled">isSliceL2CachingEnabled</param>
        /// <param name="sliceConfigurationRange">sliceConfigurationRange</param>
        /// <param name="enableCachingForOptions">enableCachingForOptions</param>
        /// <param name="enableStaleCache">enableStaleCache</param>
        /// <param name="l2Region">l2Region</param>
        [JsonConstructor]
        public ApplicationCachePutRequest(string name, Option<string?> browserCacheSettings = default, Option<long?> browserCacheSettingsMaximumTtl = default, Option<string?> cdnCacheSettings = default, Option<long?> cdnCacheSettingsMaximumTtl = default, Option<string?> cacheByQueryString = default, Option<List<string>?> queryStringFields = default, Option<bool?> enableQueryStringSort = default, Option<string?> cacheByCookies = default, Option<List<string>?> cookieNames = default, Option<string?> adaptiveDeliveryAction = default, Option<List<int>?> deviceGroup = default, Option<bool?> enableCachingForPost = default, Option<bool?> l2CachingEnabled = default, Option<bool?> isSliceConfigurationEnabled = default, Option<bool?> isSliceEdgeCachingEnabled = default, Option<bool?> isSliceL2CachingEnabled = default, Option<long?> sliceConfigurationRange = default, Option<bool?> enableCachingForOptions = default, Option<bool?> enableStaleCache = default, Option<string?> l2Region = default)
        {
            Name = name;
            BrowserCacheSettingsOption = browserCacheSettings;
            BrowserCacheSettingsMaximumTtlOption = browserCacheSettingsMaximumTtl;
            CdnCacheSettingsOption = cdnCacheSettings;
            CdnCacheSettingsMaximumTtlOption = cdnCacheSettingsMaximumTtl;
            CacheByQueryStringOption = cacheByQueryString;
            QueryStringFieldsOption = queryStringFields;
            EnableQueryStringSortOption = enableQueryStringSort;
            CacheByCookiesOption = cacheByCookies;
            CookieNamesOption = cookieNames;
            AdaptiveDeliveryActionOption = adaptiveDeliveryAction;
            DeviceGroupOption = deviceGroup;
            EnableCachingForPostOption = enableCachingForPost;
            L2CachingEnabledOption = l2CachingEnabled;
            IsSliceConfigurationEnabledOption = isSliceConfigurationEnabled;
            IsSliceEdgeCachingEnabledOption = isSliceEdgeCachingEnabled;
            IsSliceL2CachingEnabledOption = isSliceL2CachingEnabled;
            SliceConfigurationRangeOption = sliceConfigurationRange;
            EnableCachingForOptionsOption = enableCachingForOptions;
            EnableStaleCacheOption = enableStaleCache;
            L2RegionOption = l2Region;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Used to track the state of BrowserCacheSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrowserCacheSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettings
        /// </summary>
        [JsonPropertyName("browser_cache_settings")]
        public string? BrowserCacheSettings { get { return this.BrowserCacheSettingsOption; } set { this.BrowserCacheSettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrowserCacheSettingsMaximumTtl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> BrowserCacheSettingsMaximumTtlOption { get; private set; }

        /// <summary>
        /// Gets or Sets BrowserCacheSettingsMaximumTtl
        /// </summary>
        [JsonPropertyName("browser_cache_settings_maximum_ttl")]
        public long? BrowserCacheSettingsMaximumTtl { get { return this.BrowserCacheSettingsMaximumTtlOption; } set { this.BrowserCacheSettingsMaximumTtlOption = new(value); } }

        /// <summary>
        /// Used to track the state of CdnCacheSettings
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CdnCacheSettingsOption { get; private set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettings
        /// </summary>
        [JsonPropertyName("cdn_cache_settings")]
        public string? CdnCacheSettings { get { return this.CdnCacheSettingsOption; } set { this.CdnCacheSettingsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CdnCacheSettingsMaximumTtl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> CdnCacheSettingsMaximumTtlOption { get; private set; }

        /// <summary>
        /// Gets or Sets CdnCacheSettingsMaximumTtl
        /// </summary>
        [JsonPropertyName("cdn_cache_settings_maximum_ttl")]
        public long? CdnCacheSettingsMaximumTtl { get { return this.CdnCacheSettingsMaximumTtlOption; } set { this.CdnCacheSettingsMaximumTtlOption = new(value); } }

        /// <summary>
        /// Used to track the state of CacheByQueryString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CacheByQueryStringOption { get; private set; }

        /// <summary>
        /// Gets or Sets CacheByQueryString
        /// </summary>
        [JsonPropertyName("cache_by_query_string")]
        public string? CacheByQueryString { get { return this.CacheByQueryStringOption; } set { this.CacheByQueryStringOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryStringFields
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> QueryStringFieldsOption { get; private set; }

        /// <summary>
        /// Gets or Sets QueryStringFields
        /// </summary>
        [JsonPropertyName("query_string_fields")]
        public List<string>? QueryStringFields { get { return this.QueryStringFieldsOption; } set { this.QueryStringFieldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnableQueryStringSort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableQueryStringSortOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnableQueryStringSort
        /// </summary>
        [JsonPropertyName("enable_query_string_sort")]
        public bool? EnableQueryStringSort { get { return this.EnableQueryStringSortOption; } set { this.EnableQueryStringSortOption = new(value); } }

        /// <summary>
        /// Used to track the state of CacheByCookies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CacheByCookiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CacheByCookies
        /// </summary>
        [JsonPropertyName("cache_by_cookies")]
        public string? CacheByCookies { get { return this.CacheByCookiesOption; } set { this.CacheByCookiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of CookieNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> CookieNamesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CookieNames
        /// </summary>
        [JsonPropertyName("cookie_names")]
        public List<string>? CookieNames { get { return this.CookieNamesOption; } set { this.CookieNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdaptiveDeliveryAction
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdaptiveDeliveryActionOption { get; private set; }

        /// <summary>
        /// Gets or Sets AdaptiveDeliveryAction
        /// </summary>
        [JsonPropertyName("adaptive_delivery_action")]
        public string? AdaptiveDeliveryAction { get { return this.AdaptiveDeliveryActionOption; } set { this.AdaptiveDeliveryActionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceGroup
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>?> DeviceGroupOption { get; private set; }

        /// <summary>
        /// Gets or Sets DeviceGroup
        /// </summary>
        [JsonPropertyName("device_group")]
        public List<int>? DeviceGroup { get { return this.DeviceGroupOption; } set { this.DeviceGroupOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnableCachingForPost
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableCachingForPostOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnableCachingForPost
        /// </summary>
        [JsonPropertyName("enable_caching_for_post")]
        public bool? EnableCachingForPost { get { return this.EnableCachingForPostOption; } set { this.EnableCachingForPostOption = new(value); } }

        /// <summary>
        /// Used to track the state of L2CachingEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> L2CachingEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets L2CachingEnabled
        /// </summary>
        [JsonPropertyName("l2_caching_enabled")]
        public bool? L2CachingEnabled { get { return this.L2CachingEnabledOption; } set { this.L2CachingEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSliceConfigurationEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSliceConfigurationEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSliceConfigurationEnabled
        /// </summary>
        [JsonPropertyName("is_slice_configuration_enabled")]
        public bool? IsSliceConfigurationEnabled { get { return this.IsSliceConfigurationEnabledOption; } set { this.IsSliceConfigurationEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSliceEdgeCachingEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSliceEdgeCachingEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSliceEdgeCachingEnabled
        /// </summary>
        [JsonPropertyName("is_slice_edge_caching_enabled")]
        public bool? IsSliceEdgeCachingEnabled { get { return this.IsSliceEdgeCachingEnabledOption; } set { this.IsSliceEdgeCachingEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSliceL2CachingEnabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSliceL2CachingEnabledOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsSliceL2CachingEnabled
        /// </summary>
        [JsonPropertyName("is_slice_l2_caching_enabled")]
        public bool? IsSliceL2CachingEnabled { get { return this.IsSliceL2CachingEnabledOption; } set { this.IsSliceL2CachingEnabledOption = new(value); } }

        /// <summary>
        /// Used to track the state of SliceConfigurationRange
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<long?> SliceConfigurationRangeOption { get; private set; }

        /// <summary>
        /// Gets or Sets SliceConfigurationRange
        /// </summary>
        [JsonPropertyName("slice_configuration_range")]
        public long? SliceConfigurationRange { get { return this.SliceConfigurationRangeOption; } set { this.SliceConfigurationRangeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnableCachingForOptions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableCachingForOptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnableCachingForOptions
        /// </summary>
        [JsonPropertyName("enable_caching_for_options")]
        public bool? EnableCachingForOptions { get { return this.EnableCachingForOptionsOption; } set { this.EnableCachingForOptionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnableStaleCache
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnableStaleCacheOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnableStaleCache
        /// </summary>
        [JsonPropertyName("enable_stale_cache")]
        public bool? EnableStaleCache { get { return this.EnableStaleCacheOption; } set { this.EnableStaleCacheOption = new(value); } }

        /// <summary>
        /// Used to track the state of L2Region
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> L2RegionOption { get; private set; }

        /// <summary>
        /// Gets or Sets L2Region
        /// </summary>
        [JsonPropertyName("l2_region")]
        public string? L2Region { get { return this.L2RegionOption; } set { this.L2RegionOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationCachePutRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  BrowserCacheSettings: ").Append(BrowserCacheSettings).Append("\n");
            sb.Append("  BrowserCacheSettingsMaximumTtl: ").Append(BrowserCacheSettingsMaximumTtl).Append("\n");
            sb.Append("  CdnCacheSettings: ").Append(CdnCacheSettings).Append("\n");
            sb.Append("  CdnCacheSettingsMaximumTtl: ").Append(CdnCacheSettingsMaximumTtl).Append("\n");
            sb.Append("  CacheByQueryString: ").Append(CacheByQueryString).Append("\n");
            sb.Append("  QueryStringFields: ").Append(QueryStringFields).Append("\n");
            sb.Append("  EnableQueryStringSort: ").Append(EnableQueryStringSort).Append("\n");
            sb.Append("  CacheByCookies: ").Append(CacheByCookies).Append("\n");
            sb.Append("  CookieNames: ").Append(CookieNames).Append("\n");
            sb.Append("  AdaptiveDeliveryAction: ").Append(AdaptiveDeliveryAction).Append("\n");
            sb.Append("  DeviceGroup: ").Append(DeviceGroup).Append("\n");
            sb.Append("  EnableCachingForPost: ").Append(EnableCachingForPost).Append("\n");
            sb.Append("  L2CachingEnabled: ").Append(L2CachingEnabled).Append("\n");
            sb.Append("  IsSliceConfigurationEnabled: ").Append(IsSliceConfigurationEnabled).Append("\n");
            sb.Append("  IsSliceEdgeCachingEnabled: ").Append(IsSliceEdgeCachingEnabled).Append("\n");
            sb.Append("  IsSliceL2CachingEnabled: ").Append(IsSliceL2CachingEnabled).Append("\n");
            sb.Append("  SliceConfigurationRange: ").Append(SliceConfigurationRange).Append("\n");
            sb.Append("  EnableCachingForOptions: ").Append(EnableCachingForOptions).Append("\n");
            sb.Append("  EnableStaleCache: ").Append(EnableStaleCache).Append("\n");
            sb.Append("  L2Region: ").Append(L2Region).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ApplicationCachePutRequest" />
    /// </summary>
    public class ApplicationCachePutRequestJsonConverter : JsonConverter<ApplicationCachePutRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ApplicationCachePutRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ApplicationCachePutRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> browserCacheSettings = default;
            Option<long?> browserCacheSettingsMaximumTtl = default;
            Option<string?> cdnCacheSettings = default;
            Option<long?> cdnCacheSettingsMaximumTtl = default;
            Option<string?> cacheByQueryString = default;
            Option<List<string>?> queryStringFields = default;
            Option<bool?> enableQueryStringSort = default;
            Option<string?> cacheByCookies = default;
            Option<List<string>?> cookieNames = default;
            Option<string?> adaptiveDeliveryAction = default;
            Option<List<int>?> deviceGroup = default;
            Option<bool?> enableCachingForPost = default;
            Option<bool?> l2CachingEnabled = default;
            Option<bool?> isSliceConfigurationEnabled = default;
            Option<bool?> isSliceEdgeCachingEnabled = default;
            Option<bool?> isSliceL2CachingEnabled = default;
            Option<long?> sliceConfigurationRange = default;
            Option<bool?> enableCachingForOptions = default;
            Option<bool?> enableStaleCache = default;
            Option<string?> l2Region = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "browser_cache_settings":
                            browserCacheSettings = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "browser_cache_settings_maximum_ttl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                browserCacheSettingsMaximumTtl = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "cdn_cache_settings":
                            cdnCacheSettings = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cdn_cache_settings_maximum_ttl":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cdnCacheSettingsMaximumTtl = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "cache_by_query_string":
                            cacheByQueryString = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "query_string_fields":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                queryStringFields = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "enable_query_string_sort":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableQueryStringSort = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "cache_by_cookies":
                            cacheByCookies = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cookie_names":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cookieNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "adaptive_delivery_action":
                            adaptiveDeliveryAction = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "device_group":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                deviceGroup = new Option<List<int>?>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "enable_caching_for_post":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableCachingForPost = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "l2_caching_enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                l2CachingEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "is_slice_configuration_enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSliceConfigurationEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "is_slice_edge_caching_enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSliceEdgeCachingEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "is_slice_l2_caching_enabled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isSliceL2CachingEnabled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "slice_configuration_range":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                sliceConfigurationRange = new Option<long?>(utf8JsonReader.GetInt64());
                            break;
                        case "enable_caching_for_options":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableCachingForOptions = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "enable_stale_cache":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                enableStaleCache = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "l2_region":
                            l2Region = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ApplicationCachePutRequest.", nameof(name));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ApplicationCachePutRequest.");

            if (browserCacheSettings.IsSet && browserCacheSettings.Value == null)
                throw new ArgumentNullException(nameof(browserCacheSettings), "Property is not nullable for class ApplicationCachePutRequest.");

            if (browserCacheSettingsMaximumTtl.IsSet && browserCacheSettingsMaximumTtl.Value == null)
                throw new ArgumentNullException(nameof(browserCacheSettingsMaximumTtl), "Property is not nullable for class ApplicationCachePutRequest.");

            if (cdnCacheSettings.IsSet && cdnCacheSettings.Value == null)
                throw new ArgumentNullException(nameof(cdnCacheSettings), "Property is not nullable for class ApplicationCachePutRequest.");

            if (cdnCacheSettingsMaximumTtl.IsSet && cdnCacheSettingsMaximumTtl.Value == null)
                throw new ArgumentNullException(nameof(cdnCacheSettingsMaximumTtl), "Property is not nullable for class ApplicationCachePutRequest.");

            if (cacheByQueryString.IsSet && cacheByQueryString.Value == null)
                throw new ArgumentNullException(nameof(cacheByQueryString), "Property is not nullable for class ApplicationCachePutRequest.");

            if (queryStringFields.IsSet && queryStringFields.Value == null)
                throw new ArgumentNullException(nameof(queryStringFields), "Property is not nullable for class ApplicationCachePutRequest.");

            if (enableQueryStringSort.IsSet && enableQueryStringSort.Value == null)
                throw new ArgumentNullException(nameof(enableQueryStringSort), "Property is not nullable for class ApplicationCachePutRequest.");

            if (cacheByCookies.IsSet && cacheByCookies.Value == null)
                throw new ArgumentNullException(nameof(cacheByCookies), "Property is not nullable for class ApplicationCachePutRequest.");

            if (cookieNames.IsSet && cookieNames.Value == null)
                throw new ArgumentNullException(nameof(cookieNames), "Property is not nullable for class ApplicationCachePutRequest.");

            if (adaptiveDeliveryAction.IsSet && adaptiveDeliveryAction.Value == null)
                throw new ArgumentNullException(nameof(adaptiveDeliveryAction), "Property is not nullable for class ApplicationCachePutRequest.");

            if (deviceGroup.IsSet && deviceGroup.Value == null)
                throw new ArgumentNullException(nameof(deviceGroup), "Property is not nullable for class ApplicationCachePutRequest.");

            if (enableCachingForPost.IsSet && enableCachingForPost.Value == null)
                throw new ArgumentNullException(nameof(enableCachingForPost), "Property is not nullable for class ApplicationCachePutRequest.");

            if (l2CachingEnabled.IsSet && l2CachingEnabled.Value == null)
                throw new ArgumentNullException(nameof(l2CachingEnabled), "Property is not nullable for class ApplicationCachePutRequest.");

            if (isSliceConfigurationEnabled.IsSet && isSliceConfigurationEnabled.Value == null)
                throw new ArgumentNullException(nameof(isSliceConfigurationEnabled), "Property is not nullable for class ApplicationCachePutRequest.");

            if (isSliceEdgeCachingEnabled.IsSet && isSliceEdgeCachingEnabled.Value == null)
                throw new ArgumentNullException(nameof(isSliceEdgeCachingEnabled), "Property is not nullable for class ApplicationCachePutRequest.");

            if (isSliceL2CachingEnabled.IsSet && isSliceL2CachingEnabled.Value == null)
                throw new ArgumentNullException(nameof(isSliceL2CachingEnabled), "Property is not nullable for class ApplicationCachePutRequest.");

            if (sliceConfigurationRange.IsSet && sliceConfigurationRange.Value == null)
                throw new ArgumentNullException(nameof(sliceConfigurationRange), "Property is not nullable for class ApplicationCachePutRequest.");

            if (enableCachingForOptions.IsSet && enableCachingForOptions.Value == null)
                throw new ArgumentNullException(nameof(enableCachingForOptions), "Property is not nullable for class ApplicationCachePutRequest.");

            if (enableStaleCache.IsSet && enableStaleCache.Value == null)
                throw new ArgumentNullException(nameof(enableStaleCache), "Property is not nullable for class ApplicationCachePutRequest.");

            if (l2Region.IsSet && l2Region.Value == null)
                throw new ArgumentNullException(nameof(l2Region), "Property is not nullable for class ApplicationCachePutRequest.");

            return new ApplicationCachePutRequest(name.Value!, browserCacheSettings, browserCacheSettingsMaximumTtl, cdnCacheSettings, cdnCacheSettingsMaximumTtl, cacheByQueryString, queryStringFields, enableQueryStringSort, cacheByCookies, cookieNames, adaptiveDeliveryAction, deviceGroup, enableCachingForPost, l2CachingEnabled, isSliceConfigurationEnabled, isSliceEdgeCachingEnabled, isSliceL2CachingEnabled, sliceConfigurationRange, enableCachingForOptions, enableStaleCache, l2Region);
        }

        /// <summary>
        /// Serializes a <see cref="ApplicationCachePutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationCachePutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ApplicationCachePutRequest applicationCachePutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, applicationCachePutRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ApplicationCachePutRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="applicationCachePutRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ApplicationCachePutRequest applicationCachePutRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (applicationCachePutRequest.Name == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.Name), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.BrowserCacheSettingsOption.IsSet && applicationCachePutRequest.BrowserCacheSettings == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.BrowserCacheSettings), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.CdnCacheSettingsOption.IsSet && applicationCachePutRequest.CdnCacheSettings == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.CdnCacheSettings), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.CacheByQueryStringOption.IsSet && applicationCachePutRequest.CacheByQueryString == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.CacheByQueryString), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.QueryStringFieldsOption.IsSet && applicationCachePutRequest.QueryStringFields == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.QueryStringFields), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.CacheByCookiesOption.IsSet && applicationCachePutRequest.CacheByCookies == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.CacheByCookies), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.CookieNamesOption.IsSet && applicationCachePutRequest.CookieNames == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.CookieNames), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.AdaptiveDeliveryActionOption.IsSet && applicationCachePutRequest.AdaptiveDeliveryAction == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.AdaptiveDeliveryAction), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.DeviceGroupOption.IsSet && applicationCachePutRequest.DeviceGroup == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.DeviceGroup), "Property is required for class ApplicationCachePutRequest.");

            if (applicationCachePutRequest.L2RegionOption.IsSet && applicationCachePutRequest.L2Region == null)
                throw new ArgumentNullException(nameof(applicationCachePutRequest.L2Region), "Property is required for class ApplicationCachePutRequest.");

            writer.WriteString("name", applicationCachePutRequest.Name);

            if (applicationCachePutRequest.BrowserCacheSettingsOption.IsSet)
                writer.WriteString("browser_cache_settings", applicationCachePutRequest.BrowserCacheSettings);

            if (applicationCachePutRequest.BrowserCacheSettingsMaximumTtlOption.IsSet)
                writer.WriteNumber("browser_cache_settings_maximum_ttl", applicationCachePutRequest.BrowserCacheSettingsMaximumTtlOption.Value!.Value);

            if (applicationCachePutRequest.CdnCacheSettingsOption.IsSet)
                writer.WriteString("cdn_cache_settings", applicationCachePutRequest.CdnCacheSettings);

            if (applicationCachePutRequest.CdnCacheSettingsMaximumTtlOption.IsSet)
                writer.WriteNumber("cdn_cache_settings_maximum_ttl", applicationCachePutRequest.CdnCacheSettingsMaximumTtlOption.Value!.Value);

            if (applicationCachePutRequest.CacheByQueryStringOption.IsSet)
                writer.WriteString("cache_by_query_string", applicationCachePutRequest.CacheByQueryString);

            if (applicationCachePutRequest.QueryStringFieldsOption.IsSet)
            {
                writer.WritePropertyName("query_string_fields");
                JsonSerializer.Serialize(writer, applicationCachePutRequest.QueryStringFields, jsonSerializerOptions);
            }
            if (applicationCachePutRequest.EnableQueryStringSortOption.IsSet)
                writer.WriteBoolean("enable_query_string_sort", applicationCachePutRequest.EnableQueryStringSortOption.Value!.Value);

            if (applicationCachePutRequest.CacheByCookiesOption.IsSet)
                writer.WriteString("cache_by_cookies", applicationCachePutRequest.CacheByCookies);

            if (applicationCachePutRequest.CookieNamesOption.IsSet)
            {
                writer.WritePropertyName("cookie_names");
                JsonSerializer.Serialize(writer, applicationCachePutRequest.CookieNames, jsonSerializerOptions);
            }
            if (applicationCachePutRequest.AdaptiveDeliveryActionOption.IsSet)
                writer.WriteString("adaptive_delivery_action", applicationCachePutRequest.AdaptiveDeliveryAction);

            if (applicationCachePutRequest.DeviceGroupOption.IsSet)
            {
                writer.WritePropertyName("device_group");
                JsonSerializer.Serialize(writer, applicationCachePutRequest.DeviceGroup, jsonSerializerOptions);
            }
            if (applicationCachePutRequest.EnableCachingForPostOption.IsSet)
                writer.WriteBoolean("enable_caching_for_post", applicationCachePutRequest.EnableCachingForPostOption.Value!.Value);

            if (applicationCachePutRequest.L2CachingEnabledOption.IsSet)
                writer.WriteBoolean("l2_caching_enabled", applicationCachePutRequest.L2CachingEnabledOption.Value!.Value);

            if (applicationCachePutRequest.IsSliceConfigurationEnabledOption.IsSet)
                writer.WriteBoolean("is_slice_configuration_enabled", applicationCachePutRequest.IsSliceConfigurationEnabledOption.Value!.Value);

            if (applicationCachePutRequest.IsSliceEdgeCachingEnabledOption.IsSet)
                writer.WriteBoolean("is_slice_edge_caching_enabled", applicationCachePutRequest.IsSliceEdgeCachingEnabledOption.Value!.Value);

            if (applicationCachePutRequest.IsSliceL2CachingEnabledOption.IsSet)
                writer.WriteBoolean("is_slice_l2_caching_enabled", applicationCachePutRequest.IsSliceL2CachingEnabledOption.Value!.Value);

            if (applicationCachePutRequest.SliceConfigurationRangeOption.IsSet)
                writer.WriteNumber("slice_configuration_range", applicationCachePutRequest.SliceConfigurationRangeOption.Value!.Value);

            if (applicationCachePutRequest.EnableCachingForOptionsOption.IsSet)
                writer.WriteBoolean("enable_caching_for_options", applicationCachePutRequest.EnableCachingForOptionsOption.Value!.Value);

            if (applicationCachePutRequest.EnableStaleCacheOption.IsSet)
                writer.WriteBoolean("enable_stale_cache", applicationCachePutRequest.EnableStaleCacheOption.Value!.Value);

            if (applicationCachePutRequest.L2RegionOption.IsSet)
                writer.WriteString("l2_region", applicationCachePutRequest.L2Region);
        }
    }
}
