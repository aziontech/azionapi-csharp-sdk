/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = data_streaming.Client.OpenAPIDateConverter;
using System.Reflection;

namespace data_streaming.Model
{
    /// <summary>
    /// CreateNewDataStreamingRequest
    /// </summary>
    [JsonConverter(typeof(CreateNewDataStreamingRequestJsonConverter))]
    [DataContract(Name = "CreateNewDataStreaming_request")]
    public partial class CreateNewDataStreamingRequest : AbstractOpenAPISchema, IEquatable<CreateNewDataStreamingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewDataStreamingRequest" /> class
        /// with the <see cref="DataStreamingPostBody" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of DataStreamingPostBody.</param>
        public CreateNewDataStreamingRequest(DataStreamingPostBody actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewDataStreamingRequest" /> class
        /// with the <see cref="StandardDataStreamingPostBody" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of StandardDataStreamingPostBody.</param>
        public CreateNewDataStreamingRequest(StandardDataStreamingPostBody actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewDataStreamingRequest" /> class
        /// with the <see cref="CustomDataStreamingPostBody" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of CustomDataStreamingPostBody.</param>
        public CreateNewDataStreamingRequest(CustomDataStreamingPostBody actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType= "oneOf";
            this.ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }


        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get
            {
                return _actualInstance;
            }
            set
            {
                if (value.GetType() == typeof(CustomDataStreamingPostBody))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(DataStreamingPostBody))
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(StandardDataStreamingPostBody))
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException("Invalid instance found. Must be the following types: CustomDataStreamingPostBody, DataStreamingPostBody, StandardDataStreamingPostBody");
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `DataStreamingPostBody`. If the actual instance is not `DataStreamingPostBody`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of DataStreamingPostBody</returns>
        public DataStreamingPostBody GetDataStreamingPostBody()
        {
            return (DataStreamingPostBody)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `StandardDataStreamingPostBody`. If the actual instance is not `StandardDataStreamingPostBody`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of StandardDataStreamingPostBody</returns>
        public StandardDataStreamingPostBody GetStandardDataStreamingPostBody()
        {
            return (StandardDataStreamingPostBody)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `CustomDataStreamingPostBody`. If the actual instance is not `CustomDataStreamingPostBody`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of CustomDataStreamingPostBody</returns>
        public CustomDataStreamingPostBody GetCustomDataStreamingPostBody()
        {
            return (CustomDataStreamingPostBody)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateNewDataStreamingRequest {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this.ActualInstance, CreateNewDataStreamingRequest.SerializerSettings);
        }

        /// <summary>
        /// Converts the JSON string into an instance of CreateNewDataStreamingRequest
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of CreateNewDataStreamingRequest</returns>
        public static CreateNewDataStreamingRequest FromJson(string jsonString)
        {
            CreateNewDataStreamingRequest newCreateNewDataStreamingRequest = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newCreateNewDataStreamingRequest;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(CustomDataStreamingPostBody).GetProperty("AdditionalProperties") == null)
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<CustomDataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.SerializerSettings));
                }
                else
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<CustomDataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("CustomDataStreamingPostBody");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into CustomDataStreamingPostBody: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(DataStreamingPostBody).GetProperty("AdditionalProperties") == null)
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<DataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.SerializerSettings));
                }
                else
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<DataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("DataStreamingPostBody");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into DataStreamingPostBody: {1}", jsonString, exception.ToString()));
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(StandardDataStreamingPostBody).GetProperty("AdditionalProperties") == null)
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<StandardDataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.SerializerSettings));
                }
                else
                {
                    newCreateNewDataStreamingRequest = new CreateNewDataStreamingRequest(JsonConvert.DeserializeObject<StandardDataStreamingPostBody>(jsonString, CreateNewDataStreamingRequest.AdditionalPropertiesSerializerSettings));
                }
                matchedTypes.Add("StandardDataStreamingPostBody");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into StandardDataStreamingPostBody: {1}", jsonString, exception.ToString()));
            }

            if (match == 0)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
            }
            else if (match > 1)
            {
                throw new InvalidDataException("The JSON string `" + jsonString + "` incorrectly matches more than one schema (should be exactly one match): " + matchedTypes);
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newCreateNewDataStreamingRequest;
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateNewDataStreamingRequest);
        }

        /// <summary>
        /// Returns true if CreateNewDataStreamingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateNewDataStreamingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateNewDataStreamingRequest input)
        {
            if (input == null)
                return false;

            return this.ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ActualInstance != null)
                    hashCode = hashCode * 59 + this.ActualInstance.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for CreateNewDataStreamingRequest
    /// </summary>
    public class CreateNewDataStreamingRequestJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue((string)(typeof(CreateNewDataStreamingRequest).GetMethod("ToJson").Invoke(value, null)));
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            if(reader.TokenType != JsonToken.Null)
            {
                return CreateNewDataStreamingRequest.FromJson(JObject.Load(reader).ToString(Formatting.None));
            }
            return null;
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }

}
