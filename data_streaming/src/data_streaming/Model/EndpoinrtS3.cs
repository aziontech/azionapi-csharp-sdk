/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = data_streaming.Client.OpenAPIDateConverter;

namespace data_streaming.Model
{
    /// <summary>
    /// EndpoinrtS3
    /// </summary>
    [DataContract(Name = "Endpoinrt_S3")]
    public partial class EndpoinrtS3 : IEquatable<EndpoinrtS3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EndpoinrtS3" /> class.
        /// </summary>
        /// <param name="endpointType">endpointType.</param>
        /// <param name="accessKey">accessKey.</param>
        /// <param name="region">region.</param>
        /// <param name="objectKeyPrefix">objectKeyPrefix.</param>
        /// <param name="bucketName">bucketName.</param>
        /// <param name="contentType">contentType.</param>
        /// <param name="hostUrl">hostUrl.</param>
        /// <param name="secretKey">secretKey.</param>
        public EndpoinrtS3(string endpointType = default(string), string accessKey = default(string), string region = default(string), string objectKeyPrefix = default(string), string bucketName = default(string), string contentType = default(string), string hostUrl = default(string), string secretKey = default(string))
        {
            this.EndpointType = endpointType;
            this.AccessKey = accessKey;
            this.Region = region;
            this.ObjectKeyPrefix = objectKeyPrefix;
            this.BucketName = bucketName;
            this.ContentType = contentType;
            this.HostUrl = hostUrl;
            this.SecretKey = secretKey;
        }

        /// <summary>
        /// Gets or Sets EndpointType
        /// </summary>
        /// <example>s3</example>
        [DataMember(Name = "endpoint_type", EmitDefaultValue = false)]
        public string EndpointType { get; set; }

        /// <summary>
        /// Gets or Sets AccessKey
        /// </summary>
        [DataMember(Name = "access_key", EmitDefaultValue = false)]
        public string AccessKey { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public string Region { get; set; }

        /// <summary>
        /// Gets or Sets ObjectKeyPrefix
        /// </summary>
        [DataMember(Name = "object_key_prefix", EmitDefaultValue = false)]
        public string ObjectKeyPrefix { get; set; }

        /// <summary>
        /// Gets or Sets BucketName
        /// </summary>
        [DataMember(Name = "bucket_name", EmitDefaultValue = false)]
        public string BucketName { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "content_type", EmitDefaultValue = false)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets HostUrl
        /// </summary>
        [DataMember(Name = "host_url", EmitDefaultValue = false)]
        public string HostUrl { get; set; }

        /// <summary>
        /// Gets or Sets SecretKey
        /// </summary>
        [DataMember(Name = "secret_key", EmitDefaultValue = false)]
        public string SecretKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EndpoinrtS3 {\n");
            sb.Append("  EndpointType: ").Append(EndpointType).Append("\n");
            sb.Append("  AccessKey: ").Append(AccessKey).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  ObjectKeyPrefix: ").Append(ObjectKeyPrefix).Append("\n");
            sb.Append("  BucketName: ").Append(BucketName).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  HostUrl: ").Append(HostUrl).Append("\n");
            sb.Append("  SecretKey: ").Append(SecretKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EndpoinrtS3);
        }

        /// <summary>
        /// Returns true if EndpoinrtS3 instances are equal
        /// </summary>
        /// <param name="input">Instance of EndpoinrtS3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EndpoinrtS3 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.EndpointType == input.EndpointType ||
                    (this.EndpointType != null &&
                    this.EndpointType.Equals(input.EndpointType))
                ) && 
                (
                    this.AccessKey == input.AccessKey ||
                    (this.AccessKey != null &&
                    this.AccessKey.Equals(input.AccessKey))
                ) && 
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) && 
                (
                    this.ObjectKeyPrefix == input.ObjectKeyPrefix ||
                    (this.ObjectKeyPrefix != null &&
                    this.ObjectKeyPrefix.Equals(input.ObjectKeyPrefix))
                ) && 
                (
                    this.BucketName == input.BucketName ||
                    (this.BucketName != null &&
                    this.BucketName.Equals(input.BucketName))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.HostUrl == input.HostUrl ||
                    (this.HostUrl != null &&
                    this.HostUrl.Equals(input.HostUrl))
                ) && 
                (
                    this.SecretKey == input.SecretKey ||
                    (this.SecretKey != null &&
                    this.SecretKey.Equals(input.SecretKey))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EndpointType != null)
                {
                    hashCode = (hashCode * 59) + this.EndpointType.GetHashCode();
                }
                if (this.AccessKey != null)
                {
                    hashCode = (hashCode * 59) + this.AccessKey.GetHashCode();
                }
                if (this.Region != null)
                {
                    hashCode = (hashCode * 59) + this.Region.GetHashCode();
                }
                if (this.ObjectKeyPrefix != null)
                {
                    hashCode = (hashCode * 59) + this.ObjectKeyPrefix.GetHashCode();
                }
                if (this.BucketName != null)
                {
                    hashCode = (hashCode * 59) + this.BucketName.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                if (this.HostUrl != null)
                {
                    hashCode = (hashCode * 59) + this.HostUrl.GetHashCode();
                }
                if (this.SecretKey != null)
                {
                    hashCode = (hashCode * 59) + this.SecretKey.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
