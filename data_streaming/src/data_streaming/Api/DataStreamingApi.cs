/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using data_streaming.Client;
using data_streaming.Model;

namespace data_streaming.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new data streaming
        /// </summary>
        /// <remarks>
        /// Create a new data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        CreateNewDataStreaming201Response CreateNewDataStreaming(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new data streaming
        /// </summary>
        /// <remarks>
        /// Create a new data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        ApiResponse<CreateNewDataStreaming201Response> CreateNewDataStreamingWithHttpInfo(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);
        /// <summary>
        /// Delete data streaming
        /// </summary>
        /// <remarks>
        /// Use the DELETE method to remove a data streaming from your account. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteDataStreamingById(int dataStreamingId, int operationIndex = 0);

        /// <summary>
        /// Delete data streaming
        /// </summary>
        /// <remarks>
        /// Use the DELETE method to remove a data streaming from your account. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDataStreamingByIdWithHttpInfo(int dataStreamingId, int operationIndex = 0);
        /// <summary>
        /// Edit data streaming
        /// </summary>
        /// <remarks>
        /// Use the PATCH method to change only select settings of your data streaming. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        CreateNewDataStreaming201Response EditDataStreamingById(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);

        /// <summary>
        /// Edit data streaming
        /// </summary>
        /// <remarks>
        /// Use the PATCH method to change only select settings of your data streaming. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        ApiResponse<CreateNewDataStreaming201Response> EditDataStreamingByIdWithHttpInfo(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);
        /// <summary>
        /// Get expecific data streaming by Data Streaming ID
        /// </summary>
        /// <remarks>
        /// Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingsById</returns>
        DataStreamingsById ListDataStreamingById(int dataStreamingId, int operationIndex = 0);

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID
        /// </summary>
        /// <remarks>
        /// Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingsById</returns>
        ApiResponse<DataStreamingsById> ListDataStreamingByIdWithHttpInfo(int dataStreamingId, int operationIndex = 0);
        /// <summary>
        /// List all exist data streamings
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingResponseWithResults</returns>
        DataStreamingResponseWithResults ListDataStreamings(int operationIndex = 0);

        /// <summary>
        /// List all exist data streamings
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingResponseWithResults</returns>
        ApiResponse<DataStreamingResponseWithResults> ListDataStreamingsWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Overwrite data streaming
        /// </summary>
        /// <remarks>
        /// Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        CreateNewDataStreaming201Response OverwriteDataStreamingById(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);

        /// <summary>
        /// Overwrite data streaming
        /// </summary>
        /// <remarks>
        /// Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        ApiResponse<CreateNewDataStreaming201Response> OverwriteDataStreamingByIdWithHttpInfo(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new data streaming
        /// </summary>
        /// <remarks>
        /// Create a new data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        System.Threading.Tasks.Task<CreateNewDataStreaming201Response> CreateNewDataStreamingAsync(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new data streaming
        /// </summary>
        /// <remarks>
        /// Create a new data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNewDataStreaming201Response>> CreateNewDataStreamingWithHttpInfoAsync(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete data streaming
        /// </summary>
        /// <remarks>
        /// Use the DELETE method to remove a data streaming from your account. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDataStreamingByIdAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete data streaming
        /// </summary>
        /// <remarks>
        /// Use the DELETE method to remove a data streaming from your account. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Edit data streaming
        /// </summary>
        /// <remarks>
        /// Use the PATCH method to change only select settings of your data streaming. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        System.Threading.Tasks.Task<CreateNewDataStreaming201Response> EditDataStreamingByIdAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Edit data streaming
        /// </summary>
        /// <remarks>
        /// Use the PATCH method to change only select settings of your data streaming. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNewDataStreaming201Response>> EditDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get expecific data streaming by Data Streaming ID
        /// </summary>
        /// <remarks>
        /// Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingsById</returns>
        System.Threading.Tasks.Task<DataStreamingsById> ListDataStreamingByIdAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID
        /// </summary>
        /// <remarks>
        /// Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingsById)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataStreamingsById>> ListDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all exist data streamings
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingResponseWithResults</returns>
        System.Threading.Tasks.Task<DataStreamingResponseWithResults> ListDataStreamingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all exist data streamings
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingResponseWithResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataStreamingResponseWithResults>> ListDataStreamingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overwrite data streaming
        /// </summary>
        /// <remarks>
        /// Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        System.Threading.Tasks.Task<CreateNewDataStreaming201Response> OverwriteDataStreamingByIdAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overwrite data streaming
        /// </summary>
        /// <remarks>
        /// Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateNewDataStreaming201Response>> OverwriteDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingApi : IDataStreamingApiSync, IDataStreamingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataStreamingApi : IDataStreamingApi
    {
        private data_streaming.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataStreamingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataStreamingApi(string basePath)
        {
            this.Configuration = data_streaming.Client.Configuration.MergeConfigurations(
                data_streaming.Client.GlobalConfiguration.Instance,
                new data_streaming.Client.Configuration { BasePath = basePath }
            );
            this.Client = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataStreamingApi(data_streaming.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = data_streaming.Client.Configuration.MergeConfigurations(
                data_streaming.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataStreamingApi(data_streaming.Client.ISynchronousClient client, data_streaming.Client.IAsynchronousClient asyncClient, data_streaming.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public data_streaming.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public data_streaming.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public data_streaming.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public data_streaming.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new data streaming Create a new data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        public CreateNewDataStreaming201Response CreateNewDataStreaming(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = CreateNewDataStreamingWithHttpInfo(createNewDataStreamingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new data streaming Create a new data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        public data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> CreateNewDataStreamingWithHttpInfo(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->CreateNewDataStreaming");
            }

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.CreateNewDataStreaming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateNewDataStreaming201Response>("/data_streaming/streamings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewDataStreaming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new data streaming Create a new data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        public async System.Threading.Tasks.Task<CreateNewDataStreaming201Response> CreateNewDataStreamingAsync(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = await CreateNewDataStreamingWithHttpInfoAsync(createNewDataStreamingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new data streaming Create a new data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response>> CreateNewDataStreamingWithHttpInfoAsync(CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->CreateNewDataStreaming");
            }


            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.CreateNewDataStreaming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateNewDataStreaming201Response>("/data_streaming/streamings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateNewDataStreaming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete data streaming Use the DELETE method to remove a data streaming from your account. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteDataStreamingById(int dataStreamingId, int operationIndex = 0)
        {
            DeleteDataStreamingByIdWithHttpInfo(dataStreamingId);
        }

        /// <summary>
        /// Delete data streaming Use the DELETE method to remove a data streaming from your account. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public data_streaming.Client.ApiResponse<Object> DeleteDataStreamingByIdWithHttpInfo(int dataStreamingId, int operationIndex = 0)
        {
            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter

            localVarRequestOptions.Operation = "DataStreamingApi.DeleteDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete data streaming Use the DELETE method to remove a data streaming from your account. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDataStreamingByIdAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteDataStreamingByIdWithHttpInfoAsync(dataStreamingId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete data streaming Use the DELETE method to remove a data streaming from your account. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<Object>> DeleteDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter

            localVarRequestOptions.Operation = "DataStreamingApi.DeleteDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit data streaming Use the PATCH method to change only select settings of your data streaming. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        public CreateNewDataStreaming201Response EditDataStreamingById(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = EditDataStreamingByIdWithHttpInfo(dataStreamingId, createNewDataStreamingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit data streaming Use the PATCH method to change only select settings of your data streaming. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        public data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> EditDataStreamingByIdWithHttpInfo(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->EditDataStreamingById");
            }

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter
            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.EditDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CreateNewDataStreaming201Response>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Edit data streaming Use the PATCH method to change only select settings of your data streaming. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        public async System.Threading.Tasks.Task<CreateNewDataStreaming201Response> EditDataStreamingByIdAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = await EditDataStreamingByIdWithHttpInfoAsync(dataStreamingId, createNewDataStreamingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edit data streaming Use the PATCH method to change only select settings of your data streaming. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response>> EditDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->EditDataStreamingById");
            }


            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter
            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.EditDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CreateNewDataStreaming201Response>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EditDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingsById</returns>
        public DataStreamingsById ListDataStreamingById(int dataStreamingId, int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<DataStreamingsById> localVarResponse = ListDataStreamingByIdWithHttpInfo(dataStreamingId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingsById</returns>
        public data_streaming.Client.ApiResponse<DataStreamingsById> ListDataStreamingByIdWithHttpInfo(int dataStreamingId, int operationIndex = 0)
        {
            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter

            localVarRequestOptions.Operation = "DataStreamingApi.ListDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataStreamingsById>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingsById</returns>
        public async System.Threading.Tasks.Task<DataStreamingsById> ListDataStreamingByIdAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<DataStreamingsById> localVarResponse = await ListDataStreamingByIdWithHttpInfoAsync(dataStreamingId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get expecific data streaming by Data Streaming ID Use the GET method and add the data streaming&#39;s ID to the URI of the request to get more data on a specific data streaming.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingsById)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<DataStreamingsById>> ListDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter

            localVarRequestOptions.Operation = "DataStreamingApi.ListDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataStreamingsById>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all exist data streamings Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingResponseWithResults</returns>
        public DataStreamingResponseWithResults ListDataStreamings(int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<DataStreamingResponseWithResults> localVarResponse = ListDataStreamingsWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all exist data streamings Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingResponseWithResults</returns>
        public data_streaming.Client.ApiResponse<DataStreamingResponseWithResults> ListDataStreamingsWithHttpInfo(int operationIndex = 0)
        {
            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DataStreamingApi.ListDataStreamings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataStreamingResponseWithResults>("/data_streaming/streamings", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreamings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all exist data streamings Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingResponseWithResults</returns>
        public async System.Threading.Tasks.Task<DataStreamingResponseWithResults> ListDataStreamingsAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<DataStreamingResponseWithResults> localVarResponse = await ListDataStreamingsWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all exist data streamings Use the GET method to list all data streamings, both active and inactive, and its properties.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingResponseWithResults)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<DataStreamingResponseWithResults>> ListDataStreamingsWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "DataStreamingApi.ListDataStreamings";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataStreamingResponseWithResults>("/data_streaming/streamings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreamings", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite data streaming Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateNewDataStreaming201Response</returns>
        public CreateNewDataStreaming201Response OverwriteDataStreamingById(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = OverwriteDataStreamingByIdWithHttpInfo(dataStreamingId, createNewDataStreamingRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite data streaming Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateNewDataStreaming201Response</returns>
        public data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> OverwriteDataStreamingByIdWithHttpInfo(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->OverwriteDataStreamingById");
            }

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter
            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.OverwriteDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CreateNewDataStreaming201Response>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverwriteDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite data streaming Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateNewDataStreaming201Response</returns>
        public async System.Threading.Tasks.Task<CreateNewDataStreaming201Response> OverwriteDataStreamingByIdAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response> localVarResponse = await OverwriteDataStreamingByIdWithHttpInfoAsync(dataStreamingId, createNewDataStreamingRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite data streaming Use the PUT method to overwrite the data streaming. Although  you can change a single property using the PUT method, you must pass all fields for the request to be completed. 
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dataStreamingId"></param>
        /// <param name="createNewDataStreamingRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateNewDataStreaming201Response)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<CreateNewDataStreaming201Response>> OverwriteDataStreamingByIdWithHttpInfoAsync(int dataStreamingId, CreateNewDataStreamingRequest createNewDataStreamingRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNewDataStreamingRequest' is set
            if (createNewDataStreamingRequest == null)
            {
                throw new data_streaming.Client.ApiException(400, "Missing required parameter 'createNewDataStreamingRequest' when calling DataStreamingApi->OverwriteDataStreamingById");
            }


            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("data_streaming_id", data_streaming.Client.ClientUtils.ParameterToString(dataStreamingId)); // path parameter
            localVarRequestOptions.Data = createNewDataStreamingRequest;

            localVarRequestOptions.Operation = "DataStreamingApi.OverwriteDataStreamingById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CreateNewDataStreaming201Response>("/data_streaming/streamings/{data_streaming_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OverwriteDataStreamingById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
