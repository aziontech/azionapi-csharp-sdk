/*
 * Data Streaming - OpenAPI
 *
 * The Data Streaming API allows you to manage your existing data streamings and templates. Data Streaming allows you to feed your stream processing, SIEM, and big data platforms with the event logs from your applications on Azion in real time. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using data_streaming.Client;
using data_streaming.Model;

namespace data_streaming.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingDomainApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all domains used on data streaming
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingsDomainResponse</returns>
        DataStreamingsDomainResponse ListDataStreaming(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0);

        /// <summary>
        /// List all domains used on data streaming
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingsDomainResponse</returns>
        ApiResponse<DataStreamingsDomainResponse> ListDataStreamingWithHttpInfo(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingDomainApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all domains used on data streaming
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingsDomainResponse</returns>
        System.Threading.Tasks.Task<DataStreamingsDomainResponse> ListDataStreamingAsync(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all domains used on data streaming
        /// </summary>
        /// <remarks>
        /// Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </remarks>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingsDomainResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DataStreamingsDomainResponse>> ListDataStreamingWithHttpInfoAsync(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDataStreamingDomainApi : IDataStreamingDomainApiSync, IDataStreamingDomainApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DataStreamingDomainApi : IDataStreamingDomainApi
    {
        private data_streaming.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingDomainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataStreamingDomainApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingDomainApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DataStreamingDomainApi(string basePath)
        {
            this.Configuration = data_streaming.Client.Configuration.MergeConfigurations(
                data_streaming.Client.GlobalConfiguration.Instance,
                new data_streaming.Client.Configuration { BasePath = basePath }
            );
            this.Client = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingDomainApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DataStreamingDomainApi(data_streaming.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = data_streaming.Client.Configuration.MergeConfigurations(
                data_streaming.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new data_streaming.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DataStreamingDomainApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DataStreamingDomainApi(data_streaming.Client.ISynchronousClient client, data_streaming.Client.IAsynchronousClient asyncClient, data_streaming.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = data_streaming.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public data_streaming.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public data_streaming.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public data_streaming.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public data_streaming.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all domains used on data streaming Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DataStreamingsDomainResponse</returns>
        public DataStreamingsDomainResponse ListDataStreaming(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0)
        {
            data_streaming.Client.ApiResponse<DataStreamingsDomainResponse> localVarResponse = ListDataStreamingWithHttpInfo(name, streamingId, selected);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all domains used on data streaming Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DataStreamingsDomainResponse</returns>
        public data_streaming.Client.ApiResponse<DataStreamingsDomainResponse> ListDataStreamingWithHttpInfo(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0)
        {
            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (streamingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "streaming_id", streamingId));
            }
            if (selected != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "selected", selected));
            }

            localVarRequestOptions.Operation = "DataStreamingDomainApi.ListDataStreaming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DataStreamingsDomainResponse>("/data_streaming/domains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreaming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all domains used on data streaming Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DataStreamingsDomainResponse</returns>
        public async System.Threading.Tasks.Task<DataStreamingsDomainResponse> ListDataStreamingAsync(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            data_streaming.Client.ApiResponse<DataStreamingsDomainResponse> localVarResponse = await ListDataStreamingWithHttpInfoAsync(name, streamingId, selected, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all domains used on data streaming Use the GET method to list all available domains that can be used on Data Streaming operations.
        /// </summary>
        /// <exception cref="data_streaming.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Domain&#39;s name in data streaming (optional)</param>
        /// <param name="streamingId"> (optional)</param>
        /// <param name="selected"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DataStreamingsDomainResponse)</returns>
        public async System.Threading.Tasks.Task<data_streaming.Client.ApiResponse<DataStreamingsDomainResponse>> ListDataStreamingWithHttpInfoAsync(string? name = default(string?), long? streamingId = default(long?), bool? selected = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            data_streaming.Client.RequestOptions localVarRequestOptions = new data_streaming.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = data_streaming.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = data_streaming.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (streamingId != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "streaming_id", streamingId));
            }
            if (selected != null)
            {
                localVarRequestOptions.QueryParameters.Add(data_streaming.Client.ClientUtils.ParameterToMultiMap("", "selected", selected));
            }

            localVarRequestOptions.Operation = "DataStreamingDomainApi.ListDataStreaming";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DataStreamingsDomainResponse>("/data_streaming/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDataStreaming", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
