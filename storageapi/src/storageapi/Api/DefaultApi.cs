/*
 * Storage API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using storageapi.Client;

namespace storageapi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// /storage/:version_id/delete
        /// </summary>
        /// <remarks>
        /// Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteVersion(string versionId, int operationIndex = 0);

        /// <summary>
        /// /storage/:version_id/delete
        /// </summary>
        /// <remarks>
        /// Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteVersionWithHttpInfo(string versionId, int operationIndex = 0);
        /// <summary>
        /// /storage/:version_id
        /// </summary>
        /// <remarks>
        /// Upload file and transfer to remote storage
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        Object StorageVersionIdPost(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0);

        /// <summary>
        /// /storage/:version_id
        /// </summary>
        /// <remarks>
        /// Upload file and transfer to remote storage
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> StorageVersionIdPostWithHttpInfo(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// /storage/:version_id/delete
        /// </summary>
        /// <remarks>
        /// Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteVersionAsync(string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /storage/:version_id/delete
        /// </summary>
        /// <remarks>
        /// Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteVersionWithHttpInfoAsync(string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /storage/:version_id
        /// </summary>
        /// <remarks>
        /// Upload file and transfer to remote storage
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> StorageVersionIdPostAsync(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /storage/:version_id
        /// </summary>
        /// <remarks>
        /// Upload file and transfer to remote storage
        /// </remarks>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StorageVersionIdPostWithHttpInfoAsync(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private storageapi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = storageapi.Client.Configuration.MergeConfigurations(
                storageapi.Client.GlobalConfiguration.Instance,
                new storageapi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new storageapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storageapi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = storageapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(storageapi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = storageapi.Client.Configuration.MergeConfigurations(
                storageapi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new storageapi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storageapi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = storageapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(storageapi.Client.ISynchronousClient client, storageapi.Client.IAsynchronousClient asyncClient, storageapi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = storageapi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public storageapi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public storageapi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public storageapi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public storageapi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// /storage/:version_id/delete Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteVersion(string versionId, int operationIndex = 0)
        {
            DeleteVersionWithHttpInfo(versionId);
        }

        /// <summary>
        /// /storage/:version_id/delete Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public storageapi.Client.ApiResponse<Object> DeleteVersionWithHttpInfo(string versionId, int operationIndex = 0)
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'versionId' when calling DefaultApi->DeleteVersion");
            }

            storageapi.Client.RequestOptions localVarRequestOptions = new storageapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storageapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storageapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("version_id", storageapi.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/storage/{version_id}/delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /storage/:version_id/delete Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteVersionAsync(string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteVersionWithHttpInfoAsync(versionId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// /storage/:version_id/delete Delete a version. A version is just um path prefix/sub-namespace for a set of files.
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="versionId">The version identifier</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<storageapi.Client.ApiResponse<Object>> DeleteVersionWithHttpInfoAsync(string versionId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'versionId' when calling DefaultApi->DeleteVersion");
            }


            storageapi.Client.RequestOptions localVarRequestOptions = new storageapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storageapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storageapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("version_id", storageapi.Client.ClientUtils.ParameterToString(versionId)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.DeleteVersion";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/storage/{version_id}/delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteVersion", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /storage/:version_id Upload file and transfer to remote storage
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>Object</returns>
        public Object StorageVersionIdPost(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0)
        {
            storageapi.Client.ApiResponse<Object> localVarResponse = StorageVersionIdPostWithHttpInfo(xAzionStaticPath, versionId, contentType, body);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /storage/:version_id Upload file and transfer to remote storage
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object</returns>
        public storageapi.Client.ApiResponse<Object> StorageVersionIdPostWithHttpInfo(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0)
        {
            // verify the required parameter 'xAzionStaticPath' is set
            if (xAzionStaticPath == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'xAzionStaticPath' when calling DefaultApi->StorageVersionIdPost");
            }

            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'versionId' when calling DefaultApi->StorageVersionIdPost");
            }

            storageapi.Client.RequestOptions localVarRequestOptions = new storageapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storageapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storageapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("version_id", storageapi.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", storageapi.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Azion-Static-Path", storageapi.Client.ClientUtils.ParameterToString(xAzionStaticPath)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.StorageVersionIdPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/storage/{version_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageVersionIdPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /storage/:version_id Upload file and transfer to remote storage
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> StorageVersionIdPostAsync(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storageapi.Client.ApiResponse<Object> localVarResponse = await StorageVersionIdPostWithHttpInfoAsync(xAzionStaticPath, versionId, contentType, body, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /storage/:version_id Upload file and transfer to remote storage
        /// </summary>
        /// <exception cref="storageapi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="xAzionStaticPath">Required in order to get the path and file name. i.e.: assets/css/main.css</param>
        /// <param name="versionId"></param>
        /// <param name="contentType">The content type of the file (Example: text/plain). (optional, default to &quot;b2/x-auto&quot;)</param>
        /// <param name="body"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<storageapi.Client.ApiResponse<Object>> StorageVersionIdPostWithHttpInfoAsync(string xAzionStaticPath, string versionId, string contentType = default(string), System.IO.Stream body = default(System.IO.Stream), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'xAzionStaticPath' is set
            if (xAzionStaticPath == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'xAzionStaticPath' when calling DefaultApi->StorageVersionIdPost");
            }

            // verify the required parameter 'versionId' is set
            if (versionId == null)
            {
                throw new storageapi.Client.ApiException(400, "Missing required parameter 'versionId' when calling DefaultApi->StorageVersionIdPost");
            }


            storageapi.Client.RequestOptions localVarRequestOptions = new storageapi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storageapi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storageapi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("version_id", storageapi.Client.ClientUtils.ParameterToString(versionId)); // path parameter
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", storageapi.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.HeaderParameters.Add("X-Azion-Static-Path", storageapi.Client.ClientUtils.ParameterToString(xAzionStaticPath)); // header parameter
            localVarRequestOptions.Data = body;

            localVarRequestOptions.Operation = "DefaultApi.StorageVersionIdPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/storage/{version_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageVersionIdPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
