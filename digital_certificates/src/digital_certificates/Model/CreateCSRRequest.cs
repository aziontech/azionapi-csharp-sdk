/*
 * Digital Certificates API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = digital_certificates.Client.OpenAPIDateConverter;

namespace digital_certificates.Model
{
    /// <summary>
    /// CreateCSRRequest
    /// </summary>
    [DataContract(Name = "createCSR_request")]
    public partial class CreateCSRRequest : IEquatable<CreateCSRRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCSRRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="commonName">commonName.</param>
        /// <param name="country">country.</param>
        /// <param name="state">state.</param>
        /// <param name="locality">locality.</param>
        /// <param name="organization">organization.</param>
        /// <param name="organizationUnity">organizationUnity.</param>
        /// <param name="email">email.</param>
        /// <param name="privateKeyType">privateKeyType.</param>
        /// <param name="sans">sans.</param>
        public CreateCSRRequest(string name = default(string), string commonName = default(string), string country = default(string), string state = default(string), string locality = default(string), string organization = default(string), string organizationUnity = default(string), string email = default(string), string privateKeyType = default(string), List<string> sans = default(List<string>))
        {
            this.Name = name;
            this.CommonName = commonName;
            this.Country = country;
            this.State = state;
            this.Locality = locality;
            this.Organization = organization;
            this.OrganizationUnity = organizationUnity;
            this.Email = email;
            this.PrivateKeyType = privateKeyType;
            this.Sans = sans;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CommonName
        /// </summary>
        [DataMember(Name = "common_name", EmitDefaultValue = false)]
        public string CommonName { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Locality
        /// </summary>
        [DataMember(Name = "locality", EmitDefaultValue = false)]
        public string Locality { get; set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [DataMember(Name = "organization", EmitDefaultValue = false)]
        public string Organization { get; set; }

        /// <summary>
        /// Gets or Sets OrganizationUnity
        /// </summary>
        [DataMember(Name = "organization_unity", EmitDefaultValue = false)]
        public string OrganizationUnity { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets PrivateKeyType
        /// </summary>
        [DataMember(Name = "private_key_type", EmitDefaultValue = false)]
        public string PrivateKeyType { get; set; }

        /// <summary>
        /// Gets or Sets Sans
        /// </summary>
        [DataMember(Name = "sans", EmitDefaultValue = false)]
        public List<string> Sans { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCSRRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CommonName: ").Append(CommonName).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Locality: ").Append(Locality).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  OrganizationUnity: ").Append(OrganizationUnity).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PrivateKeyType: ").Append(PrivateKeyType).Append("\n");
            sb.Append("  Sans: ").Append(Sans).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateCSRRequest);
        }

        /// <summary>
        /// Returns true if CreateCSRRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateCSRRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateCSRRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CommonName == input.CommonName ||
                    (this.CommonName != null &&
                    this.CommonName.Equals(input.CommonName))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Locality == input.Locality ||
                    (this.Locality != null &&
                    this.Locality.Equals(input.Locality))
                ) && 
                (
                    this.Organization == input.Organization ||
                    (this.Organization != null &&
                    this.Organization.Equals(input.Organization))
                ) && 
                (
                    this.OrganizationUnity == input.OrganizationUnity ||
                    (this.OrganizationUnity != null &&
                    this.OrganizationUnity.Equals(input.OrganizationUnity))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.PrivateKeyType == input.PrivateKeyType ||
                    (this.PrivateKeyType != null &&
                    this.PrivateKeyType.Equals(input.PrivateKeyType))
                ) && 
                (
                    this.Sans == input.Sans ||
                    this.Sans != null &&
                    input.Sans != null &&
                    this.Sans.SequenceEqual(input.Sans)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.CommonName != null)
                {
                    hashCode = (hashCode * 59) + this.CommonName.GetHashCode();
                }
                if (this.Country != null)
                {
                    hashCode = (hashCode * 59) + this.Country.GetHashCode();
                }
                if (this.State != null)
                {
                    hashCode = (hashCode * 59) + this.State.GetHashCode();
                }
                if (this.Locality != null)
                {
                    hashCode = (hashCode * 59) + this.Locality.GetHashCode();
                }
                if (this.Organization != null)
                {
                    hashCode = (hashCode * 59) + this.Organization.GetHashCode();
                }
                if (this.OrganizationUnity != null)
                {
                    hashCode = (hashCode * 59) + this.OrganizationUnity.GetHashCode();
                }
                if (this.Email != null)
                {
                    hashCode = (hashCode * 59) + this.Email.GetHashCode();
                }
                if (this.PrivateKeyType != null)
                {
                    hashCode = (hashCode * 59) + this.PrivateKeyType.GetHashCode();
                }
                if (this.Sans != null)
                {
                    hashCode = (hashCode * 59) + this.Sans.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
