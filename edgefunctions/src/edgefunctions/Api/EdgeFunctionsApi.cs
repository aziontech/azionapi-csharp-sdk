/*
 * Edge Function API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using edgefunctions.Client;
using edgefunctions.Model;

namespace edgefunctions.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdgeFunctionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListEdgeFunctionResponse</returns>
        ListEdgeFunctionResponse EdgeFunctionsGet(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListEdgeFunctionResponse</returns>
        ApiResponse<ListEdgeFunctionResponse> EdgeFunctionsGetWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EdgeFunctionsIdDelete(long id, int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EdgeFunctionsIdDeleteWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        EdgeFunctionResponse EdgeFunctionsIdGet(long id, int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdGetWithHttpInfo(long id, int operationIndex = 0);
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        EdgeFunctionResponse EdgeFunctionsIdPatch(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdPatchWithHttpInfo(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0);
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        EdgeFunctionResponse EdgeFunctionsIdPut(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdPutWithHttpInfo(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0);
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        EdgeFunctionResponse EdgeFunctionsPost(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0);

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        ApiResponse<EdgeFunctionResponse> EdgeFunctionsPostWithHttpInfo(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdgeFunctionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEdgeFunctionResponse</returns>
        System.Threading.Tasks.Task<ListEdgeFunctionResponse> EdgeFunctionsGetAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListEdgeFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListEdgeFunctionResponse>> EdgeFunctionsGetWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EdgeFunctionsIdDeleteAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EdgeFunctionsIdDeleteWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdGetAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdGetWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdPatchAsync(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdPatchWithHttpInfoAsync(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdPutAsync(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdPutWithHttpInfoAsync(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsPostAsync(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// edge_functions
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFunctionResponse>> EdgeFunctionsPostWithHttpInfoAsync(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEdgeFunctionsApi : IEdgeFunctionsApiSync, IEdgeFunctionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EdgeFunctionsApi : IEdgeFunctionsApi
    {
        private edgefunctions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeFunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeFunctionsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeFunctionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EdgeFunctionsApi(string basePath)
        {
            this.Configuration = edgefunctions.Client.Configuration.MergeConfigurations(
                edgefunctions.Client.GlobalConfiguration.Instance,
                new edgefunctions.Client.Configuration { BasePath = basePath }
            );
            this.Client = new edgefunctions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgefunctions.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = edgefunctions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeFunctionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EdgeFunctionsApi(edgefunctions.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = edgefunctions.Client.Configuration.MergeConfigurations(
                edgefunctions.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new edgefunctions.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgefunctions.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = edgefunctions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EdgeFunctionsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EdgeFunctionsApi(edgefunctions.Client.ISynchronousClient client, edgefunctions.Client.IAsynchronousClient asyncClient, edgefunctions.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = edgefunctions.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public edgefunctions.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public edgefunctions.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public edgefunctions.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public edgefunctions.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListEdgeFunctionResponse</returns>
        public ListEdgeFunctionResponse EdgeFunctionsGet(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            edgefunctions.Client.ApiResponse<ListEdgeFunctionResponse> localVarResponse = EdgeFunctionsGetWithHttpInfo(page, pageSize, sort, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListEdgeFunctionResponse</returns>
        public edgefunctions.Client.ApiResponse<ListEdgeFunctionResponse> EdgeFunctionsGetWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0)
        {
            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3",
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListEdgeFunctionResponse>("/edge_functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEdgeFunctionResponse</returns>
        public async System.Threading.Tasks.Task<ListEdgeFunctionResponse> EdgeFunctionsGetAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefunctions.Client.ApiResponse<ListEdgeFunctionResponse> localVarResponse = await EdgeFunctionsGetWithHttpInfoAsync(page, pageSize, sort, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListEdgeFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<ListEdgeFunctionResponse>> EdgeFunctionsGetWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3",
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefunctions.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListEdgeFunctionResponse>("/edge_functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EdgeFunctionsIdDelete(long id, int operationIndex = 0)
        {
            EdgeFunctionsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public edgefunctions.Client.ApiResponse<Object> EdgeFunctionsIdDeleteWithHttpInfo(long id, int operationIndex = 0)
        {
            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_functions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EdgeFunctionsIdDeleteAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EdgeFunctionsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<Object>> EdgeFunctionsIdDeleteWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        public EdgeFunctionResponse EdgeFunctionsIdGet(long id, int operationIndex = 0)
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = EdgeFunctionsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        public edgefunctions.Client.ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdGetWithHttpInfo(long id, int operationIndex = 0)
        {
            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdGetAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = await EdgeFunctionsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdGetWithHttpInfoAsync(long id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        public EdgeFunctionResponse EdgeFunctionsIdPatch(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0)
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = EdgeFunctionsIdPatchWithHttpInfo(id, patchEdgeFunctionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        public edgefunctions.Client.ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdPatchWithHttpInfo(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'patchEdgeFunctionRequest' is set
            if (patchEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'patchEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsIdPatch");
            }

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdPatchAsync(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = await EdgeFunctionsIdPatchWithHttpInfoAsync(id, patchEdgeFunctionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="patchEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdPatchWithHttpInfoAsync(long id, PatchEdgeFunctionRequest patchEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'patchEdgeFunctionRequest' is set
            if (patchEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'patchEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsIdPatch");
            }


            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = patchEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        public EdgeFunctionResponse EdgeFunctionsIdPut(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0)
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = EdgeFunctionsIdPutWithHttpInfo(id, putEdgeFunctionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        public edgefunctions.Client.ApiResponse<EdgeFunctionResponse> EdgeFunctionsIdPutWithHttpInfo(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'putEdgeFunctionRequest' is set
            if (putEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'putEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsIdPut");
            }

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsIdPutAsync(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = await EdgeFunctionsIdPutWithHttpInfoAsync(id, putEdgeFunctionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<EdgeFunctionResponse>> EdgeFunctionsIdPutWithHttpInfoAsync(long id, PutEdgeFunctionRequest putEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'putEdgeFunctionRequest' is set
            if (putEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'putEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsIdPut");
            }


            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", edgefunctions.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = putEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdgeFunctionResponse>("/edge_functions/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFunctionResponse</returns>
        public EdgeFunctionResponse EdgeFunctionsPost(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0)
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = EdgeFunctionsPostWithHttpInfo(createEdgeFunctionRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFunctionResponse</returns>
        public edgefunctions.Client.ApiResponse<EdgeFunctionResponse> EdgeFunctionsPostWithHttpInfo(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEdgeFunctionRequest' is set
            if (createEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'createEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsPost");
            }

            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdgeFunctionResponse>("/edge_functions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFunctionResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFunctionResponse> EdgeFunctionsPostAsync(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefunctions.Client.ApiResponse<EdgeFunctionResponse> localVarResponse = await EdgeFunctionsPostWithHttpInfoAsync(createEdgeFunctionRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// edge_functions 
        /// </summary>
        /// <exception cref="edgefunctions.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFunctionRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFunctionResponse)</returns>
        public async System.Threading.Tasks.Task<edgefunctions.Client.ApiResponse<EdgeFunctionResponse>> EdgeFunctionsPostWithHttpInfoAsync(CreateEdgeFunctionRequest createEdgeFunctionRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEdgeFunctionRequest' is set
            if (createEdgeFunctionRequest == null)
            {
                throw new edgefunctions.Client.ApiException(400, "Missing required parameter 'createEdgeFunctionRequest' when calling EdgeFunctionsApi->EdgeFunctionsPost");
            }


            edgefunctions.Client.RequestOptions localVarRequestOptions = new edgefunctions.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefunctions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefunctions.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEdgeFunctionRequest;

            localVarRequestOptions.Operation = "EdgeFunctionsApi.EdgeFunctionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdgeFunctionResponse>("/edge_functions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFunctionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
