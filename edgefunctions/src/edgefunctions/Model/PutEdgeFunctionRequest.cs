// <auto-generated>
/*
 * Edge Function API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgefunctions.Client;

namespace edgefunctions.Model
{
    /// <summary>
    /// PutEdgeFunctionRequest
    /// </summary>
    public partial class PutEdgeFunctionRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PutEdgeFunctionRequest" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="code">code</param>
        /// <param name="jsonArgs">jsonArgs</param>
        /// <param name="active">active</param>
        /// <param name="initiatorType">initiatorType</param>
        /// <param name="language">language</param>
        /// <param name="isProprietaryCode">isProprietaryCode</param>
        [JsonConstructor]
        public PutEdgeFunctionRequest(Option<string?> name = default, Option<string?> code = default, Option<CreateEdgeFunctionRequestJsonArgs?> jsonArgs = default, Option<bool?> active = default, Option<InitiatorTypeEnum?> initiatorType = default, Option<string?> language = default, Option<bool?> isProprietaryCode = default)
        {
            NameOption = name;
            CodeOption = code;
            JsonArgsOption = jsonArgs;
            ActiveOption = active;
            InitiatorTypeOption = initiatorType;
            LanguageOption = language;
            IsProprietaryCodeOption = isProprietaryCode;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines InitiatorType
        /// </summary>
        public enum InitiatorTypeEnum
        {
            /// <summary>
            /// Enum EdgeApplication for value: edge_application
            /// </summary>
            EdgeApplication = 1,

            /// <summary>
            /// Enum EdgeFirewall for value: edge_firewall
            /// </summary>
            EdgeFirewall = 2
        }

        /// <summary>
        /// Returns a <see cref="InitiatorTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static InitiatorTypeEnum InitiatorTypeEnumFromString(string value)
        {
            if (value.Equals("edge_application"))
                return InitiatorTypeEnum.EdgeApplication;

            if (value.Equals("edge_firewall"))
                return InitiatorTypeEnum.EdgeFirewall;

            throw new NotImplementedException($"Could not convert value to type InitiatorTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="InitiatorTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static InitiatorTypeEnum? InitiatorTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("edge_application"))
                return InitiatorTypeEnum.EdgeApplication;

            if (value.Equals("edge_firewall"))
                return InitiatorTypeEnum.EdgeFirewall;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="InitiatorTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string InitiatorTypeEnumToJsonValue(InitiatorTypeEnum? value)
        {
            if (value == InitiatorTypeEnum.EdgeApplication)
                return "edge_application";

            if (value == InitiatorTypeEnum.EdgeFirewall)
                return "edge_firewall";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of InitiatorType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InitiatorTypeEnum?> InitiatorTypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets InitiatorType
        /// </summary>
        [JsonPropertyName("initiator_type")]
        public InitiatorTypeEnum? InitiatorType { get { return this.InitiatorTypeOption; } set { this.InitiatorTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public string? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of JsonArgs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<CreateEdgeFunctionRequestJsonArgs?> JsonArgsOption { get; private set; }

        /// <summary>
        /// Gets or Sets JsonArgs
        /// </summary>
        [JsonPropertyName("json_args")]
        public CreateEdgeFunctionRequestJsonArgs? JsonArgs { get { return this.JsonArgsOption; } set { this.JsonArgsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public bool? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public string? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsProprietaryCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsProprietaryCodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsProprietaryCode
        /// </summary>
        [JsonPropertyName("is_proprietary_code")]
        public bool? IsProprietaryCode { get { return this.IsProprietaryCodeOption; } set { this.IsProprietaryCodeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PutEdgeFunctionRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  JsonArgs: ").Append(JsonArgs).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  InitiatorType: ").Append(InitiatorType).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  IsProprietaryCode: ").Append(IsProprietaryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PutEdgeFunctionRequest" />
    /// </summary>
    public class PutEdgeFunctionRequestJsonConverter : JsonConverter<PutEdgeFunctionRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PutEdgeFunctionRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PutEdgeFunctionRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> name = default;
            Option<string?> code = default;
            Option<CreateEdgeFunctionRequestJsonArgs?> jsonArgs = default;
            Option<bool?> active = default;
            Option<PutEdgeFunctionRequest.InitiatorTypeEnum?> initiatorType = default;
            Option<string?> language = default;
            Option<bool?> isProprietaryCode = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "code":
                            code = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "json_args":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jsonArgs = new Option<CreateEdgeFunctionRequestJsonArgs?>(JsonSerializer.Deserialize<CreateEdgeFunctionRequestJsonArgs>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "initiator_type":
                            string? initiatorTypeRawValue = utf8JsonReader.GetString();
                            if (initiatorTypeRawValue != null)
                                initiatorType = new Option<PutEdgeFunctionRequest.InitiatorTypeEnum?>(PutEdgeFunctionRequest.InitiatorTypeEnumFromStringOrDefault(initiatorTypeRawValue));
                            break;
                        case "language":
                            language = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "is_proprietary_code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isProprietaryCode = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (jsonArgs.IsSet && jsonArgs.Value == null)
                throw new ArgumentNullException(nameof(jsonArgs), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (initiatorType.IsSet && initiatorType.Value == null)
                throw new ArgumentNullException(nameof(initiatorType), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class PutEdgeFunctionRequest.");

            if (isProprietaryCode.IsSet && isProprietaryCode.Value == null)
                throw new ArgumentNullException(nameof(isProprietaryCode), "Property is not nullable for class PutEdgeFunctionRequest.");

            return new PutEdgeFunctionRequest(name, code, jsonArgs, active, initiatorType, language, isProprietaryCode);
        }

        /// <summary>
        /// Serializes a <see cref="PutEdgeFunctionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PutEdgeFunctionRequest putEdgeFunctionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, putEdgeFunctionRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PutEdgeFunctionRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="putEdgeFunctionRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PutEdgeFunctionRequest putEdgeFunctionRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (putEdgeFunctionRequest.NameOption.IsSet && putEdgeFunctionRequest.Name == null)
                throw new ArgumentNullException(nameof(putEdgeFunctionRequest.Name), "Property is required for class PutEdgeFunctionRequest.");

            if (putEdgeFunctionRequest.CodeOption.IsSet && putEdgeFunctionRequest.Code == null)
                throw new ArgumentNullException(nameof(putEdgeFunctionRequest.Code), "Property is required for class PutEdgeFunctionRequest.");

            if (putEdgeFunctionRequest.JsonArgsOption.IsSet && putEdgeFunctionRequest.JsonArgs == null)
                throw new ArgumentNullException(nameof(putEdgeFunctionRequest.JsonArgs), "Property is required for class PutEdgeFunctionRequest.");

            if (putEdgeFunctionRequest.LanguageOption.IsSet && putEdgeFunctionRequest.Language == null)
                throw new ArgumentNullException(nameof(putEdgeFunctionRequest.Language), "Property is required for class PutEdgeFunctionRequest.");

            if (putEdgeFunctionRequest.NameOption.IsSet)
                writer.WriteString("name", putEdgeFunctionRequest.Name);

            if (putEdgeFunctionRequest.CodeOption.IsSet)
                writer.WriteString("code", putEdgeFunctionRequest.Code);

            if (putEdgeFunctionRequest.JsonArgsOption.IsSet)
            {
                writer.WritePropertyName("json_args");
                JsonSerializer.Serialize(writer, putEdgeFunctionRequest.JsonArgs, jsonSerializerOptions);
            }
            if (putEdgeFunctionRequest.ActiveOption.IsSet)
                writer.WriteBoolean("active", putEdgeFunctionRequest.ActiveOption.Value!.Value);

            var initiatorTypeRawValue = PutEdgeFunctionRequest.InitiatorTypeEnumToJsonValue(putEdgeFunctionRequest.InitiatorTypeOption.Value!.Value);
            writer.WriteString("initiator_type", initiatorTypeRawValue);
            if (putEdgeFunctionRequest.LanguageOption.IsSet)
                writer.WriteString("language", putEdgeFunctionRequest.Language);

            if (putEdgeFunctionRequest.IsProprietaryCodeOption.IsSet)
                writer.WriteBoolean("is_proprietary_code", putEdgeFunctionRequest.IsProprietaryCodeOption.Value!.Value);
        }
    }
}
