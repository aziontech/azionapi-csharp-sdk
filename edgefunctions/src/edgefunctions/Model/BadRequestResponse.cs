// <auto-generated>
/*
 * Edge Function API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using edgefunctions.Client;

namespace edgefunctions.Model
{
    /// <summary>
    /// BadRequestResponse
    /// </summary>
    public partial class BadRequestResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BadRequestResponse" /> class.
        /// </summary>
        /// <param name="name">name</param>
        /// <param name="active">active</param>
        /// <param name="code">code</param>
        /// <param name="language">language</param>
        [JsonConstructor]
        public BadRequestResponse(Option<List<string>?> name = default, Option<List<string>?> active = default, Option<List<string>?> code = default, Option<List<string>?> language = default)
        {
            NameOption = name;
            ActiveOption = active;
            CodeOption = code;
            LanguageOption = language;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public List<string>? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Active
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ActiveOption { get; private set; }

        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [JsonPropertyName("active")]
        public List<string>? Active { get { return this.ActiveOption; } set { this.ActiveOption = new(value); } }

        /// <summary>
        /// Used to track the state of Code
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> CodeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [JsonPropertyName("code")]
        public List<string>? Code { get { return this.CodeOption; } set { this.CodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Language
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> LanguageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [JsonPropertyName("language")]
        public List<string>? Language { get { return this.LanguageOption; } set { this.LanguageOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BadRequestResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BadRequestResponse" />
    /// </summary>
    public class BadRequestResponseJsonConverter : JsonConverter<BadRequestResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="BadRequestResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BadRequestResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> name = default;
            Option<List<string>?> active = default;
            Option<List<string>?> code = default;
            Option<List<string>?> language = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                name = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "active":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                active = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "code":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                code = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "language":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                language = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class BadRequestResponse.");

            if (active.IsSet && active.Value == null)
                throw new ArgumentNullException(nameof(active), "Property is not nullable for class BadRequestResponse.");

            if (code.IsSet && code.Value == null)
                throw new ArgumentNullException(nameof(code), "Property is not nullable for class BadRequestResponse.");

            if (language.IsSet && language.Value == null)
                throw new ArgumentNullException(nameof(language), "Property is not nullable for class BadRequestResponse.");

            return new BadRequestResponse(name, active, code, language);
        }

        /// <summary>
        /// Serializes a <see cref="BadRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="badRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BadRequestResponse badRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, badRequestResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BadRequestResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="badRequestResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BadRequestResponse badRequestResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (badRequestResponse.NameOption.IsSet && badRequestResponse.Name == null)
                throw new ArgumentNullException(nameof(badRequestResponse.Name), "Property is required for class BadRequestResponse.");

            if (badRequestResponse.ActiveOption.IsSet && badRequestResponse.Active == null)
                throw new ArgumentNullException(nameof(badRequestResponse.Active), "Property is required for class BadRequestResponse.");

            if (badRequestResponse.CodeOption.IsSet && badRequestResponse.Code == null)
                throw new ArgumentNullException(nameof(badRequestResponse.Code), "Property is required for class BadRequestResponse.");

            if (badRequestResponse.LanguageOption.IsSet && badRequestResponse.Language == null)
                throw new ArgumentNullException(nameof(badRequestResponse.Language), "Property is required for class BadRequestResponse.");

            if (badRequestResponse.NameOption.IsSet)
            {
                writer.WritePropertyName("name");
                JsonSerializer.Serialize(writer, badRequestResponse.Name, jsonSerializerOptions);
            }
            if (badRequestResponse.ActiveOption.IsSet)
            {
                writer.WritePropertyName("active");
                JsonSerializer.Serialize(writer, badRequestResponse.Active, jsonSerializerOptions);
            }
            if (badRequestResponse.CodeOption.IsSet)
            {
                writer.WritePropertyName("code");
                JsonSerializer.Serialize(writer, badRequestResponse.Code, jsonSerializerOptions);
            }
            if (badRequestResponse.LanguageOption.IsSet)
            {
                writer.WritePropertyName("language");
                JsonSerializer.Serialize(writer, badRequestResponse.Language, jsonSerializerOptions);
            }
        }
    }
}
