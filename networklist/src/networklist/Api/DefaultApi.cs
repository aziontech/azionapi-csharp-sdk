/*
 * Network Lists API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using networklist.Client;
using networklist.Model;

namespace networklist.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all user Network Lists
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListNetworkListsResponse</returns>
        ListNetworkListsResponse NetworkListsGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);

        /// <summary>
        /// List all user Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListNetworkListsResponse</returns>
        ApiResponse<ListNetworkListsResponse> NetworkListsGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a Network Lists
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListsResponse</returns>
        NetworkListsResponse NetworkListsPost(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0);

        /// <summary>
        /// Create a Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListsResponse</returns>
        ApiResponse<NetworkListsResponse> NetworkListsPostWithHttpInfo(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieve a Network Lists set by uuid
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListUuidResponse</returns>
        NetworkListUuidResponse NetworkListsUuidGet(string uuid, int operationIndex = 0);

        /// <summary>
        /// Retrieve a Network Lists set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListUuidResponse</returns>
        ApiResponse<NetworkListUuidResponse> NetworkListsUuidGetWithHttpInfo(string uuid, int operationIndex = 0);
        /// <summary>
        /// Overwrite some Network Lists attributes
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListsResponse</returns>
        NetworkListsResponse NetworkListsUuidPut(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0);

        /// <summary>
        /// Overwrite some Network Lists attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListsResponse</returns>
        ApiResponse<NetworkListsResponse> NetworkListsUuidPutWithHttpInfo(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all user Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNetworkListsResponse</returns>
        System.Threading.Tasks.Task<ListNetworkListsResponse> NetworkListsGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all user Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNetworkListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListNetworkListsResponse>> NetworkListsGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListsResponse</returns>
        System.Threading.Tasks.Task<NetworkListsResponse> NetworkListsPostAsync(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a Network Lists
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkListsResponse>> NetworkListsPostWithHttpInfoAsync(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve a Network Lists set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListUuidResponse</returns>
        System.Threading.Tasks.Task<NetworkListUuidResponse> NetworkListsUuidGetAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve a Network Lists set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListUuidResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkListUuidResponse>> NetworkListsUuidGetWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overwrite some Network Lists attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListsResponse</returns>
        System.Threading.Tasks.Task<NetworkListsResponse> NetworkListsUuidPutAsync(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overwrite some Network Lists attributes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<NetworkListsResponse>> NetworkListsUuidPutWithHttpInfoAsync(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private networklist.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = networklist.Client.Configuration.MergeConfigurations(
                networklist.Client.GlobalConfiguration.Instance,
                new networklist.Client.Configuration { BasePath = basePath }
            );
            this.Client = new networklist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new networklist.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = networklist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(networklist.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = networklist.Client.Configuration.MergeConfigurations(
                networklist.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new networklist.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new networklist.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = networklist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(networklist.Client.ISynchronousClient client, networklist.Client.IAsynchronousClient asyncClient, networklist.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = networklist.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public networklist.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public networklist.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public networklist.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public networklist.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all user Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListNetworkListsResponse</returns>
        public ListNetworkListsResponse NetworkListsGet(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            networklist.Client.ApiResponse<ListNetworkListsResponse> localVarResponse = NetworkListsGetWithHttpInfo(page, pageSize, sort, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all user Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListNetworkListsResponse</returns>
        public networklist.Client.ApiResponse<ListNetworkListsResponse> NetworkListsGetWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListNetworkListsResponse>("/network_lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all user Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListNetworkListsResponse</returns>
        public async System.Threading.Tasks.Task<ListNetworkListsResponse> NetworkListsGetAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            networklist.Client.ApiResponse<ListNetworkListsResponse> localVarResponse = await NetworkListsGetWithHttpInfoAsync(page, pageSize, sort, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all user Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListNetworkListsResponse)</returns>
        public async System.Threading.Tasks.Task<networklist.Client.ApiResponse<ListNetworkListsResponse>> NetworkListsGetWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(networklist.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListNetworkListsResponse>("/network_lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListsResponse</returns>
        public NetworkListsResponse NetworkListsPost(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0)
        {
            networklist.Client.ApiResponse<NetworkListsResponse> localVarResponse = NetworkListsPostWithHttpInfo(createNetworkListsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListsResponse</returns>
        public networklist.Client.ApiResponse<NetworkListsResponse> NetworkListsPostWithHttpInfo(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createNetworkListsRequest' is set
            if (createNetworkListsRequest == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'createNetworkListsRequest' when calling DefaultApi->NetworkListsPost");
            }

            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNetworkListsRequest;

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NetworkListsResponse>("/network_lists", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListsResponse</returns>
        public async System.Threading.Tasks.Task<NetworkListsResponse> NetworkListsPostAsync(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            networklist.Client.ApiResponse<NetworkListsResponse> localVarResponse = await NetworkListsPostWithHttpInfoAsync(createNetworkListsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Network Lists 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListsResponse)</returns>
        public async System.Threading.Tasks.Task<networklist.Client.ApiResponse<NetworkListsResponse>> NetworkListsPostWithHttpInfoAsync(CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createNetworkListsRequest' is set
            if (createNetworkListsRequest == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'createNetworkListsRequest' when calling DefaultApi->NetworkListsPost");
            }


            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createNetworkListsRequest;

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NetworkListsResponse>("/network_lists", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Network Lists set by uuid 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListUuidResponse</returns>
        public NetworkListUuidResponse NetworkListsUuidGet(string uuid, int operationIndex = 0)
        {
            networklist.Client.ApiResponse<NetworkListUuidResponse> localVarResponse = NetworkListsUuidGetWithHttpInfo(uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Network Lists set by uuid 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListUuidResponse</returns>
        public networklist.Client.ApiResponse<NetworkListUuidResponse> NetworkListsUuidGetWithHttpInfo(string uuid, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->NetworkListsUuidGet");
            }

            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", networklist.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<NetworkListUuidResponse>("/network_lists/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve a Network Lists set by uuid 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListUuidResponse</returns>
        public async System.Threading.Tasks.Task<NetworkListUuidResponse> NetworkListsUuidGetAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            networklist.Client.ApiResponse<NetworkListUuidResponse> localVarResponse = await NetworkListsUuidGetWithHttpInfoAsync(uuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve a Network Lists set by uuid 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListUuidResponse)</returns>
        public async System.Threading.Tasks.Task<networklist.Client.ApiResponse<NetworkListUuidResponse>> NetworkListsUuidGetWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->NetworkListsUuidGet");
            }


            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", networklist.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<NetworkListUuidResponse>("/network_lists/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite some Network Lists attributes 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NetworkListsResponse</returns>
        public NetworkListsResponse NetworkListsUuidPut(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0)
        {
            networklist.Client.ApiResponse<NetworkListsResponse> localVarResponse = NetworkListsUuidPutWithHttpInfo(uuid, createNetworkListsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite some Network Lists attributes 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NetworkListsResponse</returns>
        public networklist.Client.ApiResponse<NetworkListsResponse> NetworkListsUuidPutWithHttpInfo(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->NetworkListsUuidPut");
            }

            // verify the required parameter 'createNetworkListsRequest' is set
            if (createNetworkListsRequest == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'createNetworkListsRequest' when calling DefaultApi->NetworkListsUuidPut");
            }

            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", networklist.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = createNetworkListsRequest;

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<NetworkListsResponse>("/network_lists/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite some Network Lists attributes 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NetworkListsResponse</returns>
        public async System.Threading.Tasks.Task<NetworkListsResponse> NetworkListsUuidPutAsync(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            networklist.Client.ApiResponse<NetworkListsResponse> localVarResponse = await NetworkListsUuidPutWithHttpInfoAsync(uuid, createNetworkListsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite some Network Lists attributes 
        /// </summary>
        /// <exception cref="networklist.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="createNetworkListsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NetworkListsResponse)</returns>
        public async System.Threading.Tasks.Task<networklist.Client.ApiResponse<NetworkListsResponse>> NetworkListsUuidPutWithHttpInfoAsync(string uuid, CreateNetworkListsRequest createNetworkListsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->NetworkListsUuidPut");
            }

            // verify the required parameter 'createNetworkListsRequest' is set
            if (createNetworkListsRequest == null)
            {
                throw new networklist.Client.ApiException(400, "Missing required parameter 'createNetworkListsRequest' when calling DefaultApi->NetworkListsUuidPut");
            }


            networklist.Client.RequestOptions localVarRequestOptions = new networklist.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "text/html"
            };

            var localVarContentType = networklist.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = networklist.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", networklist.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = createNetworkListsRequest;

            localVarRequestOptions.Operation = "DefaultApi.NetworkListsUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<NetworkListsResponse>("/network_lists/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NetworkListsUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
