/*
 * Object Storage
 *
 * REST API OpenAPI documentation for the Object Storage
 *
 * The version of the OpenAPI document: 1.0.0 (v1)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = storage.Client.OpenAPIDateConverter;

namespace storage.Model
{
    /// <summary>
    /// ResponseS3Credential
    /// </summary>
    [DataContract(Name = "ResponseS3Credential")]
    public partial class ResponseS3Credential : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseS3Credential" /> class.
        /// </summary>
        /// <param name="state">state.</param>
        /// <param name="data">data.</param>
        public ResponseS3Credential(string state = default(string), S3Credential data = default(S3Credential))
        {
            this.State = state;
            this.Data = data;
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        /// <example>executed</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public S3Credential Data { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResponseS3Credential {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // State (string) maxLength
            if (this.State != null && this.State.Length > 30)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 30.", new [] { "State" });
            }

            // State (string) minLength
            if (this.State != null && this.State.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be greater than 1.", new [] { "State" });
            }

            if (this.State != null) {
                // State (string) pattern
                Regex regexState = new Regex(@".*", RegexOptions.CultureInvariant);
                if (!regexState.Match(this.State).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, must match a pattern of " + regexState, new [] { "State" });
                }
            }

            yield break;
        }
    }

}
