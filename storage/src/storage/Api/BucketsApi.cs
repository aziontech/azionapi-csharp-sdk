/*
 * Object Storage
 *
 * REST API OpenAPI documentation for the Object Storage
 *
 * The version of the OpenAPI document: 1.0.0 (v1)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using storage.Client;
using storage.Model;

namespace storage.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        ResponseBucket ApiV1StorageBucketsCreate(BucketCreate bucketCreate, int operationIndex = 0);

        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        ApiResponse<ResponseBucket> ApiV1StorageBucketsCreateWithHttpInfo(BucketCreate bucketCreate, int operationIndex = 0);
        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseDeleteBucket</returns>
        ResponseDeleteBucket ApiV1StorageBucketsDestroy(string name, int operationIndex = 0);

        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseDeleteBucket</returns>
        ApiResponse<ResponseDeleteBucket> ApiV1StorageBucketsDestroyWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketList</returns>
        PaginatedBucketList ApiV1StorageBucketsList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketList</returns>
        ApiResponse<PaginatedBucketList> ApiV1StorageBucketsListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        ResponseBucket ApiV1StorageBucketsPartialUpdate(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0);

        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        ApiResponse<ResponseBucket> ApiV1StorageBucketsPartialUpdateWithHttpInfo(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        System.Threading.Tasks.Task<ResponseBucket> ApiV1StorageBucketsCreateAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseBucket>> ApiV1StorageBucketsCreateWithHttpInfoAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDeleteBucket</returns>
        System.Threading.Tasks.Task<ResponseDeleteBucket> ApiV1StorageBucketsDestroyAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDeleteBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseDeleteBucket>> ApiV1StorageBucketsDestroyWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketList</returns>
        System.Threading.Tasks.Task<PaginatedBucketList> ApiV1StorageBucketsListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /v4/storage/buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedBucketList>> ApiV1StorageBucketsListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        System.Threading.Tasks.Task<ResponseBucket> ApiV1StorageBucketsPartialUpdateAsync(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /v4/storage/buckets/:name
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseBucket>> ApiV1StorageBucketsPartialUpdateWithHttpInfoAsync(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBucketsApi : IBucketsApiSync, IBucketsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BucketsApi : IBucketsApi
    {
        private storage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BucketsApi(string basePath)
        {
            this.Configuration = storage.Client.Configuration.MergeConfigurations(
                storage.Client.GlobalConfiguration.Instance,
                new storage.Client.Configuration { BasePath = basePath }
            );
            this.Client = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BucketsApi(storage.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = storage.Client.Configuration.MergeConfigurations(
                storage.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storage.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BucketsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BucketsApi(storage.Client.ISynchronousClient client, storage.Client.IAsynchronousClient asyncClient, storage.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public storage.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public storage.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public storage.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public storage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        public ResponseBucket ApiV1StorageBucketsCreate(BucketCreate bucketCreate, int operationIndex = 0)
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = ApiV1StorageBucketsCreateWithHttpInfo(bucketCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        public storage.Client.ApiResponse<ResponseBucket> ApiV1StorageBucketsCreateWithHttpInfo(BucketCreate bucketCreate, int operationIndex = 0)
        {
            // verify the required parameter 'bucketCreate' is set
            if (bucketCreate == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketCreate' when calling BucketsApi->ApiV1StorageBucketsCreate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bucketCreate;

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseBucket>("/v4/storage/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        public async System.Threading.Tasks.Task<ResponseBucket> ApiV1StorageBucketsCreateAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = await ApiV1StorageBucketsCreateWithHttpInfoAsync(bucketCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<ResponseBucket>> ApiV1StorageBucketsCreateWithHttpInfoAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketCreate' is set
            if (bucketCreate == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketCreate' when calling BucketsApi->ApiV1StorageBucketsCreate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bucketCreate;

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseBucket>("/v4/storage/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseDeleteBucket</returns>
        public ResponseDeleteBucket ApiV1StorageBucketsDestroy(string name, int operationIndex = 0)
        {
            storage.Client.ApiResponse<ResponseDeleteBucket> localVarResponse = ApiV1StorageBucketsDestroyWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseDeleteBucket</returns>
        public storage.Client.ApiResponse<ResponseDeleteBucket> ApiV1StorageBucketsDestroyWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling BucketsApi->ApiV1StorageBucketsDestroy");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<ResponseDeleteBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseDeleteBucket</returns>
        public async System.Threading.Tasks.Task<ResponseDeleteBucket> ApiV1StorageBucketsDestroyAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<ResponseDeleteBucket> localVarResponse = await ApiV1StorageBucketsDestroyWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseDeleteBucket)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<ResponseDeleteBucket>> ApiV1StorageBucketsDestroyWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling BucketsApi->ApiV1StorageBucketsDestroy");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<ResponseDeleteBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketList</returns>
        public PaginatedBucketList ApiV1StorageBucketsList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<PaginatedBucketList> localVarResponse = ApiV1StorageBucketsListWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketList</returns>
        public storage.Client.ApiResponse<PaginatedBucketList> ApiV1StorageBucketsListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedBucketList>("/v4/storage/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketList</returns>
        public async System.Threading.Tasks.Task<PaginatedBucketList> ApiV1StorageBucketsListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<PaginatedBucketList> localVarResponse = await ApiV1StorageBucketsListWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketList)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<PaginatedBucketList>> ApiV1StorageBucketsListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedBucketList>("/v4/storage/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        public ResponseBucket ApiV1StorageBucketsPartialUpdate(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = ApiV1StorageBucketsPartialUpdateWithHttpInfo(name, patchedBucket);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        public storage.Client.ApiResponse<ResponseBucket> ApiV1StorageBucketsPartialUpdateWithHttpInfo(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling BucketsApi->ApiV1StorageBucketsPartialUpdate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = patchedBucket;

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ResponseBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        public async System.Threading.Tasks.Task<ResponseBucket> ApiV1StorageBucketsPartialUpdateAsync(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = await ApiV1StorageBucketsPartialUpdateWithHttpInfoAsync(name, patchedBucket, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /v4/storage/buckets/:name 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="patchedBucket"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<ResponseBucket>> ApiV1StorageBucketsPartialUpdateWithHttpInfoAsync(string name, PatchedBucket? patchedBucket = default(PatchedBucket?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling BucketsApi->ApiV1StorageBucketsPartialUpdate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter
            localVarRequestOptions.Data = patchedBucket;

            localVarRequestOptions.Operation = "BucketsApi.ApiV1StorageBucketsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ResponseBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiV1StorageBucketsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
