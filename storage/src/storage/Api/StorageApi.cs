/*
 * Object Storage
 *
 * REST API OpenAPI documentation for the Object Storage
 *
 * The version of the OpenAPI document: 1.0.0 (v1)
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using storage.Client;
using storage.Model;

namespace storage.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        ResponseBucket StorageApiBucketsCreate(BucketCreate bucketCreate, int operationIndex = 0);

        /// <summary>
        /// Create a new bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        ApiResponse<ResponseBucket> StorageApiBucketsCreateWithHttpInfo(BucketCreate bucketCreate, int operationIndex = 0);
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessBucketOperation</returns>
        SuccessBucketOperation StorageApiBucketsDestroy(string name, int operationIndex = 0);

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessBucketOperation</returns>
        ApiResponse<SuccessBucketOperation> StorageApiBucketsDestroyWithHttpInfo(string name, int operationIndex = 0);
        /// <summary>
        /// List buckets
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketList</returns>
        PaginatedBucketList StorageApiBucketsList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketList</returns>
        ApiResponse<PaginatedBucketList> StorageApiBucketsListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Create new object key
        /// </summary>
        /// <remarks>
        /// Create a new object key in the bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        SuccessObjectOperation StorageApiBucketsObjectsCreate(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);

        /// <summary>
        /// Create new object key
        /// </summary>
        /// <remarks>
        /// Create a new object key in the bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsCreateWithHttpInfo(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);
        /// <summary>
        /// Delete object key
        /// </summary>
        /// <remarks>
        /// Delete an object key from bucket
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        SuccessObjectOperation StorageApiBucketsObjectsDestroy(string bucketName, string objectKey, int operationIndex = 0);

        /// <summary>
        /// Delete object key
        /// </summary>
        /// <remarks>
        /// Delete an object key from bucket
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsDestroyWithHttpInfo(string bucketName, string objectKey, int operationIndex = 0);
        /// <summary>
        /// List buckets objects
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketObjectList</returns>
        PaginatedBucketObjectList StorageApiBucketsObjectsList(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);

        /// <summary>
        /// List buckets objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketObjectList</returns>
        ApiResponse<PaginatedBucketObjectList> StorageApiBucketsObjectsListWithHttpInfo(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0);
        /// <summary>
        /// Download object
        /// </summary>
        /// <remarks>
        /// Download the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream StorageApiBucketsObjectsRetrieve(string bucketName, string objectKey, int operationIndex = 0);

        /// <summary>
        /// Download object
        /// </summary>
        /// <remarks>
        /// Download the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> StorageApiBucketsObjectsRetrieveWithHttpInfo(string bucketName, string objectKey, int operationIndex = 0);
        /// <summary>
        /// Update the object key
        /// </summary>
        /// <remarks>
        /// Update the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        SuccessObjectOperation StorageApiBucketsObjectsUpdate(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);

        /// <summary>
        /// Update the object key
        /// </summary>
        /// <remarks>
        /// Update the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsUpdateWithHttpInfo(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0);
        /// <summary>
        /// Update bucket info
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        ResponseBucket StorageApiBucketsPartialUpdate(string name, int operationIndex = 0);

        /// <summary>
        /// Update bucket info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        ApiResponse<ResponseBucket> StorageApiBucketsPartialUpdateWithHttpInfo(string name, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        System.Threading.Tasks.Task<ResponseBucket> StorageApiBucketsCreateAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseBucket>> StorageApiBucketsCreateWithHttpInfoAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessBucketOperation</returns>
        System.Threading.Tasks.Task<SuccessBucketOperation> StorageApiBucketsDestroyAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a bucket
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessBucketOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessBucketOperation>> StorageApiBucketsDestroyWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketList</returns>
        System.Threading.Tasks.Task<PaginatedBucketList> StorageApiBucketsListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List buckets
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedBucketList>> StorageApiBucketsListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create new object key
        /// </summary>
        /// <remarks>
        /// Create a new object key in the bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsCreateAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create new object key
        /// </summary>
        /// <remarks>
        /// Create a new object key in the bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsCreateWithHttpInfoAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete object key
        /// </summary>
        /// <remarks>
        /// Delete an object key from bucket
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsDestroyAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete object key
        /// </summary>
        /// <remarks>
        /// Delete an object key from bucket
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsDestroyWithHttpInfoAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List buckets objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketObjectList</returns>
        System.Threading.Tasks.Task<PaginatedBucketObjectList> StorageApiBucketsObjectsListAsync(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List buckets objects
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketObjectList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PaginatedBucketObjectList>> StorageApiBucketsObjectsListWithHttpInfoAsync(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Download object
        /// </summary>
        /// <remarks>
        /// Download the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> StorageApiBucketsObjectsRetrieveAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Download object
        /// </summary>
        /// <remarks>
        /// Download the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> StorageApiBucketsObjectsRetrieveWithHttpInfoAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update the object key
        /// </summary>
        /// <remarks>
        /// Update the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsUpdateAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update the object key
        /// </summary>
        /// <remarks>
        /// Update the object key from bucket.
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsUpdateWithHttpInfoAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update bucket info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        System.Threading.Tasks.Task<ResponseBucket> StorageApiBucketsPartialUpdateAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update bucket info
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseBucket>> StorageApiBucketsPartialUpdateWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStorageApi : IStorageApiSync, IStorageApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StorageApi : IStorageApi
    {
        private storage.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StorageApi(string basePath)
        {
            this.Configuration = storage.Client.Configuration.MergeConfigurations(
                storage.Client.GlobalConfiguration.Instance,
                new storage.Client.Configuration { BasePath = basePath }
            );
            this.Client = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StorageApi(storage.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = storage.Client.Configuration.MergeConfigurations(
                storage.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new storage.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new storage.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StorageApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StorageApi(storage.Client.ISynchronousClient client, storage.Client.IAsynchronousClient asyncClient, storage.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = storage.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public storage.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public storage.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public storage.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public storage.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        public ResponseBucket StorageApiBucketsCreate(BucketCreate bucketCreate, int operationIndex = 0)
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = StorageApiBucketsCreateWithHttpInfo(bucketCreate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        public storage.Client.ApiResponse<ResponseBucket> StorageApiBucketsCreateWithHttpInfo(BucketCreate bucketCreate, int operationIndex = 0)
        {
            // verify the required parameter 'bucketCreate' is set
            if (bucketCreate == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketCreate' when calling StorageApi->StorageApiBucketsCreate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "application/x-www-form-urlencoded",
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bucketCreate;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ResponseBucket>("/v4/storage/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        public async System.Threading.Tasks.Task<ResponseBucket> StorageApiBucketsCreateAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = await StorageApiBucketsCreateWithHttpInfoAsync(bucketCreate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketCreate"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<ResponseBucket>> StorageApiBucketsCreateWithHttpInfoAsync(BucketCreate bucketCreate, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketCreate' is set
            if (bucketCreate == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketCreate' when calling StorageApi->StorageApiBucketsCreate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "application/x-www-form-urlencoded", 
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = bucketCreate;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ResponseBucket>("/v4/storage/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessBucketOperation</returns>
        public SuccessBucketOperation StorageApiBucketsDestroy(string name, int operationIndex = 0)
        {
            storage.Client.ApiResponse<SuccessBucketOperation> localVarResponse = StorageApiBucketsDestroyWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessBucketOperation</returns>
        public storage.Client.ApiResponse<SuccessBucketOperation> StorageApiBucketsDestroyWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling StorageApi->StorageApiBucketsDestroy");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessBucketOperation>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessBucketOperation</returns>
        public async System.Threading.Tasks.Task<SuccessBucketOperation> StorageApiBucketsDestroyAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<SuccessBucketOperation> localVarResponse = await StorageApiBucketsDestroyWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a bucket 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessBucketOperation)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<SuccessBucketOperation>> StorageApiBucketsDestroyWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling StorageApi->StorageApiBucketsDestroy");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessBucketOperation>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketList</returns>
        public PaginatedBucketList StorageApiBucketsList(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<PaginatedBucketList> localVarResponse = StorageApiBucketsListWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketList</returns>
        public storage.Client.ApiResponse<PaginatedBucketList> StorageApiBucketsListWithHttpInfo(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedBucketList>("/v4/storage/buckets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketList</returns>
        public async System.Threading.Tasks.Task<PaginatedBucketList> StorageApiBucketsListAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<PaginatedBucketList> localVarResponse = await StorageApiBucketsListWithHttpInfoAsync(page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buckets 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketList)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<PaginatedBucketList>> StorageApiBucketsListWithHttpInfoAsync(int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedBucketList>("/v4/storage/buckets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new object key Create a new object key in the bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        public SuccessObjectOperation StorageApiBucketsObjectsCreate(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = StorageApiBucketsObjectsCreateWithHttpInfo(bucketName, objectKey, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new object key Create a new object key in the bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        public storage.Client.ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsCreateWithHttpInfo(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsCreate");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsCreate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create new object key Create a new object key in the bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        public async System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsCreateAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = await StorageApiBucketsObjectsCreateWithHttpInfoAsync(bucketName, objectKey, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create new object key Create a new object key in the bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsCreateWithHttpInfoAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsCreate");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsCreate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsCreate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsCreate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete object key Delete an object key from bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        public SuccessObjectOperation StorageApiBucketsObjectsDestroy(string bucketName, string objectKey, int operationIndex = 0)
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = StorageApiBucketsObjectsDestroyWithHttpInfo(bucketName, objectKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete object key Delete an object key from bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        public storage.Client.ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsDestroyWithHttpInfo(string bucketName, string objectKey, int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsDestroy");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsDestroy");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete object key Delete an object key from bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        public async System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsDestroyAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = await StorageApiBucketsObjectsDestroyWithHttpInfoAsync(bucketName, objectKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete object key Delete an object key from bucket
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsDestroyWithHttpInfoAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsDestroy");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsDestroy");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsDestroy";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsDestroy", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buckets objects 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PaginatedBucketObjectList</returns>
        public PaginatedBucketObjectList StorageApiBucketsObjectsList(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<PaginatedBucketObjectList> localVarResponse = StorageApiBucketsObjectsListWithHttpInfo(bucketName, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buckets objects 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PaginatedBucketObjectList</returns>
        public storage.Client.ApiResponse<PaginatedBucketObjectList> StorageApiBucketsObjectsListWithHttpInfo(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsList");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PaginatedBucketObjectList>("/v4/storage/buckets/{bucket_name}/objects", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List buckets objects 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PaginatedBucketObjectList</returns>
        public async System.Threading.Tasks.Task<PaginatedBucketObjectList> StorageApiBucketsObjectsListAsync(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<PaginatedBucketObjectList> localVarResponse = await StorageApiBucketsObjectsListWithHttpInfoAsync(bucketName, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List buckets objects 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="page">A page number within the paginated result set. (optional)</param>
        /// <param name="pageSize">Number of results to return per page. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PaginatedBucketObjectList)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<PaginatedBucketObjectList>> StorageApiBucketsObjectsListWithHttpInfoAsync(string bucketName, int? page = default(int?), int? pageSize = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsList");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(storage.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsList";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PaginatedBucketObjectList>("/v4/storage/buckets/{bucket_name}/objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsList", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download object Download the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream StorageApiBucketsObjectsRetrieve(string bucketName, string objectKey, int operationIndex = 0)
        {
            storage.Client.ApiResponse<System.IO.Stream> localVarResponse = StorageApiBucketsObjectsRetrieveWithHttpInfo(bucketName, objectKey);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download object Download the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public storage.Client.ApiResponse<System.IO.Stream> StorageApiBucketsObjectsRetrieveWithHttpInfo(string bucketName, string objectKey, int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsRetrieve");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsRetrieve");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<System.IO.Stream>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Download object Download the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> StorageApiBucketsObjectsRetrieveAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<System.IO.Stream> localVarResponse = await StorageApiBucketsObjectsRetrieveWithHttpInfoAsync(bucketName, objectKey, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Download object Download the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<System.IO.Stream>> StorageApiBucketsObjectsRetrieveWithHttpInfoAsync(string bucketName, string objectKey, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsRetrieve");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsRetrieve");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/octet-stream"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsRetrieve";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<System.IO.Stream>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsRetrieve", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the object key Update the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SuccessObjectOperation</returns>
        public SuccessObjectOperation StorageApiBucketsObjectsUpdate(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = StorageApiBucketsObjectsUpdateWithHttpInfo(bucketName, objectKey, requestBody);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the object key Update the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SuccessObjectOperation</returns>
        public storage.Client.ApiResponse<SuccessObjectOperation> StorageApiBucketsObjectsUpdateWithHttpInfo(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0)
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsUpdate");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsUpdate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update the object key Update the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SuccessObjectOperation</returns>
        public async System.Threading.Tasks.Task<SuccessObjectOperation> StorageApiBucketsObjectsUpdateAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<SuccessObjectOperation> localVarResponse = await StorageApiBucketsObjectsUpdateWithHttpInfoAsync(bucketName, objectKey, requestBody, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update the object key Update the object key from bucket.
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bucketName"></param>
        /// <param name="objectKey"></param>
        /// <param name="requestBody"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SuccessObjectOperation)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<SuccessObjectOperation>> StorageApiBucketsObjectsUpdateWithHttpInfoAsync(string bucketName, string objectKey, Dictionary<string, Object>? requestBody = default(Dictionary<string, Object>?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bucketName' is set
            if (bucketName == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'bucketName' when calling StorageApi->StorageApiBucketsObjectsUpdate");
            }

            // verify the required parameter 'objectKey' is set
            if (objectKey == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'objectKey' when calling StorageApi->StorageApiBucketsObjectsUpdate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/octet-stream"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("bucket_name", storage.Client.ClientUtils.ParameterToString(bucketName)); // path parameter
            localVarRequestOptions.PathParameters.Add("object_key", storage.Client.ClientUtils.ParameterToString(objectKey)); // path parameter
            localVarRequestOptions.Data = requestBody;

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsObjectsUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<SuccessObjectOperation>("/v4/storage/buckets/{bucket_name}/objects/{object_key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsObjectsUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update bucket info 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ResponseBucket</returns>
        public ResponseBucket StorageApiBucketsPartialUpdate(string name, int operationIndex = 0)
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = StorageApiBucketsPartialUpdateWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update bucket info 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ResponseBucket</returns>
        public storage.Client.ApiResponse<ResponseBucket> StorageApiBucketsPartialUpdateWithHttpInfo(string name, int operationIndex = 0)
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling StorageApi->StorageApiBucketsPartialUpdate");
            }

            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<ResponseBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update bucket info 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ResponseBucket</returns>
        public async System.Threading.Tasks.Task<ResponseBucket> StorageApiBucketsPartialUpdateAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            storage.Client.ApiResponse<ResponseBucket> localVarResponse = await StorageApiBucketsPartialUpdateWithHttpInfoAsync(name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update bucket info 
        /// </summary>
        /// <exception cref="storage.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ResponseBucket)</returns>
        public async System.Threading.Tasks.Task<storage.Client.ApiResponse<ResponseBucket>> StorageApiBucketsPartialUpdateWithHttpInfoAsync(string name, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'name' is set
            if (name == null)
            {
                throw new storage.Client.ApiException(400, "Missing required parameter 'name' when calling StorageApi->StorageApiBucketsPartialUpdate");
            }


            storage.Client.RequestOptions localVarRequestOptions = new storage.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = storage.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = storage.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("name", storage.Client.ClientUtils.ParameterToString(name)); // path parameter

            localVarRequestOptions.Operation = "StorageApi.StorageApiBucketsPartialUpdate";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<ResponseBucket>("/v4/storage/buckets/{name}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StorageApiBucketsPartialUpdate", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
