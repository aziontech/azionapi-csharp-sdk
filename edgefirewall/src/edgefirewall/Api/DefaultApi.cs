/*
 * Edge Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using edgefirewall.Client;
using edgefirewall.Model;

namespace edgefirewall.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all user edge firewall
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListEdgeFirewallResponse</returns>
        ListEdgeFirewallResponse EdgeFirewallGet(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);

        /// <summary>
        /// List all user edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListEdgeFirewallResponse</returns>
        ApiResponse<ListEdgeFirewallResponse> EdgeFirewallGetWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0);
        /// <summary>
        /// Create a edge firewall
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        EdgeFirewallResponse EdgeFirewallPost(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0);

        /// <summary>
        /// Create a edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        ApiResponse<EdgeFirewallResponse> EdgeFirewallPostWithHttpInfo(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0);
        /// <summary>
        /// Delete an edge firewall by uuid
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void EdgeFirewallUuidDelete(string uuid, int operationIndex = 0);

        /// <summary>
        /// Delete an edge firewall by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EdgeFirewallUuidDeleteWithHttpInfo(string uuid, int operationIndex = 0);
        /// <summary>
        /// Retrieve an edge firewall set by uuid
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        EdgeFirewallResponse EdgeFirewallUuidGet(string uuid, int operationIndex = 0);

        /// <summary>
        /// Retrieve an edge firewall set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidGetWithHttpInfo(string uuid, int operationIndex = 0);
        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        EdgeFirewallResponse EdgeFirewallUuidPatch(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0);

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidPatchWithHttpInfo(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0);
        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        EdgeFirewallResponse EdgeFirewallUuidPut(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0);

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidPutWithHttpInfo(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List all user edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEdgeFirewallResponse</returns>
        System.Threading.Tasks.Task<ListEdgeFirewallResponse> EdgeFirewallGetAsync(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all user edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListEdgeFirewallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListEdgeFirewallResponse>> EdgeFirewallGetWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallPostAsync(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a edge firewall
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFirewallResponse>> EdgeFirewallPostWithHttpInfoAsync(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete an edge firewall by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EdgeFirewallUuidDeleteAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete an edge firewall by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EdgeFirewallUuidDeleteWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve an edge firewall set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidGetAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve an edge firewall set by uuid
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidGetWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidPatchAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidPatchWithHttpInfoAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidPutAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidPutWithHttpInfoAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IDefaultApiSync, IDefaultApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private edgefirewall.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(string basePath)
        {
            this.Configuration = edgefirewall.Client.Configuration.MergeConfigurations(
                edgefirewall.Client.GlobalConfiguration.Instance,
                new edgefirewall.Client.Configuration { BasePath = basePath }
            );
            this.Client = new edgefirewall.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgefirewall.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = edgefirewall.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(edgefirewall.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = edgefirewall.Client.Configuration.MergeConfigurations(
                edgefirewall.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new edgefirewall.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new edgefirewall.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = edgefirewall.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DefaultApi(edgefirewall.Client.ISynchronousClient client, edgefirewall.Client.IAsynchronousClient asyncClient, edgefirewall.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = edgefirewall.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public edgefirewall.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public edgefirewall.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public edgefirewall.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public edgefirewall.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List all user edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ListEdgeFirewallResponse</returns>
        public ListEdgeFirewallResponse EdgeFirewallGet(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            edgefirewall.Client.ApiResponse<ListEdgeFirewallResponse> localVarResponse = EdgeFirewallGetWithHttpInfo(page, pageSize, sort, orderBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all user edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ListEdgeFirewallResponse</returns>
        public edgefirewall.Client.ApiResponse<ListEdgeFirewallResponse> EdgeFirewallGetWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0)
        {
            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ListEdgeFirewallResponse>("/edge_firewall", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all user edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ListEdgeFirewallResponse</returns>
        public async System.Threading.Tasks.Task<ListEdgeFirewallResponse> EdgeFirewallGetAsync(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefirewall.Client.ApiResponse<ListEdgeFirewallResponse> localVarResponse = await EdgeFirewallGetWithHttpInfoAsync(page, pageSize, sort, orderBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all user edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ListEdgeFirewallResponse)</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<ListEdgeFirewallResponse>> EdgeFirewallGetWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string sort = default(string), string orderBy = default(string), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(edgefirewall.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ListEdgeFirewallResponse>("/edge_firewall", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        public EdgeFirewallResponse EdgeFirewallPost(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0)
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = EdgeFirewallPostWithHttpInfo(createEdgeFirewallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        public edgefirewall.Client.ApiResponse<EdgeFirewallResponse> EdgeFirewallPostWithHttpInfo(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEdgeFirewallRequest' is set
            if (createEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'createEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallPost");
            }

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<EdgeFirewallResponse>("/edge_firewall", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallPostAsync(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = await EdgeFirewallPostWithHttpInfoAsync(createEdgeFirewallRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a edge firewall 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<EdgeFirewallResponse>> EdgeFirewallPostWithHttpInfoAsync(CreateEdgeFirewallRequest createEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEdgeFirewallRequest' is set
            if (createEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'createEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallPost");
            }


            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<EdgeFirewallResponse>("/edge_firewall", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an edge firewall by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void EdgeFirewallUuidDelete(string uuid, int operationIndex = 0)
        {
            EdgeFirewallUuidDeleteWithHttpInfo(uuid);
        }

        /// <summary>
        /// Delete an edge firewall by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public edgefirewall.Client.ApiResponse<Object> EdgeFirewallUuidDeleteWithHttpInfo(string uuid, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidDelete");
            }

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete an edge firewall by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EdgeFirewallUuidDeleteAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await EdgeFirewallUuidDeleteWithHttpInfoAsync(uuid, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete an edge firewall by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<Object>> EdgeFirewallUuidDeleteWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidDelete");
            }


            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an edge firewall set by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        public EdgeFirewallResponse EdgeFirewallUuidGet(string uuid, int operationIndex = 0)
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = EdgeFirewallUuidGetWithHttpInfo(uuid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an edge firewall set by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        public edgefirewall.Client.ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidGetWithHttpInfo(string uuid, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidGet");
            }

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve an edge firewall set by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidGetAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = await EdgeFirewallUuidGetWithHttpInfoAsync(uuid, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve an edge firewall set by uuid 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidGetWithHttpInfoAsync(string uuid, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidGet");
            }


            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        public EdgeFirewallResponse EdgeFirewallUuidPatch(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0)
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = EdgeFirewallUuidPatchWithHttpInfo(uuid, updateEdgeFirewallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        public edgefirewall.Client.ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidPatchWithHttpInfo(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidPatch");
            }

            // verify the required parameter 'updateEdgeFirewallRequest' is set
            if (updateEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'updateEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallUuidPatch");
            }

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = updateEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidPatchAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = await EdgeFirewallUuidPatchWithHttpInfoAsync(uuid, updateEdgeFirewallRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidPatchWithHttpInfoAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidPatch");
            }

            // verify the required parameter 'updateEdgeFirewallRequest' is set
            if (updateEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'updateEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallUuidPatch");
            }


            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = updateEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidPatch";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidPatch", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>EdgeFirewallResponse</returns>
        public EdgeFirewallResponse EdgeFirewallUuidPut(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0)
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = EdgeFirewallUuidPutWithHttpInfo(uuid, updateEdgeFirewallRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of EdgeFirewallResponse</returns>
        public edgefirewall.Client.ApiResponse<EdgeFirewallResponse> EdgeFirewallUuidPutWithHttpInfo(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0)
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidPut");
            }

            // verify the required parameter 'updateEdgeFirewallRequest' is set
            if (updateEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'updateEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallUuidPut");
            }

            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = updateEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of EdgeFirewallResponse</returns>
        public async System.Threading.Tasks.Task<EdgeFirewallResponse> EdgeFirewallUuidPutAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            edgefirewall.Client.ApiResponse<EdgeFirewallResponse> localVarResponse = await EdgeFirewallUuidPutWithHttpInfoAsync(uuid, updateEdgeFirewallRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Overwrite some edge firewall attributes, like \&quot;active\&quot; 
        /// </summary>
        /// <exception cref="edgefirewall.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uuid"></param>
        /// <param name="updateEdgeFirewallRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (EdgeFirewallResponse)</returns>
        public async System.Threading.Tasks.Task<edgefirewall.Client.ApiResponse<EdgeFirewallResponse>> EdgeFirewallUuidPutWithHttpInfoAsync(string uuid, UpdateEdgeFirewallRequest updateEdgeFirewallRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'uuid' is set
            if (uuid == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'uuid' when calling DefaultApi->EdgeFirewallUuidPut");
            }

            // verify the required parameter 'updateEdgeFirewallRequest' is set
            if (updateEdgeFirewallRequest == null)
            {
                throw new edgefirewall.Client.ApiException(400, "Missing required parameter 'updateEdgeFirewallRequest' when calling DefaultApi->EdgeFirewallUuidPut");
            }


            edgefirewall.Client.RequestOptions localVarRequestOptions = new edgefirewall.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = edgefirewall.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = edgefirewall.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("uuid", edgefirewall.Client.ClientUtils.ParameterToString(uuid)); // path parameter
            localVarRequestOptions.Data = updateEdgeFirewallRequest;

            localVarRequestOptions.Operation = "DefaultApi.EdgeFirewallUuidPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<EdgeFirewallResponse>("/edge_firewall/{uuid}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("EdgeFirewallUuidPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
