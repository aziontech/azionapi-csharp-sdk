/*
 * Edge Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgefirewall.Client.OpenAPIDateConverter;

namespace edgefirewall.Model
{
    /// <summary>
    /// SetWAFRuleSetAndWafModeBehaviorArgument
    /// </summary>
    [DataContract(Name = "SetWAFRuleSetAndWafModeBehavior_argument")]
    public partial class SetWAFRuleSetAndWafModeBehaviorArgument : IEquatable<SetWAFRuleSetAndWafModeBehaviorArgument>, IValidatableObject
    {
        /// <summary>
        /// Defines WafMode
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum WafModeEnum
        {
            /// <summary>
            /// Enum Learning for value: learning
            /// </summary>
            [EnumMember(Value = "learning")]
            Learning = 1,

            /// <summary>
            /// Enum Blocking for value: blocking
            /// </summary>
            [EnumMember(Value = "blocking")]
            Blocking = 2
        }


        /// <summary>
        /// Gets or Sets WafMode
        /// </summary>
        [DataMember(Name = "waf_mode", IsRequired = true, EmitDefaultValue = true)]
        public WafModeEnum WafMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetWAFRuleSetAndWafModeBehaviorArgument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetWAFRuleSetAndWafModeBehaviorArgument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetWAFRuleSetAndWafModeBehaviorArgument" /> class.
        /// </summary>
        /// <param name="setWafRulesetAndWafMode">setWafRulesetAndWafMode (required).</param>
        /// <param name="wafMode">wafMode (required).</param>
        public SetWAFRuleSetAndWafModeBehaviorArgument(int setWafRulesetAndWafMode = default(int), WafModeEnum wafMode = default(WafModeEnum))
        {
            this.SetWafRulesetAndWafMode = setWafRulesetAndWafMode;
            this.WafMode = wafMode;
        }

        /// <summary>
        /// Gets or Sets SetWafRulesetAndWafMode
        /// </summary>
        [DataMember(Name = "set_waf_ruleset_and_waf_mode", IsRequired = true, EmitDefaultValue = true)]
        public int SetWafRulesetAndWafMode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetWAFRuleSetAndWafModeBehaviorArgument {\n");
            sb.Append("  SetWafRulesetAndWafMode: ").Append(SetWafRulesetAndWafMode).Append("\n");
            sb.Append("  WafMode: ").Append(WafMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetWAFRuleSetAndWafModeBehaviorArgument);
        }

        /// <summary>
        /// Returns true if SetWAFRuleSetAndWafModeBehaviorArgument instances are equal
        /// </summary>
        /// <param name="input">Instance of SetWAFRuleSetAndWafModeBehaviorArgument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetWAFRuleSetAndWafModeBehaviorArgument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SetWafRulesetAndWafMode == input.SetWafRulesetAndWafMode ||
                    this.SetWafRulesetAndWafMode.Equals(input.SetWafRulesetAndWafMode)
                ) && 
                (
                    this.WafMode == input.WafMode ||
                    this.WafMode.Equals(input.WafMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.SetWafRulesetAndWafMode.GetHashCode();
                hashCode = (hashCode * 59) + this.WafMode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SetWafRulesetAndWafMode (int) minimum
            if (this.SetWafRulesetAndWafMode < (int)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SetWafRulesetAndWafMode, must be a value greater than or equal to 1.", new [] { "SetWafRulesetAndWafMode" });
            }

            yield break;
        }
    }

}
