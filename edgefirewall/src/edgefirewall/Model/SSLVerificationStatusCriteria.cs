/*
 * Edge Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgefirewall.Client.OpenAPIDateConverter;

namespace edgefirewall.Model
{
    /// <summary>
    /// SSLVerificationStatusCriteria
    /// </summary>
    [DataContract(Name = "SSLVerificationStatusCriteria")]
    public partial class SSLVerificationStatusCriteria : IEquatable<SSLVerificationStatusCriteria>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Variable
        /// </summary>
        [DataMember(Name = "variable", EmitDefaultValue = false)]
        public Variables? Variable { get; set; }

        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        [DataMember(Name = "operator", EmitDefaultValue = false)]
        public SSLVerificationStatusOperators? VarOperator { get; set; }

        /// <summary>
        /// Gets or Sets Conditional
        /// </summary>
        [DataMember(Name = "conditional", EmitDefaultValue = false)]
        public Conditionals? Conditional { get; set; }

        /// <summary>
        /// Gets or Sets InputValue
        /// </summary>
        [DataMember(Name = "input_value", EmitDefaultValue = false)]
        public SSLVerificationStatusArguments? InputValue { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SSLVerificationStatusCriteria" /> class.
        /// </summary>
        /// <param name="variable">variable.</param>
        /// <param name="varOperator">varOperator.</param>
        /// <param name="conditional">conditional.</param>
        /// <param name="inputValue">inputValue.</param>
        public SSLVerificationStatusCriteria(Variables? variable = default(Variables?), SSLVerificationStatusOperators? varOperator = default(SSLVerificationStatusOperators?), Conditionals? conditional = default(Conditionals?), SSLVerificationStatusArguments? inputValue = default(SSLVerificationStatusArguments?))
        {
            this.Variable = variable;
            this.VarOperator = varOperator;
            this.Conditional = conditional;
            this.InputValue = inputValue;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SSLVerificationStatusCriteria {\n");
            sb.Append("  Variable: ").Append(Variable).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  Conditional: ").Append(Conditional).Append("\n");
            sb.Append("  InputValue: ").Append(InputValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SSLVerificationStatusCriteria);
        }

        /// <summary>
        /// Returns true if SSLVerificationStatusCriteria instances are equal
        /// </summary>
        /// <param name="input">Instance of SSLVerificationStatusCriteria to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SSLVerificationStatusCriteria input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Variable == input.Variable ||
                    this.Variable.Equals(input.Variable)
                ) && 
                (
                    this.VarOperator == input.VarOperator ||
                    this.VarOperator.Equals(input.VarOperator)
                ) && 
                (
                    this.Conditional == input.Conditional ||
                    this.Conditional.Equals(input.Conditional)
                ) && 
                (
                    this.InputValue == input.InputValue ||
                    this.InputValue.Equals(input.InputValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Variable.GetHashCode();
                hashCode = (hashCode * 59) + this.VarOperator.GetHashCode();
                hashCode = (hashCode * 59) + this.Conditional.GetHashCode();
                hashCode = (hashCode * 59) + this.InputValue.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
