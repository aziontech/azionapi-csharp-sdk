/*
 * Edge Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = edgefirewall.Client.OpenAPIDateConverter;

namespace edgefirewall.Model
{
    /// <summary>
    /// SetCustomResponseArgument
    /// </summary>
    [DataContract(Name = "SetCustomResponse_argument")]
    public partial class SetCustomResponseArgument : IEquatable<SetCustomResponseArgument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SetCustomResponseArgument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SetCustomResponseArgument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SetCustomResponseArgument" /> class.
        /// </summary>
        /// <param name="statusCode">statusCode (required).</param>
        /// <param name="contentType">contentType (required).</param>
        /// <param name="contentBody">contentBody (required).</param>
        public SetCustomResponseArgument(SetCustomResponseArgumentStatusCode statusCode = default(SetCustomResponseArgumentStatusCode), string contentType = default(string), string contentBody = default(string))
        {
            // to ensure "statusCode" is required (not null)
            if (statusCode == null)
            {
                throw new ArgumentNullException("statusCode is a required property for SetCustomResponseArgument and cannot be null");
            }
            this.StatusCode = statusCode;
            // to ensure "contentType" is required (not null)
            if (contentType == null)
            {
                throw new ArgumentNullException("contentType is a required property for SetCustomResponseArgument and cannot be null");
            }
            this.ContentType = contentType;
            // to ensure "contentBody" is required (not null)
            if (contentBody == null)
            {
                throw new ArgumentNullException("contentBody is a required property for SetCustomResponseArgument and cannot be null");
            }
            this.ContentBody = contentBody;
        }

        /// <summary>
        /// Gets or Sets StatusCode
        /// </summary>
        [DataMember(Name = "status_code", IsRequired = true, EmitDefaultValue = true)]
        public SetCustomResponseArgumentStatusCode StatusCode { get; set; }

        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name = "content_type", IsRequired = true, EmitDefaultValue = true)]
        public string ContentType { get; set; }

        /// <summary>
        /// Gets or Sets ContentBody
        /// </summary>
        [DataMember(Name = "content_body", IsRequired = true, EmitDefaultValue = true)]
        public string ContentBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SetCustomResponseArgument {\n");
            sb.Append("  StatusCode: ").Append(StatusCode).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  ContentBody: ").Append(ContentBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SetCustomResponseArgument);
        }

        /// <summary>
        /// Returns true if SetCustomResponseArgument instances are equal
        /// </summary>
        /// <param name="input">Instance of SetCustomResponseArgument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetCustomResponseArgument input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StatusCode == input.StatusCode ||
                    (this.StatusCode != null &&
                    this.StatusCode.Equals(input.StatusCode))
                ) && 
                (
                    this.ContentType == input.ContentType ||
                    (this.ContentType != null &&
                    this.ContentType.Equals(input.ContentType))
                ) && 
                (
                    this.ContentBody == input.ContentBody ||
                    (this.ContentBody != null &&
                    this.ContentBody.Equals(input.ContentBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusCode != null)
                {
                    hashCode = (hashCode * 59) + this.StatusCode.GetHashCode();
                }
                if (this.ContentType != null)
                {
                    hashCode = (hashCode * 59) + this.ContentType.GetHashCode();
                }
                if (this.ContentBody != null)
                {
                    hashCode = (hashCode * 59) + this.ContentBody.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
