/*
 * Web Application Firewall API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = waf.Client.OpenAPIDateConverter;

namespace waf.Model
{
    /// <summary>
    /// WAFEvents200ResultsInner
    /// </summary>
    [DataContract(Name = "WAFEvents200_results_inner")]
    public partial class WAFEvents200ResultsInner : IEquatable<WAFEvents200ResultsInner>, IValidatableObject
    {
        /// <summary>
        /// Defines MatchZone
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchZoneEnum
        {
            /// <summary>
            /// Enum Path for value: path
            /// </summary>
            [EnumMember(Value = "path")]
            Path = 1,

            /// <summary>
            /// Enum QueryString for value: query_string
            /// </summary>
            [EnumMember(Value = "query_string")]
            QueryString = 2,

            /// <summary>
            /// Enum RequestHeader for value: request_header
            /// </summary>
            [EnumMember(Value = "request_header")]
            RequestHeader = 3,

            /// <summary>
            /// Enum RequestBody for value: request_body
            /// </summary>
            [EnumMember(Value = "request_body")]
            RequestBody = 4,

            /// <summary>
            /// Enum RawBody for value: raw_body
            /// </summary>
            [EnumMember(Value = "raw_body")]
            RawBody = 5,

            /// <summary>
            /// Enum FileName for value: file_name
            /// </summary>
            [EnumMember(Value = "file_name")]
            FileName = 6,

            /// <summary>
            /// Enum Cookie for value: cookie
            /// </summary>
            [EnumMember(Value = "cookie")]
            Cookie = 7
        }


        /// <summary>
        /// Gets or Sets MatchZone
        /// </summary>
        [DataMember(Name = "match_zone", EmitDefaultValue = false)]
        public MatchZoneEnum? MatchZone { get; set; }
        /// <summary>
        /// Defines MatchesOn
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MatchesOnEnum
        {
            /// <summary>
            /// Enum Name for value: name
            /// </summary>
            [EnumMember(Value = "name")]
            Name = 1,

            /// <summary>
            /// Enum Value for value: value
            /// </summary>
            [EnumMember(Value = "value")]
            Value = 2
        }


        /// <summary>
        /// Gets or Sets MatchesOn
        /// </summary>
        [DataMember(Name = "matches_on", EmitDefaultValue = false)]
        public MatchesOnEnum? MatchesOn { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WAFEvents200ResultsInner" /> class.
        /// </summary>
        /// <param name="countryCount">countryCount.</param>
        /// <param name="top10Countries">top10Countries.</param>
        /// <param name="top10Ips">top10Ips.</param>
        /// <param name="hitCount">hitCount.</param>
        /// <param name="ruleId">ruleId.</param>
        /// <param name="ipCount">ipCount.</param>
        /// <param name="matchZone">matchZone.</param>
        /// <param name="pathCount">pathCount.</param>
        /// <param name="matchesOn">matchesOn.</param>
        /// <param name="ruleDescription">ruleDescription.</param>
        public WAFEvents200ResultsInner(long countryCount = default(long), List<WAFEvents200ResultsInnerTop10CountriesInner> top10Countries = default(List<WAFEvents200ResultsInnerTop10CountriesInner>), List<WAFEvents200ResultsInnerTop10CountriesInner> top10Ips = default(List<WAFEvents200ResultsInnerTop10CountriesInner>), long hitCount = default(long), long ruleId = default(long), long ipCount = default(long), MatchZoneEnum? matchZone = default(MatchZoneEnum?), long pathCount = default(long), MatchesOnEnum? matchesOn = default(MatchesOnEnum?), string ruleDescription = default(string))
        {
            this.CountryCount = countryCount;
            this.Top10Countries = top10Countries;
            this.Top10Ips = top10Ips;
            this.HitCount = hitCount;
            this.RuleId = ruleId;
            this.IpCount = ipCount;
            this.MatchZone = matchZone;
            this.PathCount = pathCount;
            this.MatchesOn = matchesOn;
            this.RuleDescription = ruleDescription;
        }

        /// <summary>
        /// Gets or Sets CountryCount
        /// </summary>
        [DataMember(Name = "country_count", EmitDefaultValue = false)]
        public long CountryCount { get; set; }

        /// <summary>
        /// Gets or Sets Top10Countries
        /// </summary>
        [DataMember(Name = "top_10_countries", EmitDefaultValue = false)]
        public List<WAFEvents200ResultsInnerTop10CountriesInner> Top10Countries { get; set; }

        /// <summary>
        /// Gets or Sets Top10Ips
        /// </summary>
        [DataMember(Name = "top_10_ips", EmitDefaultValue = false)]
        public List<WAFEvents200ResultsInnerTop10CountriesInner> Top10Ips { get; set; }

        /// <summary>
        /// Gets or Sets HitCount
        /// </summary>
        [DataMember(Name = "hit_count", EmitDefaultValue = false)]
        public long HitCount { get; set; }

        /// <summary>
        /// Gets or Sets RuleId
        /// </summary>
        [DataMember(Name = "rule_id", EmitDefaultValue = false)]
        public long RuleId { get; set; }

        /// <summary>
        /// Gets or Sets IpCount
        /// </summary>
        [DataMember(Name = "ip_count", EmitDefaultValue = false)]
        public long IpCount { get; set; }

        /// <summary>
        /// Gets or Sets PathCount
        /// </summary>
        [DataMember(Name = "path_count", EmitDefaultValue = false)]
        public long PathCount { get; set; }

        /// <summary>
        /// Gets or Sets RuleDescription
        /// </summary>
        [DataMember(Name = "rule_description", EmitDefaultValue = false)]
        public string RuleDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WAFEvents200ResultsInner {\n");
            sb.Append("  CountryCount: ").Append(CountryCount).Append("\n");
            sb.Append("  Top10Countries: ").Append(Top10Countries).Append("\n");
            sb.Append("  Top10Ips: ").Append(Top10Ips).Append("\n");
            sb.Append("  HitCount: ").Append(HitCount).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  IpCount: ").Append(IpCount).Append("\n");
            sb.Append("  MatchZone: ").Append(MatchZone).Append("\n");
            sb.Append("  PathCount: ").Append(PathCount).Append("\n");
            sb.Append("  MatchesOn: ").Append(MatchesOn).Append("\n");
            sb.Append("  RuleDescription: ").Append(RuleDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WAFEvents200ResultsInner);
        }

        /// <summary>
        /// Returns true if WAFEvents200ResultsInner instances are equal
        /// </summary>
        /// <param name="input">Instance of WAFEvents200ResultsInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WAFEvents200ResultsInner input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.CountryCount == input.CountryCount ||
                    this.CountryCount.Equals(input.CountryCount)
                ) && 
                (
                    this.Top10Countries == input.Top10Countries ||
                    this.Top10Countries != null &&
                    input.Top10Countries != null &&
                    this.Top10Countries.SequenceEqual(input.Top10Countries)
                ) && 
                (
                    this.Top10Ips == input.Top10Ips ||
                    this.Top10Ips != null &&
                    input.Top10Ips != null &&
                    this.Top10Ips.SequenceEqual(input.Top10Ips)
                ) && 
                (
                    this.HitCount == input.HitCount ||
                    this.HitCount.Equals(input.HitCount)
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    this.RuleId.Equals(input.RuleId)
                ) && 
                (
                    this.IpCount == input.IpCount ||
                    this.IpCount.Equals(input.IpCount)
                ) && 
                (
                    this.MatchZone == input.MatchZone ||
                    this.MatchZone.Equals(input.MatchZone)
                ) && 
                (
                    this.PathCount == input.PathCount ||
                    this.PathCount.Equals(input.PathCount)
                ) && 
                (
                    this.MatchesOn == input.MatchesOn ||
                    this.MatchesOn.Equals(input.MatchesOn)
                ) && 
                (
                    this.RuleDescription == input.RuleDescription ||
                    (this.RuleDescription != null &&
                    this.RuleDescription.Equals(input.RuleDescription))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.CountryCount.GetHashCode();
                if (this.Top10Countries != null)
                {
                    hashCode = (hashCode * 59) + this.Top10Countries.GetHashCode();
                }
                if (this.Top10Ips != null)
                {
                    hashCode = (hashCode * 59) + this.Top10Ips.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HitCount.GetHashCode();
                hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                hashCode = (hashCode * 59) + this.IpCount.GetHashCode();
                hashCode = (hashCode * 59) + this.MatchZone.GetHashCode();
                hashCode = (hashCode * 59) + this.PathCount.GetHashCode();
                hashCode = (hashCode * 59) + this.MatchesOn.GetHashCode();
                if (this.RuleDescription != null)
                {
                    hashCode = (hashCode * 59) + this.RuleDescription.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
