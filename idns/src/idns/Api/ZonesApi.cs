/*
 * Intelligent DNS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using idns.Client;
using idns.Model;

namespace idns.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZonesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove an Intelligent DNS hosted zone
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DeleteZone(int zoneId, int operationIndex = 0);

        /// <summary>
        /// Remove an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteZoneWithHttpInfo(int zoneId, int operationIndex = 0);
        /// <summary>
        /// Get an Intelligent DNS hosted zone
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetZoneResponse</returns>
        GetZoneResponse GetZone(int zoneId, int operationIndex = 0);

        /// <summary>
        /// Get an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetZoneResponse</returns>
        ApiResponse<GetZoneResponse> GetZoneWithHttpInfo(int zoneId, int operationIndex = 0);
        /// <summary>
        /// Get a collection of Intelligent DNS zones
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetZonesResponse</returns>
        GetZonesResponse GetZones(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get a collection of Intelligent DNS zones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetZonesResponse</returns>
        ApiResponse<GetZonesResponse> GetZonesWithHttpInfo(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);
        /// <summary>
        /// Add a new Intelligent DNS zone
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutZoneResponse</returns>
        PostOrPutZoneResponse PostZone(Zone? zone = default(Zone?), int operationIndex = 0);

        /// <summary>
        /// Add a new Intelligent DNS zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutZoneResponse</returns>
        ApiResponse<PostOrPutZoneResponse> PostZoneWithHttpInfo(Zone? zone = default(Zone?), int operationIndex = 0);
        /// <summary>
        /// Update an Intelligent DNS hosted zone
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutZoneResponse</returns>
        PostOrPutZoneResponse PutZone(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0);

        /// <summary>
        /// Update an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutZoneResponse</returns>
        ApiResponse<PostOrPutZoneResponse> PutZoneWithHttpInfo(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZonesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteZoneAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteZoneWithHttpInfoAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetZoneResponse</returns>
        System.Threading.Tasks.Task<GetZoneResponse> GetZoneAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetZoneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetZoneResponse>> GetZoneWithHttpInfoAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a collection of Intelligent DNS zones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetZonesResponse</returns>
        System.Threading.Tasks.Task<GetZonesResponse> GetZonesAsync(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a collection of Intelligent DNS zones
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetZonesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetZonesResponse>> GetZonesWithHttpInfoAsync(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add a new Intelligent DNS zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutZoneResponse</returns>
        System.Threading.Tasks.Task<PostOrPutZoneResponse> PostZoneAsync(Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add a new Intelligent DNS zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutZoneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOrPutZoneResponse>> PostZoneWithHttpInfoAsync(Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutZoneResponse</returns>
        System.Threading.Tasks.Task<PostOrPutZoneResponse> PutZoneAsync(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an Intelligent DNS hosted zone
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutZoneResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOrPutZoneResponse>> PutZoneWithHttpInfoAsync(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IZonesApi : IZonesApiSync, IZonesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ZonesApi : IZonesApi
    {
        private idns.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZonesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ZonesApi(string basePath)
        {
            this.Configuration = idns.Client.Configuration.MergeConfigurations(
                idns.Client.GlobalConfiguration.Instance,
                new idns.Client.Configuration { BasePath = basePath }
            );
            this.Client = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ZonesApi(idns.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = idns.Client.Configuration.MergeConfigurations(
                idns.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new idns.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ZonesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ZonesApi(idns.Client.ISynchronousClient client, idns.Client.IAsynchronousClient asyncClient, idns.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public idns.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public idns.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public idns.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public idns.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DeleteZone(int zoneId, int operationIndex = 0)
        {
            idns.Client.ApiResponse<string> localVarResponse = DeleteZoneWithHttpInfo(zoneId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public idns.Client.ApiResponse<string> DeleteZoneWithHttpInfo(int zoneId, int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "ZonesApi.DeleteZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<string>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteZoneAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<string> localVarResponse = await DeleteZoneWithHttpInfoAsync(zoneId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<string>> DeleteZoneWithHttpInfoAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "ZonesApi.DeleteZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<string>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetZoneResponse</returns>
        public GetZoneResponse GetZone(int zoneId, int operationIndex = 0)
        {
            idns.Client.ApiResponse<GetZoneResponse> localVarResponse = GetZoneWithHttpInfo(zoneId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetZoneResponse</returns>
        public idns.Client.ApiResponse<GetZoneResponse> GetZoneWithHttpInfo(int zoneId, int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "ZonesApi.GetZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetZoneResponse>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetZoneResponse</returns>
        public async System.Threading.Tasks.Task<GetZoneResponse> GetZoneAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<GetZoneResponse> localVarResponse = await GetZoneWithHttpInfoAsync(zoneId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetZoneResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<GetZoneResponse>> GetZoneWithHttpInfoAsync(int zoneId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter

            localVarRequestOptions.Operation = "ZonesApi.GetZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetZoneResponse>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zones 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetZonesResponse</returns>
        public GetZonesResponse GetZones(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<GetZonesResponse> localVarResponse = GetZonesWithHttpInfo(orderBy, sort, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zones 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetZonesResponse</returns>
        public idns.Client.ApiResponse<GetZonesResponse> GetZonesWithHttpInfo(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "ZonesApi.GetZones";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetZonesResponse>("/intelligent_dns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zones 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetZonesResponse</returns>
        public async System.Threading.Tasks.Task<GetZonesResponse> GetZonesAsync(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<GetZonesResponse> localVarResponse = await GetZonesWithHttpInfoAsync(orderBy, sort, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zones 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderBy">Identifies which property the return should be sorted by. (optional, default to name)</param>
        /// <param name="sort">Defines whether objects are shown in ascending or descending order depending on the value set in order_by. (optional, default to asc)</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetZonesResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<GetZonesResponse>> GetZonesWithHttpInfoAsync(string? orderBy = default(string?), string? sort = default(string?), long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json",
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "ZonesApi.GetZones";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetZonesResponse>("/intelligent_dns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZones", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new Intelligent DNS zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutZoneResponse</returns>
        public PostOrPutZoneResponse PostZone(Zone? zone = default(Zone?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<PostOrPutZoneResponse> localVarResponse = PostZoneWithHttpInfo(zone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new Intelligent DNS zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutZoneResponse</returns>
        public idns.Client.ApiResponse<PostOrPutZoneResponse> PostZoneWithHttpInfo(Zone? zone = default(Zone?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = zone;

            localVarRequestOptions.Operation = "ZonesApi.PostZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostOrPutZoneResponse>("/intelligent_dns", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add a new Intelligent DNS zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutZoneResponse</returns>
        public async System.Threading.Tasks.Task<PostOrPutZoneResponse> PostZoneAsync(Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<PostOrPutZoneResponse> localVarResponse = await PostZoneWithHttpInfoAsync(zone, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add a new Intelligent DNS zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutZoneResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<PostOrPutZoneResponse>> PostZoneWithHttpInfoAsync(Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = zone;

            localVarRequestOptions.Operation = "ZonesApi.PostZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostOrPutZoneResponse>("/intelligent_dns", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutZoneResponse</returns>
        public PostOrPutZoneResponse PutZone(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<PostOrPutZoneResponse> localVarResponse = PutZoneWithHttpInfo(zoneId, zone);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutZoneResponse</returns>
        public idns.Client.ApiResponse<PostOrPutZoneResponse> PutZoneWithHttpInfo(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.Data = zone;

            localVarRequestOptions.Operation = "ZonesApi.PutZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PostOrPutZoneResponse>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutZoneResponse</returns>
        public async System.Threading.Tasks.Task<PostOrPutZoneResponse> PutZoneAsync(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<PostOrPutZoneResponse> localVarResponse = await PutZoneWithHttpInfoAsync(zoneId, zone, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Intelligent DNS hosted zone 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="zone"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutZoneResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<PostOrPutZoneResponse>> PutZoneWithHttpInfoAsync(int zoneId, Zone? zone = default(Zone?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.Data = zone;

            localVarRequestOptions.Operation = "ZonesApi.PutZone";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostOrPutZoneResponse>("/intelligent_dns/{zone_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutZone", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
