/*
 * Intelligent DNS API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using idns.Client;
using idns.Model;

namespace idns.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove an Intelligent DNS zone record
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string DeleteZoneRecord(int zoneId, int recordId, int operationIndex = 0);

        /// <summary>
        /// Remove an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> DeleteZoneRecordWithHttpInfo(int zoneId, int recordId, int operationIndex = 0);
        /// <summary>
        /// Get a collection of Intelligent DNS zone records
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecordsResponse</returns>
        GetRecordsResponse GetZoneRecords(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);

        /// <summary>
        /// Get a collection of Intelligent DNS zone records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecordsResponse</returns>
        ApiResponse<GetRecordsResponse> GetZoneRecordsWithHttpInfo(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0);
        /// <summary>
        /// Create a new Intelligent DNS zone record
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutRecordResponse</returns>
        PostOrPutRecordResponse PostZoneRecord(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0);

        /// <summary>
        /// Create a new Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutRecordResponse</returns>
        ApiResponse<PostOrPutRecordResponse> PostZoneRecordWithHttpInfo(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0);
        /// <summary>
        /// Update an Intelligent DNS zone record
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutRecordResponse</returns>
        PostOrPutRecordResponse PutZoneRecord(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0);

        /// <summary>
        /// Update an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutRecordResponse</returns>
        ApiResponse<PostOrPutRecordResponse> PutZoneRecordWithHttpInfo(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> DeleteZoneRecordAsync(int zoneId, int recordId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> DeleteZoneRecordWithHttpInfoAsync(int zoneId, int recordId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a collection of Intelligent DNS zone records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecordsResponse</returns>
        System.Threading.Tasks.Task<GetRecordsResponse> GetZoneRecordsAsync(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a collection of Intelligent DNS zone records
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecordsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetRecordsResponse>> GetZoneRecordsWithHttpInfoAsync(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create a new Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutRecordResponse</returns>
        System.Threading.Tasks.Task<PostOrPutRecordResponse> PostZoneRecordAsync(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutRecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOrPutRecordResponse>> PostZoneRecordWithHttpInfoAsync(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Update an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutRecordResponse</returns>
        System.Threading.Tasks.Task<PostOrPutRecordResponse> PutZoneRecordAsync(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Update an Intelligent DNS zone record
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutRecordResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostOrPutRecordResponse>> PutZoneRecordWithHttpInfoAsync(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRecordsApi : IRecordsApiSync, IRecordsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RecordsApi : IRecordsApi
    {
        private idns.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RecordsApi(string basePath)
        {
            this.Configuration = idns.Client.Configuration.MergeConfigurations(
                idns.Client.GlobalConfiguration.Instance,
                new idns.Client.Configuration { BasePath = basePath }
            );
            this.Client = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RecordsApi(idns.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = idns.Client.Configuration.MergeConfigurations(
                idns.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new idns.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new idns.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RecordsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RecordsApi(idns.Client.ISynchronousClient client, idns.Client.IAsynchronousClient asyncClient, idns.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = idns.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public idns.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public idns.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public idns.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public idns.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string DeleteZoneRecord(int zoneId, int recordId, int operationIndex = 0)
        {
            idns.Client.ApiResponse<string> localVarResponse = DeleteZoneRecordWithHttpInfo(zoneId, recordId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public idns.Client.ApiResponse<string> DeleteZoneRecordWithHttpInfo(int zoneId, int recordId, int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.PathParameters.Add("record_id", idns.Client.ClientUtils.ParameterToString(recordId)); // path parameter

            localVarRequestOptions.Operation = "RecordsApi.DeleteZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<string>("/intelligent_dns/{zone_id}/records/{record_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> DeleteZoneRecordAsync(int zoneId, int recordId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<string> localVarResponse = await DeleteZoneRecordWithHttpInfoAsync(zoneId, recordId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<string>> DeleteZoneRecordWithHttpInfoAsync(int zoneId, int recordId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.PathParameters.Add("record_id", idns.Client.ClientUtils.ParameterToString(recordId)); // path parameter

            localVarRequestOptions.Operation = "RecordsApi.DeleteZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<string>("/intelligent_dns/{zone_id}/records/{record_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zone records 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetRecordsResponse</returns>
        public GetRecordsResponse GetZoneRecords(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<GetRecordsResponse> localVarResponse = GetZoneRecordsWithHttpInfo(zoneId, page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zone records 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetRecordsResponse</returns>
        public idns.Client.ApiResponse<GetRecordsResponse> GetZoneRecordsWithHttpInfo(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "RecordsApi.GetZoneRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetRecordsResponse>("/intelligent_dns/{zone_id}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZoneRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zone records 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetRecordsResponse</returns>
        public async System.Threading.Tasks.Task<GetRecordsResponse> GetZoneRecordsAsync(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<GetRecordsResponse> localVarResponse = await GetZoneRecordsWithHttpInfoAsync(zoneId, page, pageSize, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a collection of Intelligent DNS zone records 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="page">Identifies which page should be returned, if the return is paginated. (optional, default to 1)</param>
        /// <param name="pageSize">Identifies how many items should be returned per page. (optional, default to 10)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetRecordsResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<GetRecordsResponse>> GetZoneRecordsWithHttpInfoAsync(int zoneId, long? page = default(long?), long? pageSize = default(long?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(idns.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }

            localVarRequestOptions.Operation = "RecordsApi.GetZoneRecords";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetRecordsResponse>("/intelligent_dns/{zone_id}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetZoneRecords", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutRecordResponse</returns>
        public PostOrPutRecordResponse PostZoneRecord(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<PostOrPutRecordResponse> localVarResponse = PostZoneRecordWithHttpInfo(zoneId, recordPostOrPut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutRecordResponse</returns>
        public idns.Client.ApiResponse<PostOrPutRecordResponse> PostZoneRecordWithHttpInfo(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.Data = recordPostOrPut;

            localVarRequestOptions.Operation = "RecordsApi.PostZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostOrPutRecordResponse>("/intelligent_dns/{zone_id}/records", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutRecordResponse</returns>
        public async System.Threading.Tasks.Task<PostOrPutRecordResponse> PostZoneRecordAsync(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<PostOrPutRecordResponse> localVarResponse = await PostZoneRecordWithHttpInfoAsync(zoneId, recordPostOrPut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutRecordResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<PostOrPutRecordResponse>> PostZoneRecordWithHttpInfoAsync(int zoneId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.Data = recordPostOrPut;

            localVarRequestOptions.Operation = "RecordsApi.PostZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostOrPutRecordResponse>("/intelligent_dns/{zone_id}/records", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostOrPutRecordResponse</returns>
        public PostOrPutRecordResponse PutZoneRecord(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0)
        {
            idns.Client.ApiResponse<PostOrPutRecordResponse> localVarResponse = PutZoneRecordWithHttpInfo(zoneId, recordId, recordPostOrPut);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostOrPutRecordResponse</returns>
        public idns.Client.ApiResponse<PostOrPutRecordResponse> PutZoneRecordWithHttpInfo(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0)
        {
            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.PathParameters.Add("record_id", idns.Client.ClientUtils.ParameterToString(recordId)); // path parameter
            localVarRequestOptions.Data = recordPostOrPut;

            localVarRequestOptions.Operation = "RecordsApi.PutZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<PostOrPutRecordResponse>("/intelligent_dns/{zone_id}/records/{record_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostOrPutRecordResponse</returns>
        public async System.Threading.Tasks.Task<PostOrPutRecordResponse> PutZoneRecordAsync(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            idns.Client.ApiResponse<PostOrPutRecordResponse> localVarResponse = await PutZoneRecordWithHttpInfoAsync(zoneId, recordId, recordPostOrPut, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update an Intelligent DNS zone record 
        /// </summary>
        /// <exception cref="idns.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="zoneId">The hosted zone id</param>
        /// <param name="recordId">The zone record id</param>
        /// <param name="recordPostOrPut"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostOrPutRecordResponse)</returns>
        public async System.Threading.Tasks.Task<idns.Client.ApiResponse<PostOrPutRecordResponse>> PutZoneRecordWithHttpInfoAsync(int zoneId, int recordId, RecordPostOrPut? recordPostOrPut = default(RecordPostOrPut?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            idns.Client.RequestOptions localVarRequestOptions = new idns.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = idns.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = idns.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("zone_id", idns.Client.ClientUtils.ParameterToString(zoneId)); // path parameter
            localVarRequestOptions.PathParameters.Add("record_id", idns.Client.ClientUtils.ParameterToString(recordId)); // path parameter
            localVarRequestOptions.Data = recordPostOrPut;

            localVarRequestOptions.Operation = "RecordsApi.PutZoneRecord";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<PostOrPutRecordResponse>("/intelligent_dns/{zone_id}/records/{record_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutZoneRecord", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
