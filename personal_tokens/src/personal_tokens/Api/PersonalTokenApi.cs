/*
 * Personal Tokens - OpenAPI
 *
 * The Personal Tokens API allows you to manage your existing personal tokens. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using personal_tokens.Client;
using personal_tokens.Model;

namespace personal_tokens.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalTokenApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new personal token
        /// </summary>
        /// <remarks>
        /// Create a new personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePersonalTokenResponse</returns>
        CreatePersonalTokenResponse CreatePersonalToken(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0);

        /// <summary>
        /// Create a new personal token
        /// </summary>
        /// <remarks>
        /// Create a new personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePersonalTokenResponse</returns>
        ApiResponse<CreatePersonalTokenResponse> CreatePersonalTokenWithHttpInfo(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0);
        /// <summary>
        /// Delete a personal token by id
        /// </summary>
        /// <remarks>
        /// Delete a personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeletePersonalToken(Guid personalTokenId, int operationIndex = 0);

        /// <summary>
        /// Delete a personal token by id
        /// </summary>
        /// <remarks>
        /// Delete a personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePersonalTokenWithHttpInfo(Guid personalTokenId, int operationIndex = 0);
        /// <summary>
        /// Get a personal token info
        /// </summary>
        /// <remarks>
        /// Get a personal token info
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalTokenResponseGet</returns>
        PersonalTokenResponseGet GetPersonalToken(Guid personalTokenId, int operationIndex = 0);

        /// <summary>
        /// Get a personal token info
        /// </summary>
        /// <remarks>
        /// Get a personal token info
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalTokenResponseGet</returns>
        ApiResponse<PersonalTokenResponseGet> GetPersonalTokenWithHttpInfo(Guid personalTokenId, int operationIndex = 0);
        /// <summary>
        /// List all existing personal token
        /// </summary>
        /// <remarks>
        /// List all existing personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalTokenResponseWithResults</returns>
        PersonalTokenResponseWithResults ListPersonalToken(int operationIndex = 0);

        /// <summary>
        /// List all existing personal token
        /// </summary>
        /// <remarks>
        /// List all existing personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalTokenResponseWithResults</returns>
        ApiResponse<PersonalTokenResponseWithResults> ListPersonalTokenWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalTokenApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create a new personal token
        /// </summary>
        /// <remarks>
        /// Create a new personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePersonalTokenResponse</returns>
        System.Threading.Tasks.Task<CreatePersonalTokenResponse> CreatePersonalTokenAsync(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create a new personal token
        /// </summary>
        /// <remarks>
        /// Create a new personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePersonalTokenResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreatePersonalTokenResponse>> CreatePersonalTokenWithHttpInfoAsync(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete a personal token by id
        /// </summary>
        /// <remarks>
        /// Delete a personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePersonalTokenAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete a personal token by id
        /// </summary>
        /// <remarks>
        /// Delete a personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonalTokenWithHttpInfoAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a personal token info
        /// </summary>
        /// <remarks>
        /// Get a personal token info
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalTokenResponseGet</returns>
        System.Threading.Tasks.Task<PersonalTokenResponseGet> GetPersonalTokenAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a personal token info
        /// </summary>
        /// <remarks>
        /// Get a personal token info
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalTokenResponseGet)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalTokenResponseGet>> GetPersonalTokenWithHttpInfoAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List all existing personal token
        /// </summary>
        /// <remarks>
        /// List all existing personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalTokenResponseWithResults</returns>
        System.Threading.Tasks.Task<PersonalTokenResponseWithResults> ListPersonalTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List all existing personal token
        /// </summary>
        /// <remarks>
        /// List all existing personal token
        /// </remarks>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalTokenResponseWithResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonalTokenResponseWithResults>> ListPersonalTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonalTokenApi : IPersonalTokenApiSync, IPersonalTokenApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonalTokenApi : IPersonalTokenApi
    {
        private personal_tokens.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalTokenApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalTokenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonalTokenApi(string basePath)
        {
            this.Configuration = personal_tokens.Client.Configuration.MergeConfigurations(
                personal_tokens.Client.GlobalConfiguration.Instance,
                new personal_tokens.Client.Configuration { BasePath = basePath }
            );
            this.Client = new personal_tokens.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new personal_tokens.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = personal_tokens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalTokenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonalTokenApi(personal_tokens.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = personal_tokens.Client.Configuration.MergeConfigurations(
                personal_tokens.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new personal_tokens.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new personal_tokens.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = personal_tokens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonalTokenApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PersonalTokenApi(personal_tokens.Client.ISynchronousClient client, personal_tokens.Client.IAsynchronousClient asyncClient, personal_tokens.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = personal_tokens.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public personal_tokens.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public personal_tokens.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public personal_tokens.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public personal_tokens.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create a new personal token Create a new personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreatePersonalTokenResponse</returns>
        public CreatePersonalTokenResponse CreatePersonalToken(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0)
        {
            personal_tokens.Client.ApiResponse<CreatePersonalTokenResponse> localVarResponse = CreatePersonalTokenWithHttpInfo(createPersonalTokenRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new personal token Create a new personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreatePersonalTokenResponse</returns>
        public personal_tokens.Client.ApiResponse<CreatePersonalTokenResponse> CreatePersonalTokenWithHttpInfo(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createPersonalTokenRequest' is set
            if (createPersonalTokenRequest == null)
            {
                throw new personal_tokens.Client.ApiException(400, "Missing required parameter 'createPersonalTokenRequest' when calling PersonalTokenApi->CreatePersonalToken");
            }

            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonalTokenRequest;

            localVarRequestOptions.Operation = "PersonalTokenApi.CreatePersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreatePersonalTokenResponse>("/iam/personal_tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create a new personal token Create a new personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreatePersonalTokenResponse</returns>
        public async System.Threading.Tasks.Task<CreatePersonalTokenResponse> CreatePersonalTokenAsync(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            personal_tokens.Client.ApiResponse<CreatePersonalTokenResponse> localVarResponse = await CreatePersonalTokenWithHttpInfoAsync(createPersonalTokenRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new personal token Create a new personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createPersonalTokenRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreatePersonalTokenResponse)</returns>
        public async System.Threading.Tasks.Task<personal_tokens.Client.ApiResponse<CreatePersonalTokenResponse>> CreatePersonalTokenWithHttpInfoAsync(CreatePersonalTokenRequest createPersonalTokenRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createPersonalTokenRequest' is set
            if (createPersonalTokenRequest == null)
            {
                throw new personal_tokens.Client.ApiException(400, "Missing required parameter 'createPersonalTokenRequest' when calling PersonalTokenApi->CreatePersonalToken");
            }


            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createPersonalTokenRequest;

            localVarRequestOptions.Operation = "PersonalTokenApi.CreatePersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreatePersonalTokenResponse>("/iam/personal_tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreatePersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a personal token by id Delete a personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeletePersonalToken(Guid personalTokenId, int operationIndex = 0)
        {
            DeletePersonalTokenWithHttpInfo(personalTokenId);
        }

        /// <summary>
        /// Delete a personal token by id Delete a personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public personal_tokens.Client.ApiResponse<Object> DeletePersonalTokenWithHttpInfo(Guid personalTokenId, int operationIndex = 0)
        {
            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalTokenId", personal_tokens.Client.ClientUtils.ParameterToString(personalTokenId)); // path parameter

            localVarRequestOptions.Operation = "PersonalTokenApi.DeletePersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/iam/personal_tokens/{personalTokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete a personal token by id Delete a personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePersonalTokenAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeletePersonalTokenWithHttpInfoAsync(personalTokenId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete a personal token by id Delete a personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<personal_tokens.Client.ApiResponse<Object>> DeletePersonalTokenWithHttpInfoAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalTokenId", personal_tokens.Client.ClientUtils.ParameterToString(personalTokenId)); // path parameter

            localVarRequestOptions.Operation = "PersonalTokenApi.DeletePersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/iam/personal_tokens/{personalTokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeletePersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a personal token info Get a personal token info
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalTokenResponseGet</returns>
        public PersonalTokenResponseGet GetPersonalToken(Guid personalTokenId, int operationIndex = 0)
        {
            personal_tokens.Client.ApiResponse<PersonalTokenResponseGet> localVarResponse = GetPersonalTokenWithHttpInfo(personalTokenId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a personal token info Get a personal token info
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalTokenResponseGet</returns>
        public personal_tokens.Client.ApiResponse<PersonalTokenResponseGet> GetPersonalTokenWithHttpInfo(Guid personalTokenId, int operationIndex = 0)
        {
            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalTokenId", personal_tokens.Client.ClientUtils.ParameterToString(personalTokenId)); // path parameter

            localVarRequestOptions.Operation = "PersonalTokenApi.GetPersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalTokenResponseGet>("/iam/personal_tokens/{personalTokenId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a personal token info Get a personal token info
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalTokenResponseGet</returns>
        public async System.Threading.Tasks.Task<PersonalTokenResponseGet> GetPersonalTokenAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            personal_tokens.Client.ApiResponse<PersonalTokenResponseGet> localVarResponse = await GetPersonalTokenWithHttpInfoAsync(personalTokenId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a personal token info Get a personal token info
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personalTokenId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalTokenResponseGet)</returns>
        public async System.Threading.Tasks.Task<personal_tokens.Client.ApiResponse<PersonalTokenResponseGet>> GetPersonalTokenWithHttpInfoAsync(Guid personalTokenId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("personalTokenId", personal_tokens.Client.ClientUtils.ParameterToString(personalTokenId)); // path parameter

            localVarRequestOptions.Operation = "PersonalTokenApi.GetPersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalTokenResponseGet>("/iam/personal_tokens/{personalTokenId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all existing personal token List all existing personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PersonalTokenResponseWithResults</returns>
        public PersonalTokenResponseWithResults ListPersonalToken(int operationIndex = 0)
        {
            personal_tokens.Client.ApiResponse<PersonalTokenResponseWithResults> localVarResponse = ListPersonalTokenWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all existing personal token List all existing personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PersonalTokenResponseWithResults</returns>
        public personal_tokens.Client.ApiResponse<PersonalTokenResponseWithResults> ListPersonalTokenWithHttpInfo(int operationIndex = 0)
        {
            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PersonalTokenApi.ListPersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<PersonalTokenResponseWithResults>("/iam/personal_tokens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// List all existing personal token List all existing personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PersonalTokenResponseWithResults</returns>
        public async System.Threading.Tasks.Task<PersonalTokenResponseWithResults> ListPersonalTokenAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            personal_tokens.Client.ApiResponse<PersonalTokenResponseWithResults> localVarResponse = await ListPersonalTokenWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List all existing personal token List all existing personal token
        /// </summary>
        /// <exception cref="personal_tokens.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PersonalTokenResponseWithResults)</returns>
        public async System.Threading.Tasks.Task<personal_tokens.Client.ApiResponse<PersonalTokenResponseWithResults>> ListPersonalTokenWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            personal_tokens.Client.RequestOptions localVarRequestOptions = new personal_tokens.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = personal_tokens.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = personal_tokens.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PersonalTokenApi.ListPersonalToken";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<PersonalTokenResponseWithResults>("/iam/personal_tokens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListPersonalToken", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
