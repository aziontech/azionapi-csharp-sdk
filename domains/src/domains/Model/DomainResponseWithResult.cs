/*
 * Domain API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = domains.Client.OpenAPIDateConverter;

namespace domains.Model
{
    /// <summary>
    /// DomainResponseWithResult
    /// </summary>
    [DataContract(Name = "DomainResponseWithResult")]
    public partial class DomainResponseWithResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResponseWithResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DomainResponseWithResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainResponseWithResult" /> class.
        /// </summary>
        /// <param name="count">count.</param>
        /// <param name="links">links.</param>
        /// <param name="results">results (required).</param>
        /// <param name="totalPages">totalPages.</param>
        /// <param name="schemaVersion">schemaVersion (required).</param>
        public DomainResponseWithResult(long count = default(long), DomainLinks links = default(DomainLinks), DomainEntity results = default(DomainEntity), long totalPages = default(long), long schemaVersion = default(long))
        {
            // to ensure "results" is required (not null)
            if (results == null)
            {
                throw new ArgumentNullException("results is a required property for DomainResponseWithResult and cannot be null");
            }
            this.Results = results;
            this.SchemaVersion = schemaVersion;
            this.Count = count;
            this.Links = links;
            this.TotalPages = totalPages;
        }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        [DataMember(Name = "count", EmitDefaultValue = false)]
        public long Count { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "links", EmitDefaultValue = false)]
        public DomainLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name = "results", IsRequired = true, EmitDefaultValue = true)]
        public DomainEntity Results { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name = "total_pages", EmitDefaultValue = false)]
        public long TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets SchemaVersion
        /// </summary>
        [DataMember(Name = "schema_version", IsRequired = true, EmitDefaultValue = true)]
        public long SchemaVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainResponseWithResult {\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  SchemaVersion: ").Append(SchemaVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
