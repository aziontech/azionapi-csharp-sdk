/*
 * Domain API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = domains.Client.OpenAPIDateConverter;

namespace domains.Model
{
    /// <summary>
    /// UpdateDomainRequest
    /// </summary>
    [DataContract(Name = "UpdateDomainRequest")]
    public partial class UpdateDomainRequest : IValidatableObject
    {
        /// <summary>
        /// Defines VarEnvironment
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VarEnvironmentEnum
        {
            /// <summary>
            /// Enum Production for value: production
            /// </summary>
            [EnumMember(Value = "production")]
            Production = 1,

            /// <summary>
            /// Enum Preview for value: preview
            /// </summary>
            [EnumMember(Value = "preview")]
            Preview = 2
        }


        /// <summary>
        /// Gets or Sets VarEnvironment
        /// </summary>
        [DataMember(Name = "environment", EmitDefaultValue = false)]
        public VarEnvironmentEnum? VarEnvironment { get; set; }
        /// <summary>
        /// Defines MtlsVerification
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum MtlsVerificationEnum
        {
            /// <summary>
            /// Enum Enforce for value: enforce
            /// </summary>
            [EnumMember(Value = "enforce")]
            Enforce = 1,

            /// <summary>
            /// Enum Permissive for value: permissive
            /// </summary>
            [EnumMember(Value = "permissive")]
            Permissive = 2
        }


        /// <summary>
        /// Gets or Sets MtlsVerification
        /// </summary>
        [DataMember(Name = "mtls_verification", EmitDefaultValue = false)]
        public MtlsVerificationEnum? MtlsVerification { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateDomainRequest" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="cnames">cnames.</param>
        /// <param name="cnameAccessOnly">cnameAccessOnly.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="edgeApplicationId">edgeApplicationId.</param>
        /// <param name="digitalCertificateId">digitalCertificateId.</param>
        /// <param name="varEnvironment">varEnvironment.</param>
        /// <param name="isMtlsEnabled">isMtlsEnabled.</param>
        /// <param name="mtlsTrustedCaCertificateId">mtlsTrustedCaCertificateId.</param>
        /// <param name="edgeFirewallId">edgeFirewallId.</param>
        /// <param name="mtlsVerification">mtlsVerification.</param>
        /// <param name="crlList">crlList.</param>
        public UpdateDomainRequest(string name = default(string), List<string> cnames = default(List<string>), bool cnameAccessOnly = default(bool), bool isActive = default(bool), long edgeApplicationId = default(long), DomainDataDigitalCertificateId digitalCertificateId = default(DomainDataDigitalCertificateId), VarEnvironmentEnum? varEnvironment = default(VarEnvironmentEnum?), bool isMtlsEnabled = default(bool), long? mtlsTrustedCaCertificateId = default(long?), long? edgeFirewallId = default(long?), MtlsVerificationEnum? mtlsVerification = default(MtlsVerificationEnum?), List<long> crlList = default(List<long>))
        {
            this.Name = name;
            this.Cnames = cnames;
            this.CnameAccessOnly = cnameAccessOnly;
            this.IsActive = isActive;
            this.EdgeApplicationId = edgeApplicationId;
            this.DigitalCertificateId = digitalCertificateId;
            this.VarEnvironment = varEnvironment;
            this.IsMtlsEnabled = isMtlsEnabled;
            this.MtlsTrustedCaCertificateId = mtlsTrustedCaCertificateId;
            this.EdgeFirewallId = edgeFirewallId;
            this.MtlsVerification = mtlsVerification;
            this.CrlList = crlList;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Cnames
        /// </summary>
        [DataMember(Name = "cnames", EmitDefaultValue = false)]
        public List<string> Cnames { get; set; }

        /// <summary>
        /// Gets or Sets CnameAccessOnly
        /// </summary>
        [DataMember(Name = "cname_access_only", EmitDefaultValue = true)]
        public bool CnameAccessOnly { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "is_active", EmitDefaultValue = true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets EdgeApplicationId
        /// </summary>
        [DataMember(Name = "edge_application_id", EmitDefaultValue = false)]
        public long EdgeApplicationId { get; set; }

        /// <summary>
        /// Gets or Sets DigitalCertificateId
        /// </summary>
        [DataMember(Name = "digital_certificate_id", EmitDefaultValue = false)]
        public DomainDataDigitalCertificateId DigitalCertificateId { get; set; }

        /// <summary>
        /// Gets or Sets IsMtlsEnabled
        /// </summary>
        [DataMember(Name = "is_mtls_enabled", EmitDefaultValue = true)]
        public bool IsMtlsEnabled { get; set; }

        /// <summary>
        /// Gets or Sets MtlsTrustedCaCertificateId
        /// </summary>
        [DataMember(Name = "mtls_trusted_ca_certificate_id", EmitDefaultValue = true)]
        public long? MtlsTrustedCaCertificateId { get; set; }

        /// <summary>
        /// Gets or Sets EdgeFirewallId
        /// </summary>
        [DataMember(Name = "edge_firewall_id", EmitDefaultValue = true)]
        public long? EdgeFirewallId { get; set; }

        /// <summary>
        /// Gets or Sets CrlList
        /// </summary>
        [DataMember(Name = "crl_list", EmitDefaultValue = true)]
        public List<long> CrlList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateDomainRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cnames: ").Append(Cnames).Append("\n");
            sb.Append("  CnameAccessOnly: ").Append(CnameAccessOnly).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  EdgeApplicationId: ").Append(EdgeApplicationId).Append("\n");
            sb.Append("  DigitalCertificateId: ").Append(DigitalCertificateId).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  IsMtlsEnabled: ").Append(IsMtlsEnabled).Append("\n");
            sb.Append("  MtlsTrustedCaCertificateId: ").Append(MtlsTrustedCaCertificateId).Append("\n");
            sb.Append("  EdgeFirewallId: ").Append(EdgeFirewallId).Append("\n");
            sb.Append("  MtlsVerification: ").Append(MtlsVerification).Append("\n");
            sb.Append("  CrlList: ").Append(CrlList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 100.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            if (this.Name != null) {
                // Name (string) pattern
                Regex regexName = new Regex(@"[a-zA-Z0-9$%^&*()-+=\[\]{};:?><,|/]+", RegexOptions.CultureInvariant);
                if (!regexName.Match(this.Name).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, must match a pattern of " + regexName, new [] { "Name" });
                }
            }

            // EdgeApplicationId (long) maximum
            if (this.EdgeApplicationId > (long)-8446744073709551616)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EdgeApplicationId, must be a value less than or equal to -8446744073709551616.", new [] { "EdgeApplicationId" });
            }

            // EdgeApplicationId (long) minimum
            if (this.EdgeApplicationId < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EdgeApplicationId, must be a value greater than or equal to 1.", new [] { "EdgeApplicationId" });
            }

            yield break;
        }
    }

}
