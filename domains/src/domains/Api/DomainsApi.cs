/*
 * Domain API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using domains.Client;
using domains.Model;

namespace domains.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It enables you to include a new domain into an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        DomainResponseWithResult CreateDomain(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0);

        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It enables you to include a new domain into an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        ApiResponse<DomainResponseWithResult> CreateDomainWithHttpInfo(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0);
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It enables you to delete a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DelDomain(string id, string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It enables you to delete a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DelDomainWithHttpInfo(string id, string? accept = default(string?), int operationIndex = 0);
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It returns details of a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        DomainResponseWithResult GetDomain(string id, string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It returns details of a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        ApiResponse<DomainResponseWithResult> GetDomainWithHttpInfo(string id, string? accept = default(string?), int operationIndex = 0);
        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It returns the list of domains of an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResults</returns>
        DomainResponseWithResults GetDomains(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0);

        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It returns the list of domains of an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResults</returns>
        ApiResponse<DomainResponseWithResults> GetDomainsWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0);
        /// <summary>
        /// /domains:/:id
        /// </summary>
        /// <remarks>
        /// It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        DomainResponseWithResult PutDomain(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0);

        /// <summary>
        /// /domains:/:id
        /// </summary>
        /// <remarks>
        /// It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        ApiResponse<DomainResponseWithResult> PutDomainWithHttpInfo(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0);
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        DomainResponseWithResult UpdateDomain(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0);

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        ApiResponse<DomainResponseWithResult> UpdateDomainWithHttpInfo(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It enables you to include a new domain into an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        System.Threading.Tasks.Task<DomainResponseWithResult> CreateDomainAsync(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It enables you to include a new domain into an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainResponseWithResult>> CreateDomainWithHttpInfoAsync(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It enables you to delete a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DelDomainAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It enables you to delete a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DelDomainWithHttpInfoAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It returns details of a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        System.Threading.Tasks.Task<DomainResponseWithResult> GetDomainAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It returns details of a domain.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainResponseWithResult>> GetDomainWithHttpInfoAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It returns the list of domains of an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResults</returns>
        System.Threading.Tasks.Task<DomainResponseWithResults> GetDomainsAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains
        /// </summary>
        /// <remarks>
        /// It returns the list of domains of an account.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainResponseWithResults>> GetDomainsWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /domains:/:id
        /// </summary>
        /// <remarks>
        /// It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        System.Threading.Tasks.Task<DomainResponseWithResult> PutDomainAsync(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains:/:id
        /// </summary>
        /// <remarks>
        /// It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainResponseWithResult>> PutDomainWithHttpInfoAsync(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        System.Threading.Tasks.Task<DomainResponseWithResult> UpdateDomainAsync(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// /domains/:id
        /// </summary>
        /// <remarks>
        /// It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </remarks>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<DomainResponseWithResult>> UpdateDomainWithHttpInfoAsync(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDomainsApi : IDomainsApiSync, IDomainsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DomainsApi : IDomainsApi
    {
        private domains.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainsApi(string basePath)
        {
            this.Configuration = domains.Client.Configuration.MergeConfigurations(
                domains.Client.GlobalConfiguration.Instance,
                new domains.Client.Configuration { BasePath = basePath }
            );
            this.Client = new domains.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new domains.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DomainsApi(domains.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = domains.Client.Configuration.MergeConfigurations(
                domains.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new domains.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new domains.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DomainsApi(domains.Client.ISynchronousClient client, domains.Client.IAsynchronousClient asyncClient, domains.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = domains.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public domains.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public domains.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public domains.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public domains.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// /domains It enables you to include a new domain into an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        public DomainResponseWithResult CreateDomain(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0)
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = CreateDomainWithHttpInfo(accept, contentType, createDomainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains It enables you to include a new domain into an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        public domains.Client.ApiResponse<DomainResponseWithResult> CreateDomainWithHttpInfo(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0)
        {
            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = createDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.CreateDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DomainResponseWithResult>("/domains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains It enables you to include a new domain into an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        public async System.Threading.Tasks.Task<DomainResponseWithResult> CreateDomainAsync(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = await CreateDomainWithHttpInfoAsync(accept, contentType, createDomainRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains It enables you to include a new domain into an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="createDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<DomainResponseWithResult>> CreateDomainWithHttpInfoAsync(string? accept = default(string?), string? contentType = default(string?), CreateDomainRequest? createDomainRequest = default(CreateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = createDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.CreateDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<DomainResponseWithResult>("/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It enables you to delete a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DelDomain(string id, string? accept = default(string?), int operationIndex = 0)
        {
            DelDomainWithHttpInfo(id, accept);
        }

        /// <summary>
        /// /domains/:id It enables you to delete a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public domains.Client.ApiResponse<Object> DelDomainWithHttpInfo(string id, string? accept = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->DelDomain");
            }

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.DelDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/domains/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It enables you to delete a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DelDomainAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DelDomainWithHttpInfoAsync(id, accept, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// /domains/:id It enables you to delete a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be deleted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<Object>> DelDomainWithHttpInfoAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->DelDomain");
            }


            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.DelDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/domains/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DelDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It returns details of a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        public DomainResponseWithResult GetDomain(string id, string? accept = default(string?), int operationIndex = 0)
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = GetDomainWithHttpInfo(id, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains/:id It returns details of a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        public domains.Client.ApiResponse<DomainResponseWithResult> GetDomainWithHttpInfo(string id, string? accept = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->GetDomain");
            }

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.GetDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It returns details of a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        public async System.Threading.Tasks.Task<DomainResponseWithResult> GetDomainAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = await GetDomainWithHttpInfoAsync(id, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains/:id It returns details of a domain.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the domain to be consulted. </param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<DomainResponseWithResult>> GetDomainWithHttpInfoAsync(string id, string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->GetDomain");
            }


            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.GetDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains It returns the list of domains of an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResults</returns>
        public DomainResponseWithResults GetDomains(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            domains.Client.ApiResponse<DomainResponseWithResults> localVarResponse = GetDomainsWithHttpInfo(page, pageSize, sort, orderBy, accept);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains It returns the list of domains of an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResults</returns>
        public domains.Client.ApiResponse<DomainResponseWithResults> GetDomainsWithHttpInfo(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0)
        {
            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.GetDomains";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<DomainResponseWithResults>("/domains", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDomains", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains It returns the list of domains of an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResults</returns>
        public async System.Threading.Tasks.Task<DomainResponseWithResults> GetDomainsAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            domains.Client.ApiResponse<DomainResponseWithResults> localVarResponse = await GetDomainsWithHttpInfoAsync(page, pageSize, sort, orderBy, accept, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains It returns the list of domains of an account.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="orderBy"> (optional)</param>
        /// <param name="accept"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResults)</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<DomainResponseWithResults>> GetDomainsWithHttpInfoAsync(long? page = default(long?), long? pageSize = default(long?), string? sort = default(string?), string? orderBy = default(string?), string? accept = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "page_size", pageSize));
            }
            if (sort != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(domains.Client.ClientUtils.ParameterToMultiMap("", "order_by", orderBy));
            }
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }

            localVarRequestOptions.Operation = "DomainsApi.GetDomains";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<DomainResponseWithResults>("/domains", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDomains", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains:/:id It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        public DomainResponseWithResult PutDomain(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0)
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = PutDomainWithHttpInfo(id, accept, contentType, putDomainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains:/:id It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        public domains.Client.ApiResponse<DomainResponseWithResult> PutDomainWithHttpInfo(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->PutDomain");
            }

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = putDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.PutDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains:/:id It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        public async System.Threading.Tasks.Task<DomainResponseWithResult> PutDomainAsync(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = await PutDomainWithHttpInfoAsync(id, accept, contentType, putDomainRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains:/:id It overwrites all fields of a domain, while preserving the id. Optional fields not filled in will be replaced by the default values.  To update only some fields in a domain, consider using the PATCH method instead of PUT.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="putDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<DomainResponseWithResult>> PutDomainWithHttpInfoAsync(string id, string? accept = default(string?), string? contentType = default(string?), PutDomainRequest? putDomainRequest = default(PutDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->PutDomain");
            }


            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = putDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.PutDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DomainResponseWithResult</returns>
        public DomainResponseWithResult UpdateDomain(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0)
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = UpdateDomainWithHttpInfo(id, accept, contentType, updateDomainRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains/:id It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DomainResponseWithResult</returns>
        public domains.Client.ApiResponse<DomainResponseWithResult> UpdateDomainWithHttpInfo(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->UpdateDomain");
            }

            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = updateDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.UpdateDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// /domains/:id It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DomainResponseWithResult</returns>
        public async System.Threading.Tasks.Task<DomainResponseWithResult> UpdateDomainAsync(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            domains.Client.ApiResponse<DomainResponseWithResult> localVarResponse = await UpdateDomainWithHttpInfoAsync(id, accept, contentType, updateDomainRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// /domains/:id It updates one or more fields in a Domain, preserving the value of the fields not informed.
        /// </summary>
        /// <exception cref="domains.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="accept"> (optional)</param>
        /// <param name="contentType"> (optional)</param>
        /// <param name="updateDomainRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DomainResponseWithResult)</returns>
        public async System.Threading.Tasks.Task<domains.Client.ApiResponse<DomainResponseWithResult>> UpdateDomainWithHttpInfoAsync(string id, string? accept = default(string?), string? contentType = default(string?), UpdateDomainRequest? updateDomainRequest = default(UpdateDomainRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new domains.Client.ApiException(400, "Missing required parameter 'id' when calling DomainsApi->UpdateDomain");
            }


            domains.Client.RequestOptions localVarRequestOptions = new domains.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json; version=3"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json; version=3"
            };

            var localVarContentType = domains.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = domains.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", domains.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (accept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", domains.Client.ClientUtils.ParameterToString(accept)); // header parameter
            }
            if (contentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", domains.Client.ClientUtils.ParameterToString(contentType)); // header parameter
            }
            localVarRequestOptions.Data = updateDomainRequest;

            localVarRequestOptions.Operation = "DomainsApi.UpdateDomain";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (tokenAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<DomainResponseWithResult>("/domains/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDomain", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
